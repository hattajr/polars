Search.setIndex({"alltitles": {"ABS": [[1395, "abs"]], "ACOS": [[1398, "acos"]], "ACOSD": [[1398, "acosd"]], "ARRAY_AGG": [[1391, "array-agg"]], "ARRAY_CONTAINS": [[1391, "array-contains"]], "ARRAY_GET": [[1391, "array-get"]], "ARRAY_LENGTH": [[1391, "array-length"]], "ARRAY_LOWER": [[1391, "array-lower"]], "ARRAY_MEAN": [[1391, "array-mean"]], "ARRAY_REVERSE": [[1391, "array-reverse"]], "ARRAY_SUM": [[1391, "array-sum"]], "ARRAY_TO_STRING": [[1391, "array-to-string"]], "ARRAY_UNIQUE": [[1391, "array-unique"]], "ARRAY_UPPER": [[1391, "array-upper"]], "ASIN": [[1398, "asin"]], "ASIND": [[1398, "asind"]], "ATAN": [[1398, "atan"]], "ATAN2": [[1398, "atan2"]], "ATAN2D": [[1398, "atan2d"]], "ATAND": [[1398, "atand"]], "AVG": [[1390, "avg"]], "Aggregate": [[1390, null]], "Aggregation": [[208, null], [364, null], [865, null], [977, null]], "Aliases": [[1390, null], [1390, null], [1390, null], [1395, null], [1395, null], [1396, null], [1396, null]], "Array": [[843, null], [1365, null], [1391, null]], "Asserts": [[1404, "asserts"]], "Attributes": [[351, null], [965, null], [1366, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[864, "avro"]], "BIT_AND": [[1392, "bit-and"]], "BIT_COUNT": [[1392, "bit-count"]], "BIT_LENGTH": [[1396, "bit-length"]], "BIT_OR": [[1392, "bit-or"]], "BIT_XOR": [[1392, "bit-xor"]], "Binary": [[844, null], [857, "binary"], [1367, null]], "Bitwise": [[1392, null]], "Boolean": [[845, null], [1368, null]], "CAST": [[1399, "cast"]], "CBRT": [[1395, "cbrt"]], "CEIL": [[1395, "ceil"]], "COALESCE": [[1393, "coalesce"]], "CONCAT": [[1396, "concat"]], "CONCAT_WS": [[1396, "concat-ws"]], "CORR": [[1390, "corr"]], "COS": [[1398, "cos"]], "COSD": [[1398, "cosd"]], "COT": [[1398, "cot"]], "COTD": [[1398, "cotd"]], "COUNT": [[1390, "count"]], "CREATE TABLE": [[1403, "create-table"]], "CSV": [[864, "csv"]], "Catalog": [[205, null]], "Categories": [[846, null], [1369, null]], "Clipboard": [[864, "clipboard"]], "Cloud Credentials": [[864, "cloud-credentials"]], "Columns / names": [[848, null]], "Comparison": [[857, "comparison"], [1377, "comparison"]], "Computation": [[352, null], [849, null], [1370, null]], "Conditional": [[1393, null]], "Config": [[207, null]], "Config load, save, state": [[207, "config-load-save-state"]], "Config options": [[207, "config-options"]], "Conjunction": [[857, "conjunction"]], "Conversion": [[862, "conversion"]], "DATE": [[1396, "date"]], "DATE_PART": [[1397, "date-part"]], "DEGREES": [[1398, "degrees"]], "DELETE": [[1403, "delete"]], "DISTINCT": [[1389, "distinct"]], "DIV": [[1395, "div"]], "DROP TABLES": [[1403, "drop-tables"]], "Data types": [[362, null]], "DataFrame": [[356, null]], "DataType": [[362, "datatype"]], "DataType expressions": [[361, null]], "Database": [[864, "database"]], "Delta Lake": [[864, "delta-lake"]], "Descriptive": [[353, null], [966, null], [1371, null]], "Documentation": [[1401, null], [1401, null], [1401, null]], "ENDS_WITH": [[1396, "ends-with"]], "EXCEPT": [[1402, "except"]], "EXP": [[1395, "exp"]], "EXPLAIN": [[1403, "explain"]], "EXTRACT": [[1397, "extract"]], "Errors": [[363, "errors"]], "Examples": [[1, "examples"], [976, "examples"], [1404, "examples"]], "Excel / ODS": [[864, "excel-ods"]], "Exceptions": [[363, null]], "Export": [[354, null], [1372, null]], "Expression SQL": [[1401, "expression-sql"]], "Expression plugins": [[974, "expression-plugins"]], "Expressions": [[851, null]], "Extending the API": [[1, null]], "FIRST": [[1390, "first"]], "FLOOR": [[1395, "floor"]], "FROM": [[1389, "from"]], "Feather / IPC": [[864, "feather-ipc"]], "Frame SQL": [[1401, "frame-sql"]], "Functions": [[361, "functions"], [850, null], [862, null], [976, "functions"]], "GPUEngine": [[967, null]], "GREATEST": [[1393, "greatest"]], "GROUP BY": [[1389, "group-by"]], "Global SQL": [[1401, "global-sql"]], "GroupBy": [[355, null], [968, null]], "HAVING": [[1389, "having"]], "IF": [[1393, "if"]], "IFNULL": [[1393, "ifnull"]], "INITCAP": [[1396, "initcap"]], "INTERSECT": [[1402, "intersect"]], "IO plugins": [[974, "io-plugins"]], "Iceberg": [[864, "iceberg"]], "Importing": [[976, "importing"]], "InProcessQuery": [[969, null]], "Index": [[0, null]], "Input/output": [[864, null]], "Introduction": [[1401, "introduction"]], "JOIN": [[1389, "join"]], "JSON": [[864, "json"]], "LAST": [[1390, "last"]], "LEAST": [[1393, "least"]], "LEFT": [[1396, "left"]], "LENGTH": [[1396, "length"]], "LIMIT": [[1389, "limit"]], "LN": [[1395, "ln"]], "LOG": [[1395, "log"]], "LOG10": [[1395, "log10"]], "LOG1P": [[1395, "log1p"]], "LOG2": [[1395, "log2"]], "LOWER": [[1396, "lower"]], "LTRIM": [[1396, "ltrim"]], "LazyFrame": [[970, null]], "List": [[852, null], [1374, null]], "MAX": [[1390, "max"]], "MEDIAN": [[1390, "median"]], "MIN": [[1390, "min"]], "MOD": [[1395, "mod"]], "Manipulation/selection": [[358, null], [855, null], [972, null], [1376, null]], "Math": [[1395, null]], "Meta": [[853, null]], "Metadata": [[973, null]], "Methods": [[1401, "methods"]], "Miscellaneous": [[357, null], [854, null], [862, "miscellaneous"], [971, null], [1375, null]], "Multiple Config instances": [[207, "multiple-config-instances"]], "Multiple queries": [[862, "multiple-queries"]], "NORMALIZE": [[1396, "normalize"]], "NULLIF": [[1393, "nullif"]], "Name": [[856, null]], "Nested": [[362, "nested"]], "Numeric": [[362, "numeric"], [857, "numeric"], [1377, "numeric"]], "OCTET_LENGTH": [[1396, "octet-length"]], "OFFSET": [[1389, "offset"]], "ORDER BY": [[1389, "order-by"]], "Operators": [[857, null], [1377, null]], "Other": [[362, "other"]], "PI": [[1395, "pi"]], "POW": [[1395, "pow"]], "Panic": [[363, "panic"]], "Parametric testing": [[1404, "parametric-testing"]], "Parquet": [[864, "parquet"]], "Partition": [[864, "partition"]], "Plot": [[359, null], [1378, null]], "Plugins": [[974, null]], "Polars strategies": [[1404, "polars-strategies"]], "Profiles": [[1404, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[864, "pyarrow-datasets"]], "Python API": [[1401, null]], "Python API reference": [[863, null]], "QUANTILE_CONT": [[1390, "quantile-cont"]], "QUANTILE_DISC": [[1390, "quantile-disc"]], "Querying": [[1401, "querying"]], "RADIANS": [[1398, "radians"]], "REGEXP_LIKE": [[1396, "regexp-like"]], "REPLACE": [[1396, "replace"]], "REVERSE": [[1396, "reverse"]], "RIGHT": [[1396, "right"]], "ROUND": [[1395, "round"]], "RTRIM": [[1396, "rtrim"]], "Random": [[862, "random"]], "SELECT": [[1389, "select"]], "SHOW TABLES": [[1403, "show-tables"]], "SIGN": [[1395, "sign"]], "SIN": [[1398, "sin"]], "SIND": [[1398, "sind"]], "SPLIT_PART": [[1396, "split-part"]], "SQL Clauses": [[1389, null]], "SQL Functions": [[1394, null]], "SQL Interface": [[1400, null]], "SQLContext": [[1401, "sqlcontext"]], "SQRT": [[1395, "sqrt"]], "STARTS_WITH": [[1396, "starts-with"]], "STDDEV": [[1390, "stddev"]], "STRFTIME": [[1397, "strftime"]], "STRING_TO_ARRAY": [[1396, "string-to-array"]], "STRPOS": [[1396, "strpos"]], "STRPTIME": [[1396, "strptime"]], "SUBSTR": [[1396, "substr"]], "SUM": [[1390, "sum"]], "Scan Cast Options": [[864, "scan-cast-options"]], "Schema": [[975, null]], "Selectors": [[976, null]], "Serialization": [[357, "serialization"], [971, "serialization"]], "Series": [[1373, null]], "Set Operations": [[1402, null]], "Set operations": [[976, "set-operations"]], "Strategy helpers": [[1404, "strategy-helpers"]], "String": [[362, "string"], [858, null], [1379, null], [1396, null]], "StringCache": [[862, "stringcache"]], "Struct": [[859, null], [1380, null]], "Style": [[360, null]], "TAN": [[1398, "tan"]], "TAND": [[1398, "tand"]], "TIMESTAMP": [[1396, "timestamp"]], "TRUNCATE": [[1403, "truncate"]], "TRY_CAST": [[1399, "try-cast"]], "Table Operations": [[1403, null]], "Temporal": [[362, "temporal"], [860, null], [1381, null], [1397, null]], "Testing": [[1404, null]], "Trigonometry": [[1398, null]], "Types": [[1399, null]], "UNION": [[1402, "union"]], "UNION ALL": [[1402, "union-all"]], "UNION BY NAME": [[1402, "union-by-name"]], "UNNEST": [[1391, "unnest"], [1403, "unnest"]], "UPPER": [[1396, "upper"]], "Unity Catalog": [[206, null]], "Use as a context manager": [[207, "use-as-a-context-manager"]], "Use as a decorator": [[207, "use-as-a-decorator"]], "VARIANCE": [[1390, "variance"]], "WHERE": [[1389, "where"]], "Warnings": [[363, "warnings"]], "Window": [[861, null]], "polars.Catalog": [[192, null]], "polars.Catalog.get_table_info": [[193, null]], "polars.Catalog.list_catalogs": [[194, null]], "polars.Catalog.list_namespaces": [[195, null]], "polars.Catalog.list_tables": [[196, null]], "polars.Catalog.scan_table": [[197, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_engine_affinity": [[10, null]], "polars.Config.set_float_precision": [[11, null]], "polars.Config.set_fmt_float": [[12, null]], "polars.Config.set_fmt_str_lengths": [[13, null]], "polars.Config.set_fmt_table_cell_list_len": [[14, null]], "polars.Config.set_streaming_chunk_size": [[15, null]], "polars.Config.set_tbl_cell_alignment": [[16, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, null]], "polars.Config.set_tbl_cols": [[18, null]], "polars.Config.set_tbl_column_data_type_inline": [[19, null]], "polars.Config.set_tbl_dataframe_shape_below": [[20, null]], "polars.Config.set_tbl_formatting": [[21, null]], "polars.Config.set_tbl_hide_column_data_types": [[22, null]], "polars.Config.set_tbl_hide_column_names": [[23, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, null]], "polars.Config.set_tbl_hide_dtype_separator": [[25, null]], "polars.Config.set_tbl_rows": [[26, null]], "polars.Config.set_tbl_width_chars": [[27, null]], "polars.Config.set_thousands_separator": [[28, null]], "polars.Config.set_trim_decimal_zeros": [[29, null]], "polars.Config.set_verbose": [[30, null]], "polars.Config.state": [[31, null]], "polars.CredentialProvider": [[32, null]], "polars.CredentialProviderAWS": [[33, null]], "polars.CredentialProviderAzure": [[34, null]], "polars.CredentialProviderGCP": [[35, null]], "polars.DataFrame.__array__": [[209, null]], "polars.DataFrame.__arrow_c_stream__": [[210, null]], "polars.DataFrame.__dataframe__": [[211, null]], "polars.DataFrame.__getitem__": [[212, null]], "polars.DataFrame.__setitem__": [[213, null]], "polars.DataFrame.approx_n_unique": [[214, null]], "polars.DataFrame.bottom_k": [[215, null]], "polars.DataFrame.cast": [[216, null]], "polars.DataFrame.clear": [[217, null]], "polars.DataFrame.clone": [[218, null]], "polars.DataFrame.collect_schema": [[219, null]], "polars.DataFrame.columns": [[220, null]], "polars.DataFrame.corr": [[221, null]], "polars.DataFrame.count": [[222, null]], "polars.DataFrame.describe": [[223, null]], "polars.DataFrame.deserialize": [[224, null]], "polars.DataFrame.drop": [[225, null]], "polars.DataFrame.drop_in_place": [[226, null]], "polars.DataFrame.drop_nans": [[227, null]], "polars.DataFrame.drop_nulls": [[228, null]], "polars.DataFrame.dtypes": [[229, null]], "polars.DataFrame.equals": [[230, null]], "polars.DataFrame.estimated_size": [[231, null]], "polars.DataFrame.explode": [[232, null]], "polars.DataFrame.extend": [[233, null]], "polars.DataFrame.fill_nan": [[234, null]], "polars.DataFrame.fill_null": [[235, null]], "polars.DataFrame.filter": [[236, null]], "polars.DataFrame.flags": [[237, null]], "polars.DataFrame.fold": [[238, null]], "polars.DataFrame.gather_every": [[239, null]], "polars.DataFrame.get_column": [[240, null]], "polars.DataFrame.get_column_index": [[241, null]], "polars.DataFrame.get_columns": [[242, null]], "polars.DataFrame.glimpse": [[243, null]], "polars.DataFrame.group_by": [[244, null]], "polars.DataFrame.group_by_dynamic": [[245, null]], "polars.DataFrame.hash_rows": [[246, null]], "polars.DataFrame.head": [[247, null]], "polars.DataFrame.height": [[248, null]], "polars.DataFrame.hstack": [[249, null]], "polars.DataFrame.insert_column": [[250, null]], "polars.DataFrame.interpolate": [[251, null]], "polars.DataFrame.is_duplicated": [[252, null]], "polars.DataFrame.is_empty": [[253, null]], "polars.DataFrame.is_unique": [[254, null]], "polars.DataFrame.item": [[255, null]], "polars.DataFrame.iter_columns": [[256, null]], "polars.DataFrame.iter_rows": [[257, null]], "polars.DataFrame.iter_slices": [[258, null]], "polars.DataFrame.join": [[259, null]], "polars.DataFrame.join_asof": [[260, null]], "polars.DataFrame.join_where": [[261, null]], "polars.DataFrame.lazy": [[262, null]], "polars.DataFrame.limit": [[263, null]], "polars.DataFrame.map_rows": [[264, null]], "polars.DataFrame.match_to_schema": [[265, null]], "polars.DataFrame.max": [[266, null]], "polars.DataFrame.max_horizontal": [[267, null]], "polars.DataFrame.mean": [[268, null]], "polars.DataFrame.mean_horizontal": [[269, null]], "polars.DataFrame.median": [[270, null]], "polars.DataFrame.melt": [[271, null]], "polars.DataFrame.merge_sorted": [[272, null]], "polars.DataFrame.min": [[273, null]], "polars.DataFrame.min_horizontal": [[274, null]], "polars.DataFrame.n_chunks": [[275, null]], "polars.DataFrame.n_unique": [[276, null]], "polars.DataFrame.null_count": [[277, null]], "polars.DataFrame.partition_by": [[278, null]], "polars.DataFrame.pipe": [[279, null]], "polars.DataFrame.pivot": [[280, null]], "polars.DataFrame.product": [[281, null]], "polars.DataFrame.quantile": [[282, null]], "polars.DataFrame.rechunk": [[283, null]], "polars.DataFrame.remove": [[284, null]], "polars.DataFrame.rename": [[285, null]], "polars.DataFrame.replace_column": [[286, null]], "polars.DataFrame.reverse": [[287, null]], "polars.DataFrame.rolling": [[288, null]], "polars.DataFrame.row": [[289, null]], "polars.DataFrame.rows": [[290, null]], "polars.DataFrame.rows_by_key": [[291, null]], "polars.DataFrame.sample": [[292, null]], "polars.DataFrame.schema": [[293, null]], "polars.DataFrame.select": [[294, null]], "polars.DataFrame.select_seq": [[295, null]], "polars.DataFrame.serialize": [[296, null]], "polars.DataFrame.set_sorted": [[297, null]], "polars.DataFrame.shape": [[298, null]], "polars.DataFrame.shift": [[299, null]], "polars.DataFrame.shrink_to_fit": [[300, null]], "polars.DataFrame.slice": [[301, null]], "polars.DataFrame.sort": [[302, null]], "polars.DataFrame.sql": [[303, null]], "polars.DataFrame.std": [[304, null]], "polars.DataFrame.sum": [[305, null]], "polars.DataFrame.sum_horizontal": [[306, null]], "polars.DataFrame.tail": [[307, null]], "polars.DataFrame.to_arrow": [[308, null]], "polars.DataFrame.to_dict": [[309, null]], "polars.DataFrame.to_dicts": [[310, null]], "polars.DataFrame.to_dummies": [[311, null]], "polars.DataFrame.to_init_repr": [[312, null]], "polars.DataFrame.to_jax": [[313, null]], "polars.DataFrame.to_numpy": [[314, null]], "polars.DataFrame.to_pandas": [[315, null]], "polars.DataFrame.to_series": [[316, null]], "polars.DataFrame.to_struct": [[317, null]], "polars.DataFrame.to_torch": [[318, null]], "polars.DataFrame.top_k": [[319, null]], "polars.DataFrame.transpose": [[320, null]], "polars.DataFrame.unique": [[321, null]], "polars.DataFrame.unnest": [[322, null]], "polars.DataFrame.unpivot": [[323, null]], "polars.DataFrame.unstack": [[324, null]], "polars.DataFrame.update": [[325, null]], "polars.DataFrame.upsample": [[326, null]], "polars.DataFrame.var": [[327, null]], "polars.DataFrame.vstack": [[328, null]], "polars.DataFrame.width": [[329, null]], "polars.DataFrame.with_columns": [[330, null]], "polars.DataFrame.with_columns_seq": [[331, null]], "polars.DataFrame.with_row_count": [[332, null]], "polars.DataFrame.with_row_index": [[333, null]], "polars.DataFrame.write_avro": [[36, null]], "polars.DataFrame.write_clipboard": [[37, null]], "polars.DataFrame.write_csv": [[38, null]], "polars.DataFrame.write_database": [[39, null]], "polars.DataFrame.write_delta": [[40, null]], "polars.DataFrame.write_excel": [[41, null]], "polars.DataFrame.write_iceberg": [[42, null]], "polars.DataFrame.write_ipc": [[43, null]], "polars.DataFrame.write_ipc_stream": [[44, null]], "polars.DataFrame.write_json": [[45, null]], "polars.DataFrame.write_ndjson": [[46, null]], "polars.DataFrame.write_parquet": [[47, null]], "polars.DataType.to_dtype_expr": [[48, null]], "polars.Expr.abs": [[365, null]], "polars.Expr.add": [[366, null]], "polars.Expr.agg_groups": [[367, null]], "polars.Expr.alias": [[368, null]], "polars.Expr.all": [[369, null]], "polars.Expr.and_": [[370, null]], "polars.Expr.any": [[371, null]], "polars.Expr.append": [[372, null]], "polars.Expr.approx_n_unique": [[373, null]], "polars.Expr.arccos": [[374, null]], "polars.Expr.arccosh": [[375, null]], "polars.Expr.arcsin": [[376, null]], "polars.Expr.arcsinh": [[377, null]], "polars.Expr.arctan": [[378, null]], "polars.Expr.arctanh": [[379, null]], "polars.Expr.arg_max": [[380, null]], "polars.Expr.arg_min": [[381, null]], "polars.Expr.arg_sort": [[382, null]], "polars.Expr.arg_true": [[383, null]], "polars.Expr.arg_unique": [[384, null]], "polars.Expr.arr.all": [[385, null]], "polars.Expr.arr.any": [[386, null]], "polars.Expr.arr.arg_max": [[387, null]], "polars.Expr.arr.arg_min": [[388, null]], "polars.Expr.arr.contains": [[389, null]], "polars.Expr.arr.count_matches": [[390, null]], "polars.Expr.arr.explode": [[391, null]], "polars.Expr.arr.first": [[392, null]], "polars.Expr.arr.get": [[393, null]], "polars.Expr.arr.join": [[394, null]], "polars.Expr.arr.last": [[395, null]], "polars.Expr.arr.max": [[396, null]], "polars.Expr.arr.median": [[397, null]], "polars.Expr.arr.min": [[398, null]], "polars.Expr.arr.n_unique": [[399, null]], "polars.Expr.arr.reverse": [[400, null]], "polars.Expr.arr.shift": [[401, null]], "polars.Expr.arr.sort": [[402, null]], "polars.Expr.arr.std": [[403, null]], "polars.Expr.arr.sum": [[404, null]], "polars.Expr.arr.to_list": [[405, null]], "polars.Expr.arr.to_struct": [[406, null]], "polars.Expr.arr.unique": [[407, null]], "polars.Expr.arr.var": [[408, null]], "polars.Expr.backward_fill": [[409, null]], "polars.Expr.bin.contains": [[410, null]], "polars.Expr.bin.decode": [[411, null]], "polars.Expr.bin.encode": [[412, null]], "polars.Expr.bin.ends_with": [[413, null]], "polars.Expr.bin.reinterpret": [[414, null]], "polars.Expr.bin.size": [[415, null]], "polars.Expr.bin.starts_with": [[416, null]], "polars.Expr.bitwise_and": [[417, null]], "polars.Expr.bitwise_count_ones": [[418, null]], "polars.Expr.bitwise_count_zeros": [[419, null]], "polars.Expr.bitwise_leading_ones": [[420, null]], "polars.Expr.bitwise_leading_zeros": [[421, null]], "polars.Expr.bitwise_or": [[422, null]], "polars.Expr.bitwise_trailing_ones": [[423, null]], "polars.Expr.bitwise_trailing_zeros": [[424, null]], "polars.Expr.bitwise_xor": [[425, null]], "polars.Expr.bottom_k": [[426, null]], "polars.Expr.bottom_k_by": [[427, null]], "polars.Expr.cast": [[428, null]], "polars.Expr.cat.ends_with": [[429, null]], "polars.Expr.cat.get_categories": [[430, null]], "polars.Expr.cat.len_bytes": [[431, null]], "polars.Expr.cat.len_chars": [[432, null]], "polars.Expr.cat.starts_with": [[433, null]], "polars.Expr.cbrt": [[434, null]], "polars.Expr.ceil": [[435, null]], "polars.Expr.clip": [[436, null]], "polars.Expr.cos": [[437, null]], "polars.Expr.cosh": [[438, null]], "polars.Expr.cot": [[439, null]], "polars.Expr.count": [[440, null]], "polars.Expr.cum_count": [[441, null]], "polars.Expr.cum_max": [[442, null]], "polars.Expr.cum_min": [[443, null]], "polars.Expr.cum_prod": [[444, null]], "polars.Expr.cum_sum": [[445, null]], "polars.Expr.cumulative_eval": [[446, null]], "polars.Expr.cut": [[447, null]], "polars.Expr.degrees": [[448, null]], "polars.Expr.deserialize": [[449, null]], "polars.Expr.diff": [[450, null]], "polars.Expr.dot": [[451, null]], "polars.Expr.drop_nans": [[452, null]], "polars.Expr.drop_nulls": [[453, null]], "polars.Expr.dt.add_business_days": [[454, null]], "polars.Expr.dt.base_utc_offset": [[455, null]], "polars.Expr.dt.cast_time_unit": [[456, null]], "polars.Expr.dt.century": [[457, null]], "polars.Expr.dt.combine": [[458, null]], "polars.Expr.dt.convert_time_zone": [[459, null]], "polars.Expr.dt.date": [[460, null]], "polars.Expr.dt.datetime": [[461, null]], "polars.Expr.dt.day": [[462, null]], "polars.Expr.dt.dst_offset": [[463, null]], "polars.Expr.dt.epoch": [[464, null]], "polars.Expr.dt.hour": [[465, null]], "polars.Expr.dt.is_business_day": [[466, null]], "polars.Expr.dt.is_leap_year": [[467, null]], "polars.Expr.dt.iso_year": [[468, null]], "polars.Expr.dt.microsecond": [[469, null]], "polars.Expr.dt.millennium": [[470, null]], "polars.Expr.dt.millisecond": [[471, null]], "polars.Expr.dt.minute": [[472, null]], "polars.Expr.dt.month": [[473, null]], "polars.Expr.dt.month_end": [[474, null]], "polars.Expr.dt.month_start": [[475, null]], "polars.Expr.dt.nanosecond": [[476, null]], "polars.Expr.dt.offset_by": [[477, null]], "polars.Expr.dt.ordinal_day": [[478, null]], "polars.Expr.dt.quarter": [[479, null]], "polars.Expr.dt.replace": [[480, null]], "polars.Expr.dt.replace_time_zone": [[481, null]], "polars.Expr.dt.round": [[482, null]], "polars.Expr.dt.second": [[483, null]], "polars.Expr.dt.strftime": [[484, null]], "polars.Expr.dt.time": [[485, null]], "polars.Expr.dt.timestamp": [[486, null]], "polars.Expr.dt.to_string": [[487, null]], "polars.Expr.dt.total_days": [[488, null]], "polars.Expr.dt.total_hours": [[489, null]], "polars.Expr.dt.total_microseconds": [[490, null]], "polars.Expr.dt.total_milliseconds": [[491, null]], "polars.Expr.dt.total_minutes": [[492, null]], "polars.Expr.dt.total_nanoseconds": [[493, null]], "polars.Expr.dt.total_seconds": [[494, null]], "polars.Expr.dt.truncate": [[495, null]], "polars.Expr.dt.week": [[496, null]], "polars.Expr.dt.weekday": [[497, null]], "polars.Expr.dt.with_time_unit": [[498, null]], "polars.Expr.dt.year": [[499, null]], "polars.Expr.entropy": [[500, null]], "polars.Expr.eq": [[501, null]], "polars.Expr.eq_missing": [[502, null]], "polars.Expr.ewm_mean": [[503, null]], "polars.Expr.ewm_mean_by": [[504, null]], "polars.Expr.ewm_std": [[505, null]], "polars.Expr.ewm_var": [[506, null]], "polars.Expr.exclude": [[507, null]], "polars.Expr.exp": [[508, null]], "polars.Expr.explode": [[509, null]], "polars.Expr.extend_constant": [[510, null]], "polars.Expr.fill_nan": [[511, null]], "polars.Expr.fill_null": [[512, null]], "polars.Expr.filter": [[513, null]], "polars.Expr.first": [[514, null]], "polars.Expr.flatten": [[515, null]], "polars.Expr.floor": [[516, null]], "polars.Expr.floordiv": [[517, null]], "polars.Expr.forward_fill": [[518, null]], "polars.Expr.from_json": [[519, null]], "polars.Expr.gather": [[520, null]], "polars.Expr.gather_every": [[521, null]], "polars.Expr.ge": [[522, null]], "polars.Expr.get": [[523, null]], "polars.Expr.gt": [[524, null]], "polars.Expr.has_nulls": [[525, null]], "polars.Expr.hash": [[526, null]], "polars.Expr.head": [[527, null]], "polars.Expr.hist": [[528, null]], "polars.Expr.implode": [[529, null]], "polars.Expr.index_of": [[530, null]], "polars.Expr.inspect": [[531, null]], "polars.Expr.interpolate": [[532, null]], "polars.Expr.interpolate_by": [[533, null]], "polars.Expr.is_between": [[534, null]], "polars.Expr.is_close": [[535, null]], "polars.Expr.is_duplicated": [[536, null]], "polars.Expr.is_finite": [[537, null]], "polars.Expr.is_first_distinct": [[538, null]], "polars.Expr.is_in": [[539, null]], "polars.Expr.is_infinite": [[540, null]], "polars.Expr.is_last_distinct": [[541, null]], "polars.Expr.is_nan": [[542, null]], "polars.Expr.is_not_nan": [[543, null]], "polars.Expr.is_not_null": [[544, null]], "polars.Expr.is_null": [[545, null]], "polars.Expr.is_unique": [[546, null]], "polars.Expr.kurtosis": [[547, null]], "polars.Expr.last": [[548, null]], "polars.Expr.le": [[549, null]], "polars.Expr.len": [[550, null]], "polars.Expr.limit": [[551, null]], "polars.Expr.list.all": [[552, null]], "polars.Expr.list.any": [[553, null]], "polars.Expr.list.arg_max": [[554, null]], "polars.Expr.list.arg_min": [[555, null]], "polars.Expr.list.concat": [[556, null]], "polars.Expr.list.contains": [[557, null]], "polars.Expr.list.count_matches": [[558, null]], "polars.Expr.list.diff": [[559, null]], "polars.Expr.list.drop_nulls": [[560, null]], "polars.Expr.list.eval": [[561, null]], "polars.Expr.list.explode": [[562, null]], "polars.Expr.list.first": [[563, null]], "polars.Expr.list.gather": [[564, null]], "polars.Expr.list.gather_every": [[565, null]], "polars.Expr.list.get": [[566, null]], "polars.Expr.list.head": [[567, null]], "polars.Expr.list.join": [[568, null]], "polars.Expr.list.last": [[569, null]], "polars.Expr.list.len": [[570, null]], "polars.Expr.list.max": [[571, null]], "polars.Expr.list.mean": [[572, null]], "polars.Expr.list.median": [[573, null]], "polars.Expr.list.min": [[574, null]], "polars.Expr.list.n_unique": [[575, null]], "polars.Expr.list.reverse": [[576, null]], "polars.Expr.list.sample": [[577, null]], "polars.Expr.list.set_difference": [[578, null]], "polars.Expr.list.set_intersection": [[579, null]], "polars.Expr.list.set_symmetric_difference": [[580, null]], "polars.Expr.list.set_union": [[581, null]], "polars.Expr.list.shift": [[582, null]], "polars.Expr.list.slice": [[583, null]], "polars.Expr.list.sort": [[584, null]], "polars.Expr.list.std": [[585, null]], "polars.Expr.list.sum": [[586, null]], "polars.Expr.list.tail": [[587, null]], "polars.Expr.list.to_array": [[588, null]], "polars.Expr.list.to_struct": [[589, null]], "polars.Expr.list.unique": [[590, null]], "polars.Expr.list.var": [[591, null]], "polars.Expr.log": [[592, null]], "polars.Expr.log10": [[593, null]], "polars.Expr.log1p": [[594, null]], "polars.Expr.lower_bound": [[595, null]], "polars.Expr.lt": [[596, null]], "polars.Expr.map_batches": [[597, null]], "polars.Expr.map_elements": [[598, null]], "polars.Expr.max": [[599, null]], "polars.Expr.mean": [[600, null]], "polars.Expr.median": [[601, null]], "polars.Expr.meta.eq": [[602, null]], "polars.Expr.meta.has_multiple_outputs": [[603, null]], "polars.Expr.meta.is_column": [[604, null]], "polars.Expr.meta.is_column_selection": [[605, null]], "polars.Expr.meta.is_literal": [[606, null]], "polars.Expr.meta.is_regex_projection": [[607, null]], "polars.Expr.meta.ne": [[608, null]], "polars.Expr.meta.output_name": [[609, null]], "polars.Expr.meta.pop": [[610, null]], "polars.Expr.meta.root_names": [[611, null]], "polars.Expr.meta.serialize": [[612, null]], "polars.Expr.meta.show_graph": [[613, null]], "polars.Expr.meta.tree_format": [[614, null]], "polars.Expr.meta.undo_aliases": [[615, null]], "polars.Expr.meta.write_json": [[616, null]], "polars.Expr.min": [[617, null]], "polars.Expr.mod": [[618, null]], "polars.Expr.mode": [[619, null]], "polars.Expr.mul": [[620, null]], "polars.Expr.n_unique": [[621, null]], "polars.Expr.name.keep": [[622, null]], "polars.Expr.name.map": [[623, null]], "polars.Expr.name.map_fields": [[624, null]], "polars.Expr.name.prefix": [[625, null]], "polars.Expr.name.prefix_fields": [[626, null]], "polars.Expr.name.suffix": [[627, null]], "polars.Expr.name.suffix_fields": [[628, null]], "polars.Expr.name.to_lowercase": [[629, null]], "polars.Expr.name.to_uppercase": [[630, null]], "polars.Expr.nan_max": [[631, null]], "polars.Expr.nan_min": [[632, null]], "polars.Expr.ne": [[633, null]], "polars.Expr.ne_missing": [[634, null]], "polars.Expr.neg": [[635, null]], "polars.Expr.not_": [[636, null]], "polars.Expr.null_count": [[637, null]], "polars.Expr.or_": [[638, null]], "polars.Expr.over": [[639, null]], "polars.Expr.pct_change": [[640, null]], "polars.Expr.peak_max": [[641, null]], "polars.Expr.peak_min": [[642, null]], "polars.Expr.pipe": [[643, null]], "polars.Expr.pow": [[644, null]], "polars.Expr.product": [[645, null]], "polars.Expr.qcut": [[646, null]], "polars.Expr.quantile": [[647, null]], "polars.Expr.radians": [[648, null]], "polars.Expr.rank": [[649, null]], "polars.Expr.rechunk": [[650, null]], "polars.Expr.reinterpret": [[651, null]], "polars.Expr.repeat_by": [[652, null]], "polars.Expr.replace": [[653, null]], "polars.Expr.replace_strict": [[654, null]], "polars.Expr.reshape": [[655, null]], "polars.Expr.reverse": [[656, null]], "polars.Expr.rle": [[657, null]], "polars.Expr.rle_id": [[658, null]], "polars.Expr.rolling": [[659, null]], "polars.Expr.rolling_kurtosis": [[660, null]], "polars.Expr.rolling_map": [[661, null]], "polars.Expr.rolling_max": [[662, null]], "polars.Expr.rolling_max_by": [[663, null]], "polars.Expr.rolling_mean": [[664, null]], "polars.Expr.rolling_mean_by": [[665, null]], "polars.Expr.rolling_median": [[666, null]], "polars.Expr.rolling_median_by": [[667, null]], "polars.Expr.rolling_min": [[668, null]], "polars.Expr.rolling_min_by": [[669, null]], "polars.Expr.rolling_quantile": [[670, null]], "polars.Expr.rolling_quantile_by": [[671, null]], "polars.Expr.rolling_skew": [[672, null]], "polars.Expr.rolling_std": [[673, null]], "polars.Expr.rolling_std_by": [[674, null]], "polars.Expr.rolling_sum": [[675, null]], "polars.Expr.rolling_sum_by": [[676, null]], "polars.Expr.rolling_var": [[677, null]], "polars.Expr.rolling_var_by": [[678, null]], "polars.Expr.round": [[679, null]], "polars.Expr.round_sig_figs": [[680, null]], "polars.Expr.sample": [[681, null]], "polars.Expr.search_sorted": [[682, null]], "polars.Expr.set_sorted": [[683, null]], "polars.Expr.shift": [[684, null]], "polars.Expr.shrink_dtype": [[685, null]], "polars.Expr.shuffle": [[686, null]], "polars.Expr.sign": [[687, null]], "polars.Expr.sin": [[688, null]], "polars.Expr.sinh": [[689, null]], "polars.Expr.skew": [[690, null]], "polars.Expr.slice": [[691, null]], "polars.Expr.sort": [[692, null]], "polars.Expr.sort_by": [[693, null]], "polars.Expr.sqrt": [[694, null]], "polars.Expr.std": [[695, null]], "polars.Expr.str.concat": [[696, null]], "polars.Expr.str.contains": [[697, null]], "polars.Expr.str.contains_any": [[698, null]], "polars.Expr.str.count_matches": [[699, null]], "polars.Expr.str.decode": [[700, null]], "polars.Expr.str.encode": [[701, null]], "polars.Expr.str.ends_with": [[702, null]], "polars.Expr.str.escape_regex": [[703, null]], "polars.Expr.str.explode": [[704, null]], "polars.Expr.str.extract": [[705, null]], "polars.Expr.str.extract_all": [[706, null]], "polars.Expr.str.extract_groups": [[707, null]], "polars.Expr.str.extract_many": [[708, null]], "polars.Expr.str.find": [[709, null]], "polars.Expr.str.find_many": [[710, null]], "polars.Expr.str.head": [[711, null]], "polars.Expr.str.join": [[712, null]], "polars.Expr.str.json_decode": [[713, null]], "polars.Expr.str.json_path_match": [[714, null]], "polars.Expr.str.len_bytes": [[715, null]], "polars.Expr.str.len_chars": [[716, null]], "polars.Expr.str.normalize": [[717, null]], "polars.Expr.str.pad_end": [[718, null]], "polars.Expr.str.pad_start": [[719, null]], "polars.Expr.str.replace": [[720, null]], "polars.Expr.str.replace_all": [[721, null]], "polars.Expr.str.replace_many": [[722, null]], "polars.Expr.str.reverse": [[723, null]], "polars.Expr.str.slice": [[724, null]], "polars.Expr.str.split": [[725, null]], "polars.Expr.str.split_exact": [[726, null]], "polars.Expr.str.splitn": [[727, null]], "polars.Expr.str.starts_with": [[728, null]], "polars.Expr.str.strip_chars": [[729, null]], "polars.Expr.str.strip_chars_end": [[730, null]], "polars.Expr.str.strip_chars_start": [[731, null]], "polars.Expr.str.strip_prefix": [[732, null]], "polars.Expr.str.strip_suffix": [[733, null]], "polars.Expr.str.strptime": [[734, null]], "polars.Expr.str.tail": [[735, null]], "polars.Expr.str.to_date": [[736, null]], "polars.Expr.str.to_datetime": [[737, null]], "polars.Expr.str.to_decimal": [[738, null]], "polars.Expr.str.to_integer": [[739, null]], "polars.Expr.str.to_lowercase": [[740, null]], "polars.Expr.str.to_time": [[741, null]], "polars.Expr.str.to_titlecase": [[742, null]], "polars.Expr.str.to_uppercase": [[743, null]], "polars.Expr.str.zfill": [[744, null]], "polars.Expr.struct.field": [[745, null]], "polars.Expr.struct.json_encode": [[746, null]], "polars.Expr.struct.rename_fields": [[747, null]], "polars.Expr.struct.unnest": [[748, null]], "polars.Expr.struct.with_fields": [[749, null]], "polars.Expr.sub": [[750, null]], "polars.Expr.sum": [[751, null]], "polars.Expr.tail": [[752, null]], "polars.Expr.tan": [[753, null]], "polars.Expr.tanh": [[754, null]], "polars.Expr.to_physical": [[755, null]], "polars.Expr.top_k": [[756, null]], "polars.Expr.top_k_by": [[757, null]], "polars.Expr.truediv": [[758, null]], "polars.Expr.unique": [[759, null]], "polars.Expr.unique_counts": [[760, null]], "polars.Expr.upper_bound": [[761, null]], "polars.Expr.value_counts": [[762, null]], "polars.Expr.var": [[763, null]], "polars.Expr.where": [[764, null]], "polars.Expr.xor": [[765, null]], "polars.LazyFrame.__getitem__": [[866, null]], "polars.LazyFrame.approx_n_unique": [[867, null]], "polars.LazyFrame.bottom_k": [[868, null]], "polars.LazyFrame.cache": [[869, null]], "polars.LazyFrame.cast": [[870, null]], "polars.LazyFrame.clear": [[871, null]], "polars.LazyFrame.clone": [[872, null]], "polars.LazyFrame.collect": [[873, null]], "polars.LazyFrame.collect_async": [[874, null]], "polars.LazyFrame.collect_schema": [[875, null]], "polars.LazyFrame.columns": [[876, null]], "polars.LazyFrame.count": [[877, null]], "polars.LazyFrame.describe": [[878, null]], "polars.LazyFrame.deserialize": [[879, null]], "polars.LazyFrame.drop": [[880, null]], "polars.LazyFrame.drop_nans": [[881, null]], "polars.LazyFrame.drop_nulls": [[882, null]], "polars.LazyFrame.dtypes": [[883, null]], "polars.LazyFrame.explain": [[884, null]], "polars.LazyFrame.explode": [[885, null]], "polars.LazyFrame.fill_nan": [[886, null]], "polars.LazyFrame.fill_null": [[887, null]], "polars.LazyFrame.filter": [[888, null]], "polars.LazyFrame.first": [[889, null]], "polars.LazyFrame.gather_every": [[890, null]], "polars.LazyFrame.group_by": [[891, null]], "polars.LazyFrame.group_by_dynamic": [[892, null]], "polars.LazyFrame.head": [[893, null]], "polars.LazyFrame.inspect": [[894, null]], "polars.LazyFrame.interpolate": [[895, null]], "polars.LazyFrame.join": [[896, null]], "polars.LazyFrame.join_asof": [[897, null]], "polars.LazyFrame.join_where": [[898, null]], "polars.LazyFrame.last": [[899, null]], "polars.LazyFrame.lazy": [[900, null]], "polars.LazyFrame.limit": [[901, null]], "polars.LazyFrame.map_batches": [[902, null]], "polars.LazyFrame.match_to_schema": [[903, null]], "polars.LazyFrame.max": [[904, null]], "polars.LazyFrame.mean": [[905, null]], "polars.LazyFrame.median": [[906, null]], "polars.LazyFrame.melt": [[907, null]], "polars.LazyFrame.merge_sorted": [[908, null]], "polars.LazyFrame.min": [[909, null]], "polars.LazyFrame.null_count": [[910, null]], "polars.LazyFrame.pipe": [[911, null]], "polars.LazyFrame.profile": [[912, null]], "polars.LazyFrame.quantile": [[913, null]], "polars.LazyFrame.remote": [[914, null]], "polars.LazyFrame.remove": [[915, null]], "polars.LazyFrame.rename": [[916, null]], "polars.LazyFrame.reverse": [[917, null]], "polars.LazyFrame.rolling": [[918, null]], "polars.LazyFrame.schema": [[919, null]], "polars.LazyFrame.select": [[920, null]], "polars.LazyFrame.select_seq": [[921, null]], "polars.LazyFrame.serialize": [[922, null]], "polars.LazyFrame.set_sorted": [[923, null]], "polars.LazyFrame.shift": [[924, null]], "polars.LazyFrame.show_graph": [[925, null]], "polars.LazyFrame.sink_csv": [[49, null]], "polars.LazyFrame.sink_ipc": [[50, null]], "polars.LazyFrame.sink_ndjson": [[51, null]], "polars.LazyFrame.sink_parquet": [[52, null]], "polars.LazyFrame.slice": [[926, null]], "polars.LazyFrame.sort": [[927, null]], "polars.LazyFrame.sql": [[928, null]], "polars.LazyFrame.std": [[929, null]], "polars.LazyFrame.sum": [[930, null]], "polars.LazyFrame.tail": [[931, null]], "polars.LazyFrame.top_k": [[932, null]], "polars.LazyFrame.unique": [[933, null]], "polars.LazyFrame.unnest": [[934, null]], "polars.LazyFrame.unpivot": [[935, null]], "polars.LazyFrame.update": [[936, null]], "polars.LazyFrame.var": [[937, null]], "polars.LazyFrame.width": [[938, null]], "polars.LazyFrame.with_columns": [[939, null]], "polars.LazyFrame.with_columns_seq": [[940, null]], "polars.LazyFrame.with_context": [[941, null]], "polars.LazyFrame.with_row_count": [[942, null]], "polars.LazyFrame.with_row_index": [[943, null]], "polars.PartitionByKey": [[53, null]], "polars.PartitionMaxSize": [[54, null]], "polars.PartitionParted": [[55, null]], "polars.QueryOptFlags": [[944, null]], "polars.SQLContext.execute": [[1382, null]], "polars.SQLContext.execute_global": [[1383, null]], "polars.SQLContext.register": [[1384, null]], "polars.SQLContext.register_globals": [[1385, null]], "polars.SQLContext.register_many": [[1386, null]], "polars.SQLContext.tables": [[1387, null]], "polars.SQLContext.unregister": [[1388, null]], "polars.ScanCastOptions": [[56, null]], "polars.Series.__array__": [[978, null]], "polars.Series.__arrow_c_stream__": [[979, null]], "polars.Series.__getitem__": [[980, null]], "polars.Series.abs": [[981, null]], "polars.Series.alias": [[982, null]], "polars.Series.all": [[983, null]], "polars.Series.any": [[984, null]], "polars.Series.append": [[985, null]], "polars.Series.approx_n_unique": [[986, null]], "polars.Series.arccos": [[987, null]], "polars.Series.arccosh": [[988, null]], "polars.Series.arcsin": [[989, null]], "polars.Series.arcsinh": [[990, null]], "polars.Series.arctan": [[991, null]], "polars.Series.arctanh": [[992, null]], "polars.Series.arg_max": [[993, null]], "polars.Series.arg_min": [[994, null]], "polars.Series.arg_sort": [[995, null]], "polars.Series.arg_true": [[996, null]], "polars.Series.arg_unique": [[997, null]], "polars.Series.arr.all": [[998, null]], "polars.Series.arr.any": [[999, null]], "polars.Series.arr.arg_max": [[1000, null]], "polars.Series.arr.arg_min": [[1001, null]], "polars.Series.arr.contains": [[1002, null]], "polars.Series.arr.count_matches": [[1003, null]], "polars.Series.arr.explode": [[1004, null]], "polars.Series.arr.first": [[1005, null]], "polars.Series.arr.get": [[1006, null]], "polars.Series.arr.join": [[1007, null]], "polars.Series.arr.last": [[1008, null]], "polars.Series.arr.max": [[1009, null]], "polars.Series.arr.median": [[1010, null]], "polars.Series.arr.min": [[1011, null]], "polars.Series.arr.n_unique": [[1012, null]], "polars.Series.arr.reverse": [[1013, null]], "polars.Series.arr.shift": [[1014, null]], "polars.Series.arr.sort": [[1015, null]], "polars.Series.arr.std": [[1016, null]], "polars.Series.arr.sum": [[1017, null]], "polars.Series.arr.to_list": [[1018, null]], "polars.Series.arr.to_struct": [[1019, null]], "polars.Series.arr.unique": [[1020, null]], "polars.Series.arr.var": [[1021, null]], "polars.Series.backward_fill": [[1022, null]], "polars.Series.bin.contains": [[1023, null]], "polars.Series.bin.decode": [[1024, null]], "polars.Series.bin.encode": [[1025, null]], "polars.Series.bin.ends_with": [[1026, null]], "polars.Series.bin.reinterpret": [[1027, null]], "polars.Series.bin.size": [[1028, null]], "polars.Series.bin.starts_with": [[1029, null]], "polars.Series.bitwise_and": [[1030, null]], "polars.Series.bitwise_count_ones": [[1031, null]], "polars.Series.bitwise_count_zeros": [[1032, null]], "polars.Series.bitwise_leading_ones": [[1033, null]], "polars.Series.bitwise_leading_zeros": [[1034, null]], "polars.Series.bitwise_or": [[1035, null]], "polars.Series.bitwise_trailing_ones": [[1036, null]], "polars.Series.bitwise_trailing_zeros": [[1037, null]], "polars.Series.bitwise_xor": [[1038, null]], "polars.Series.bottom_k": [[1039, null]], "polars.Series.bottom_k_by": [[1040, null]], "polars.Series.cast": [[1041, null]], "polars.Series.cat.ends_with": [[1042, null]], "polars.Series.cat.get_categories": [[1043, null]], "polars.Series.cat.is_local": [[1044, null]], "polars.Series.cat.len_bytes": [[1045, null]], "polars.Series.cat.len_chars": [[1046, null]], "polars.Series.cat.starts_with": [[1047, null]], "polars.Series.cat.to_local": [[1048, null]], "polars.Series.cat.uses_lexical_ordering": [[1049, null]], "polars.Series.cbrt": [[1050, null]], "polars.Series.ceil": [[1051, null]], "polars.Series.chunk_lengths": [[1052, null]], "polars.Series.clear": [[1053, null]], "polars.Series.clip": [[1054, null]], "polars.Series.clone": [[1055, null]], "polars.Series.cos": [[1056, null]], "polars.Series.cosh": [[1057, null]], "polars.Series.cot": [[1058, null]], "polars.Series.count": [[1059, null]], "polars.Series.cum_count": [[1060, null]], "polars.Series.cum_max": [[1061, null]], "polars.Series.cum_min": [[1062, null]], "polars.Series.cum_prod": [[1063, null]], "polars.Series.cum_sum": [[1064, null]], "polars.Series.cumulative_eval": [[1065, null]], "polars.Series.cut": [[1066, null]], "polars.Series.describe": [[1067, null]], "polars.Series.diff": [[1068, null]], "polars.Series.dot": [[1069, null]], "polars.Series.drop_nans": [[1070, null]], "polars.Series.drop_nulls": [[1071, null]], "polars.Series.dt.add_business_days": [[1072, null]], "polars.Series.dt.base_utc_offset": [[1073, null]], "polars.Series.dt.cast_time_unit": [[1074, null]], "polars.Series.dt.century": [[1075, null]], "polars.Series.dt.combine": [[1076, null]], "polars.Series.dt.convert_time_zone": [[1077, null]], "polars.Series.dt.date": [[1078, null]], "polars.Series.dt.datetime": [[1079, null]], "polars.Series.dt.day": [[1080, null]], "polars.Series.dt.dst_offset": [[1081, null]], "polars.Series.dt.epoch": [[1082, null]], "polars.Series.dt.hour": [[1083, null]], "polars.Series.dt.is_business_day": [[1084, null]], "polars.Series.dt.is_leap_year": [[1085, null]], "polars.Series.dt.iso_year": [[1086, null]], "polars.Series.dt.max": [[1087, null]], "polars.Series.dt.mean": [[1088, null]], "polars.Series.dt.median": [[1089, null]], "polars.Series.dt.microsecond": [[1090, null]], "polars.Series.dt.millennium": [[1091, null]], "polars.Series.dt.millisecond": [[1092, null]], "polars.Series.dt.min": [[1093, null]], "polars.Series.dt.minute": [[1094, null]], "polars.Series.dt.month": [[1095, null]], "polars.Series.dt.month_end": [[1096, null]], "polars.Series.dt.month_start": [[1097, null]], "polars.Series.dt.nanosecond": [[1098, null]], "polars.Series.dt.offset_by": [[1099, null]], "polars.Series.dt.ordinal_day": [[1100, null]], "polars.Series.dt.quarter": [[1101, null]], "polars.Series.dt.replace": [[1102, null]], "polars.Series.dt.replace_time_zone": [[1103, null]], "polars.Series.dt.round": [[1104, null]], "polars.Series.dt.second": [[1105, null]], "polars.Series.dt.strftime": [[1106, null]], "polars.Series.dt.time": [[1107, null]], "polars.Series.dt.timestamp": [[1108, null]], "polars.Series.dt.to_string": [[1109, null]], "polars.Series.dt.total_days": [[1110, null]], "polars.Series.dt.total_hours": [[1111, null]], "polars.Series.dt.total_microseconds": [[1112, null]], "polars.Series.dt.total_milliseconds": [[1113, null]], "polars.Series.dt.total_minutes": [[1114, null]], "polars.Series.dt.total_nanoseconds": [[1115, null]], "polars.Series.dt.total_seconds": [[1116, null]], "polars.Series.dt.truncate": [[1117, null]], "polars.Series.dt.week": [[1118, null]], "polars.Series.dt.weekday": [[1119, null]], "polars.Series.dt.with_time_unit": [[1120, null]], "polars.Series.dt.year": [[1121, null]], "polars.Series.dtype": [[1122, null]], "polars.Series.entropy": [[1123, null]], "polars.Series.eq": [[1124, null]], "polars.Series.eq_missing": [[1125, null]], "polars.Series.equals": [[1126, null]], "polars.Series.estimated_size": [[1127, null]], "polars.Series.ewm_mean": [[1128, null]], "polars.Series.ewm_mean_by": [[1129, null]], "polars.Series.ewm_std": [[1130, null]], "polars.Series.ewm_var": [[1131, null]], "polars.Series.exp": [[1132, null]], "polars.Series.explode": [[1133, null]], "polars.Series.extend": [[1134, null]], "polars.Series.extend_constant": [[1135, null]], "polars.Series.fill_nan": [[1136, null]], "polars.Series.fill_null": [[1137, null]], "polars.Series.filter": [[1138, null]], "polars.Series.first": [[1139, null]], "polars.Series.flags": [[1140, null]], "polars.Series.floor": [[1141, null]], "polars.Series.forward_fill": [[1142, null]], "polars.Series.gather": [[1143, null]], "polars.Series.gather_every": [[1144, null]], "polars.Series.ge": [[1145, null]], "polars.Series.get_chunks": [[1146, null]], "polars.Series.gt": [[1147, null]], "polars.Series.has_nulls": [[1148, null]], "polars.Series.has_validity": [[1149, null]], "polars.Series.hash": [[1150, null]], "polars.Series.head": [[1151, null]], "polars.Series.hist": [[1152, null]], "polars.Series.implode": [[1153, null]], "polars.Series.index_of": [[1154, null]], "polars.Series.interpolate": [[1155, null]], "polars.Series.interpolate_by": [[1156, null]], "polars.Series.is_between": [[1157, null]], "polars.Series.is_close": [[1158, null]], "polars.Series.is_duplicated": [[1159, null]], "polars.Series.is_empty": [[1160, null]], "polars.Series.is_finite": [[1161, null]], "polars.Series.is_first_distinct": [[1162, null]], "polars.Series.is_in": [[1163, null]], "polars.Series.is_infinite": [[1164, null]], "polars.Series.is_last_distinct": [[1165, null]], "polars.Series.is_nan": [[1166, null]], "polars.Series.is_not_nan": [[1167, null]], "polars.Series.is_not_null": [[1168, null]], "polars.Series.is_null": [[1169, null]], "polars.Series.is_sorted": [[1170, null]], "polars.Series.is_unique": [[1171, null]], "polars.Series.item": [[1172, null]], "polars.Series.kurtosis": [[1173, null]], "polars.Series.last": [[1174, null]], "polars.Series.le": [[1175, null]], "polars.Series.len": [[1176, null]], "polars.Series.limit": [[1177, null]], "polars.Series.list.all": [[1178, null]], "polars.Series.list.any": [[1179, null]], "polars.Series.list.arg_max": [[1180, null]], "polars.Series.list.arg_min": [[1181, null]], "polars.Series.list.concat": [[1182, null]], "polars.Series.list.contains": [[1183, null]], "polars.Series.list.count_matches": [[1184, null]], "polars.Series.list.diff": [[1185, null]], "polars.Series.list.drop_nulls": [[1186, null]], "polars.Series.list.eval": [[1187, null]], "polars.Series.list.explode": [[1188, null]], "polars.Series.list.first": [[1189, null]], "polars.Series.list.gather": [[1190, null]], "polars.Series.list.gather_every": [[1191, null]], "polars.Series.list.get": [[1192, null]], "polars.Series.list.head": [[1193, null]], "polars.Series.list.join": [[1194, null]], "polars.Series.list.last": [[1195, null]], "polars.Series.list.len": [[1196, null]], "polars.Series.list.max": [[1197, null]], "polars.Series.list.mean": [[1198, null]], "polars.Series.list.median": [[1199, null]], "polars.Series.list.min": [[1200, null]], "polars.Series.list.n_unique": [[1201, null]], "polars.Series.list.reverse": [[1202, null]], "polars.Series.list.sample": [[1203, null]], "polars.Series.list.set_difference": [[1204, null]], "polars.Series.list.set_intersection": [[1205, null]], "polars.Series.list.set_symmetric_difference": [[1206, null]], "polars.Series.list.set_union": [[1207, null]], "polars.Series.list.shift": [[1208, null]], "polars.Series.list.slice": [[1209, null]], "polars.Series.list.sort": [[1210, null]], "polars.Series.list.std": [[1211, null]], "polars.Series.list.sum": [[1212, null]], "polars.Series.list.tail": [[1213, null]], "polars.Series.list.to_array": [[1214, null]], "polars.Series.list.to_struct": [[1215, null]], "polars.Series.list.unique": [[1216, null]], "polars.Series.list.var": [[1217, null]], "polars.Series.log": [[1218, null]], "polars.Series.log10": [[1219, null]], "polars.Series.log1p": [[1220, null]], "polars.Series.lower_bound": [[1221, null]], "polars.Series.lt": [[1222, null]], "polars.Series.map_elements": [[1223, null]], "polars.Series.max": [[1224, null]], "polars.Series.mean": [[1225, null]], "polars.Series.median": [[1226, null]], "polars.Series.min": [[1227, null]], "polars.Series.mode": [[1228, null]], "polars.Series.n_chunks": [[1229, null]], "polars.Series.n_unique": [[1230, null]], "polars.Series.name": [[1231, null]], "polars.Series.nan_max": [[1232, null]], "polars.Series.nan_min": [[1233, null]], "polars.Series.ne": [[1234, null]], "polars.Series.ne_missing": [[1235, null]], "polars.Series.new_from_index": [[1236, null]], "polars.Series.not_": [[1237, null]], "polars.Series.null_count": [[1238, null]], "polars.Series.pct_change": [[1239, null]], "polars.Series.peak_max": [[1240, null]], "polars.Series.peak_min": [[1241, null]], "polars.Series.pow": [[1242, null]], "polars.Series.product": [[1243, null]], "polars.Series.qcut": [[1244, null]], "polars.Series.quantile": [[1245, null]], "polars.Series.rank": [[1246, null]], "polars.Series.rechunk": [[1247, null]], "polars.Series.reinterpret": [[1248, null]], "polars.Series.rename": [[1249, null]], "polars.Series.repeat_by": [[1250, null]], "polars.Series.replace": [[1251, null]], "polars.Series.replace_strict": [[1252, null]], "polars.Series.reshape": [[1253, null]], "polars.Series.reverse": [[1254, null]], "polars.Series.rle": [[1255, null]], "polars.Series.rle_id": [[1256, null]], "polars.Series.rolling_kurtosis": [[1257, null]], "polars.Series.rolling_map": [[1258, null]], "polars.Series.rolling_max": [[1259, null]], "polars.Series.rolling_mean": [[1260, null]], "polars.Series.rolling_median": [[1261, null]], "polars.Series.rolling_min": [[1262, null]], "polars.Series.rolling_quantile": [[1263, null]], "polars.Series.rolling_skew": [[1264, null]], "polars.Series.rolling_std": [[1265, null]], "polars.Series.rolling_sum": [[1266, null]], "polars.Series.rolling_var": [[1267, null]], "polars.Series.round": [[1268, null]], "polars.Series.round_sig_figs": [[1269, null]], "polars.Series.sample": [[1270, null]], "polars.Series.scatter": [[1271, null]], "polars.Series.search_sorted": [[1272, null]], "polars.Series.set": [[1273, null]], "polars.Series.set_sorted": [[1274, null]], "polars.Series.shape": [[1275, null]], "polars.Series.shift": [[1276, null]], "polars.Series.shrink_dtype": [[1277, null]], "polars.Series.shrink_to_fit": [[1278, null]], "polars.Series.shuffle": [[1279, null]], "polars.Series.sign": [[1280, null]], "polars.Series.sin": [[1281, null]], "polars.Series.sinh": [[1282, null]], "polars.Series.skew": [[1283, null]], "polars.Series.slice": [[1284, null]], "polars.Series.sort": [[1285, null]], "polars.Series.sqrt": [[1286, null]], "polars.Series.std": [[1287, null]], "polars.Series.str.concat": [[1288, null]], "polars.Series.str.contains": [[1289, null]], "polars.Series.str.contains_any": [[1290, null]], "polars.Series.str.count_matches": [[1291, null]], "polars.Series.str.decode": [[1292, null]], "polars.Series.str.encode": [[1293, null]], "polars.Series.str.ends_with": [[1294, null]], "polars.Series.str.escape_regex": [[1295, null]], "polars.Series.str.explode": [[1296, null]], "polars.Series.str.extract": [[1297, null]], "polars.Series.str.extract_all": [[1298, null]], "polars.Series.str.extract_groups": [[1299, null]], "polars.Series.str.extract_many": [[1300, null]], "polars.Series.str.find": [[1301, null]], "polars.Series.str.find_many": [[1302, null]], "polars.Series.str.head": [[1303, null]], "polars.Series.str.join": [[1304, null]], "polars.Series.str.json_decode": [[1305, null]], "polars.Series.str.json_path_match": [[1306, null]], "polars.Series.str.len_bytes": [[1307, null]], "polars.Series.str.len_chars": [[1308, null]], "polars.Series.str.normalize": [[1309, null]], "polars.Series.str.pad_end": [[1310, null]], "polars.Series.str.pad_start": [[1311, null]], "polars.Series.str.replace": [[1312, null]], "polars.Series.str.replace_all": [[1313, null]], "polars.Series.str.replace_many": [[1314, null]], "polars.Series.str.reverse": [[1315, null]], "polars.Series.str.slice": [[1316, null]], "polars.Series.str.split": [[1317, null]], "polars.Series.str.split_exact": [[1318, null]], "polars.Series.str.splitn": [[1319, null]], "polars.Series.str.starts_with": [[1320, null]], "polars.Series.str.strip_chars": [[1321, null]], "polars.Series.str.strip_chars_end": [[1322, null]], "polars.Series.str.strip_chars_start": [[1323, null]], "polars.Series.str.strip_prefix": [[1324, null]], "polars.Series.str.strip_suffix": [[1325, null]], "polars.Series.str.strptime": [[1326, null]], "polars.Series.str.tail": [[1327, null]], "polars.Series.str.to_date": [[1328, null]], "polars.Series.str.to_datetime": [[1329, null]], "polars.Series.str.to_decimal": [[1330, null]], "polars.Series.str.to_integer": [[1331, null]], "polars.Series.str.to_lowercase": [[1332, null]], "polars.Series.str.to_time": [[1333, null]], "polars.Series.str.to_titlecase": [[1334, null]], "polars.Series.str.to_uppercase": [[1335, null]], "polars.Series.str.zfill": [[1336, null]], "polars.Series.struct.field": [[1337, null]], "polars.Series.struct.fields": [[1338, null]], "polars.Series.struct.json_encode": [[1339, null]], "polars.Series.struct.rename_fields": [[1340, null]], "polars.Series.struct.schema": [[1341, null]], "polars.Series.struct.unnest": [[1342, null]], "polars.Series.sum": [[1343, null]], "polars.Series.tail": [[1344, null]], "polars.Series.tan": [[1345, null]], "polars.Series.tanh": [[1346, null]], "polars.Series.to_arrow": [[1347, null]], "polars.Series.to_dummies": [[1348, null]], "polars.Series.to_frame": [[1349, null]], "polars.Series.to_init_repr": [[1350, null]], "polars.Series.to_jax": [[1351, null]], "polars.Series.to_list": [[1352, null]], "polars.Series.to_numpy": [[1353, null]], "polars.Series.to_pandas": [[1354, null]], "polars.Series.to_physical": [[1355, null]], "polars.Series.to_torch": [[1356, null]], "polars.Series.top_k": [[1357, null]], "polars.Series.top_k_by": [[1358, null]], "polars.Series.unique": [[1359, null]], "polars.Series.unique_counts": [[1360, null]], "polars.Series.upper_bound": [[1361, null]], "polars.Series.value_counts": [[1362, null]], "polars.Series.var": [[1363, null]], "polars.Series.zip_with": [[1364, null]], "polars.StringCache": [[57, null]], "polars.align_frames": [[58, null]], "polars.all": [[766, null]], "polars.all_horizontal": [[767, null]], "polars.any": [[768, null]], "polars.any_horizontal": [[769, null]], "polars.api.register_dataframe_namespace": [[59, null]], "polars.api.register_expr_namespace": [[60, null]], "polars.api.register_lazyframe_namespace": [[61, null]], "polars.api.register_series_namespace": [[62, null]], "polars.approx_n_unique": [[770, null]], "polars.arange": [[771, null]], "polars.arctan2": [[772, null]], "polars.arctan2d": [[773, null]], "polars.arg_sort_by": [[774, null]], "polars.arg_where": [[775, null]], "polars.build_info": [[63, null]], "polars.business_day_count": [[776, null]], "polars.catalog.unity.CatalogInfo": [[198, null]], "polars.catalog.unity.ColumnInfo": [[199, null]], "polars.catalog.unity.DataSourceFormat": [[200, null]], "polars.catalog.unity.NamespaceInfo": [[201, null]], "polars.catalog.unity.TableInfo": [[202, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[203, null]], "polars.catalog.unity.TableType": [[204, null]], "polars.coalesce": [[777, null]], "polars.col": [[847, null]], "polars.collect_all": [[64, null]], "polars.collect_all_async": [[65, null]], "polars.concat": [[66, null]], "polars.concat_arr": [[778, null]], "polars.concat_list": [[779, null]], "polars.concat_str": [[780, null]], "polars.corr": [[781, null]], "polars.count": [[782, null]], "polars.cov": [[783, null]], "polars.cum_count": [[784, null]], "polars.cum_fold": [[785, null]], "polars.cum_reduce": [[786, null]], "polars.cum_sum": [[787, null]], "polars.cum_sum_horizontal": [[788, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[334, null]], "polars.dataframe.group_by.GroupBy.agg": [[335, null]], "polars.dataframe.group_by.GroupBy.all": [[336, null]], "polars.dataframe.group_by.GroupBy.count": [[337, null]], "polars.dataframe.group_by.GroupBy.first": [[338, null]], "polars.dataframe.group_by.GroupBy.head": [[339, null]], "polars.dataframe.group_by.GroupBy.last": [[340, null]], "polars.dataframe.group_by.GroupBy.len": [[341, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[342, null]], "polars.dataframe.group_by.GroupBy.max": [[343, null]], "polars.dataframe.group_by.GroupBy.mean": [[344, null]], "polars.dataframe.group_by.GroupBy.median": [[345, null]], "polars.dataframe.group_by.GroupBy.min": [[346, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[347, null]], "polars.dataframe.group_by.GroupBy.quantile": [[348, null]], "polars.dataframe.group_by.GroupBy.sum": [[349, null]], "polars.dataframe.group_by.GroupBy.tail": [[350, null]], "polars.datatypes.Array": [[67, null]], "polars.datatypes.Binary": [[68, null]], "polars.datatypes.Boolean": [[69, null]], "polars.datatypes.Categorical": [[70, null]], "polars.datatypes.DataType": [[71, null]], "polars.datatypes.Date": [[72, null]], "polars.datatypes.Datetime": [[73, null]], "polars.datatypes.Decimal": [[74, null]], "polars.datatypes.Duration": [[75, null]], "polars.datatypes.Enum": [[76, null]], "polars.datatypes.Field": [[77, null]], "polars.datatypes.Float32": [[78, null]], "polars.datatypes.Float64": [[79, null]], "polars.datatypes.Int128": [[80, null]], "polars.datatypes.Int16": [[81, null]], "polars.datatypes.Int32": [[82, null]], "polars.datatypes.Int64": [[83, null]], "polars.datatypes.Int8": [[84, null]], "polars.datatypes.List": [[85, null]], "polars.datatypes.Null": [[86, null]], "polars.datatypes.Object": [[87, null]], "polars.datatypes.String": [[88, null]], "polars.datatypes.Struct": [[89, null]], "polars.datatypes.Time": [[90, null]], "polars.datatypes.UInt16": [[91, null]], "polars.datatypes.UInt32": [[92, null]], "polars.datatypes.UInt64": [[93, null]], "polars.datatypes.UInt8": [[94, null]], "polars.datatypes.Unknown": [[95, null]], "polars.datatypes.Utf8": [[96, null]], "polars.date": [[789, null]], "polars.date_range": [[790, null]], "polars.date_ranges": [[791, null]], "polars.datetime": [[792, null]], "polars.datetime_range": [[793, null]], "polars.datetime_ranges": [[794, null]], "polars.defer": [[97, null]], "polars.disable_string_cache": [[98, null]], "polars.dtype_of": [[99, null]], "polars.duration": [[795, null]], "polars.element": [[796, null]], "polars.enable_string_cache": [[100, null]], "polars.escape_regex": [[101, null]], "polars.exceptions.CategoricalRemappingWarning": [[102, null]], "polars.exceptions.ChronoFormatWarning": [[103, null]], "polars.exceptions.ColumnNotFoundError": [[104, null]], "polars.exceptions.ComputeError": [[105, null]], "polars.exceptions.CustomUFuncWarning": [[106, null]], "polars.exceptions.DataOrientationWarning": [[107, null]], "polars.exceptions.DuplicateError": [[108, null]], "polars.exceptions.InvalidOperationError": [[109, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[110, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[111, null]], "polars.exceptions.NoDataError": [[112, null]], "polars.exceptions.NoRowsReturnedError": [[113, null]], "polars.exceptions.OutOfBoundsError": [[114, null]], "polars.exceptions.PanicException": [[115, null]], "polars.exceptions.ParameterCollisionError": [[116, null]], "polars.exceptions.PerformanceWarning": [[117, null]], "polars.exceptions.PolarsError": [[118, null]], "polars.exceptions.PolarsInefficientMapWarning": [[119, null]], "polars.exceptions.PolarsWarning": [[120, null]], "polars.exceptions.RowsError": [[121, null]], "polars.exceptions.SQLInterfaceError": [[122, null]], "polars.exceptions.SQLSyntaxError": [[123, null]], "polars.exceptions.SchemaError": [[124, null]], "polars.exceptions.SchemaFieldNotFoundError": [[125, null]], "polars.exceptions.ShapeError": [[126, null]], "polars.exceptions.StringCacheMismatchError": [[127, null]], "polars.exceptions.StructFieldNotFoundError": [[128, null]], "polars.exceptions.TooManyRowsReturnedError": [[129, null]], "polars.exceptions.UnstableWarning": [[130, null]], "polars.exceptions.UnsuitableSQLError": [[131, null]], "polars.exclude": [[797, null]], "polars.explain_all": [[132, null]], "polars.first": [[798, null]], "polars.fold": [[799, null]], "polars.format": [[800, null]], "polars.from_arrow": [[133, null]], "polars.from_dataframe": [[134, null]], "polars.from_dict": [[135, null]], "polars.from_dicts": [[136, null]], "polars.from_epoch": [[801, null]], "polars.from_numpy": [[137, null]], "polars.from_pandas": [[138, null]], "polars.from_records": [[139, null]], "polars.from_repr": [[140, null]], "polars.get_index_type": [[141, null]], "polars.groups": [[802, null]], "polars.head": [[803, null]], "polars.implode": [[804, null]], "polars.int_range": [[805, null]], "polars.int_ranges": [[806, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[142, null]], "polars.io.parquet.ParquetFieldOverwrites": [[143, null]], "polars.io.partition.BasePartitionContext": [[144, null]], "polars.io.partition.KeyedPartition": [[145, null]], "polars.io.partition.KeyedPartitionContext": [[146, null]], "polars.io.plugins.register_io_source": [[147, null]], "polars.json_normalize": [[148, null]], "polars.last": [[807, null]], "polars.lazyframe.engine_config.GPUEngine": [[945, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[946, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[947, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[948, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[949, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[950, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[951, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[952, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[953, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[954, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[955, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[956, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[957, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[958, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[959, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[960, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[961, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[962, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[963, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[964, null]], "polars.len": [[808, null]], "polars.linear_space": [[809, null]], "polars.linear_spaces": [[810, null]], "polars.lit": [[811, null]], "polars.map_batches": [[812, null]], "polars.map_groups": [[813, null]], "polars.max": [[814, null]], "polars.max_horizontal": [[815, null]], "polars.mean": [[816, null]], "polars.mean_horizontal": [[817, null]], "polars.median": [[818, null]], "polars.min": [[819, null]], "polars.min_horizontal": [[820, null]], "polars.n_unique": [[821, null]], "polars.nth": [[822, null]], "polars.ones": [[823, null]], "polars.plugins.register_plugin_function": [[149, null]], "polars.quantile": [[824, null]], "polars.read_avro": [[150, null]], "polars.read_clipboard": [[151, null]], "polars.read_csv": [[152, null]], "polars.read_csv_batched": [[153, null]], "polars.read_database": [[154, null]], "polars.read_database_uri": [[155, null]], "polars.read_delta": [[156, null]], "polars.read_excel": [[157, null]], "polars.read_ipc": [[158, null]], "polars.read_ipc_schema": [[159, null]], "polars.read_ipc_stream": [[160, null]], "polars.read_json": [[161, null]], "polars.read_ndjson": [[162, null]], "polars.read_ods": [[163, null]], "polars.read_parquet": [[164, null]], "polars.read_parquet_metadata": [[165, null]], "polars.read_parquet_schema": [[166, null]], "polars.reduce": [[825, null]], "polars.repeat": [[826, null]], "polars.rolling_corr": [[827, null]], "polars.rolling_cov": [[828, null]], "polars.scan_csv": [[167, null]], "polars.scan_delta": [[168, null]], "polars.scan_iceberg": [[169, null]], "polars.scan_ipc": [[170, null]], "polars.scan_ndjson": [[171, null]], "polars.scan_parquet": [[172, null]], "polars.scan_pyarrow_dataset": [[173, null]], "polars.select": [[829, null]], "polars.set_random_seed": [[174, null]], "polars.show_versions": [[175, null]], "polars.sql": [[830, null]], "polars.sql_expr": [[831, null]], "polars.std": [[832, null]], "polars.struct": [[833, null]], "polars.sum": [[834, null]], "polars.sum_horizontal": [[835, null]], "polars.tail": [[836, null]], "polars.testing.assert_frame_equal": [[176, null]], "polars.testing.assert_frame_not_equal": [[177, null]], "polars.testing.assert_series_equal": [[178, null]], "polars.testing.assert_series_not_equal": [[179, null]], "polars.testing.parametric.column": [[180, null]], "polars.testing.parametric.columns": [[181, null]], "polars.testing.parametric.create_list_strategy": [[182, null]], "polars.testing.parametric.dataframes": [[183, null]], "polars.testing.parametric.dtypes": [[184, null]], "polars.testing.parametric.lists": [[185, null]], "polars.testing.parametric.load_profile": [[186, null]], "polars.testing.parametric.series": [[187, null]], "polars.testing.parametric.set_profile": [[188, null]], "polars.thread_pool_size": [[189, null]], "polars.threadpool_size": [[190, null]], "polars.time": [[837, null]], "polars.time_range": [[838, null]], "polars.time_ranges": [[839, null]], "polars.using_string_cache": [[191, null]], "polars.var": [[840, null]], "polars.when": [[841, null]], "polars.zeros": [[842, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType.to_dtype_expr", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.ScanCastOptions", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.dtype_of", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.parquet.ParquetFieldOverwrites", "reference/api/polars.io.partition.BasePartitionContext", "reference/api/polars.io.partition.KeyedPartition", "reference/api/polars.io.partition.KeyedPartitionContext", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_metadata", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.__setitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.match_to_schema", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatype_expr", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_business_day", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_close", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_kurtosis", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.__getitem__", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.match_to_schema", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.QueryOptFlags", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.backward_fill", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.bottom_k_by", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_business_day", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.forward_fill", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_close", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.repeat_by", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_kurtosis", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.top_k_by", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.to_dtype_expr.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.ScanCastOptions.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.dtype_of.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.parquet.ParquetFieldOverwrites.rst", "reference/api/polars.io.partition.BasePartitionContext.rst", "reference/api/polars.io.partition.KeyedPartition.rst", "reference/api/polars.io.partition.KeyedPartitionContext.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_metadata.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.__setitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.match_to_schema.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatype_expr.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_business_day.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_close.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_kurtosis.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.__getitem__.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.match_to_schema.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.QueryOptFlags.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.backward_fill.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.bottom_k_by.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_business_day.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.forward_fill.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_close.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.repeat_by.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_kurtosis.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.top_k_by.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[209, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[978, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[210, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[979, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[211, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1401, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1401, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[212, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.lazyframe method)": [[866, "polars.LazyFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[980, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[192, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[198, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[199, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[201, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[202, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[32, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[33, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[34, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[35, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[67, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[68, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[69, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[70, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[71, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[72, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[73, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[74, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[75, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[76, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[77, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[78, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[79, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[80, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[81, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[82, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[83, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[84, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[85, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[86, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[87, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[88, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[89, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[90, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[91, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[92, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[93, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[94, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[95, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.io.parquet.parquetfieldoverwrites method)": [[143, "polars.io.parquet.ParquetFieldOverwrites.__init__", false]], "__init__() (polars.io.partition.basepartitioncontext method)": [[144, "polars.io.partition.BasePartitionContext.__init__", false]], "__init__() (polars.io.partition.keyedpartition method)": [[145, "polars.io.partition.KeyedPartition.__init__", false]], "__init__() (polars.io.partition.keyedpartitioncontext method)": [[146, "polars.io.partition.KeyedPartitionContext.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[945, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[53, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[54, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[55, "polars.PartitionParted.__init__", false]], "__init__() (polars.queryoptflags method)": [[944, "polars.QueryOptFlags.__init__", false]], "__init__() (polars.scancastoptions method)": [[56, "polars.ScanCastOptions.__init__", false]], "__init__() (polars.sqlcontext method)": [[1401, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[57, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[180, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[334, "polars.dataframe.group_by.GroupBy.__iter__", false]], "__setitem__() (polars.dataframe method)": [[213, "polars.DataFrame.__setitem__", false]], "abs() (polars.expr method)": [[365, "polars.Expr.abs", false]], "abs() (polars.series method)": [[981, "polars.Series.abs", false]], "add() (polars.expr method)": [[366, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[454, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1072, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[946, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[367, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[368, "polars.Expr.alias", false]], "alias() (polars.series method)": [[982, "polars.Series.alias", false]], "align_frames() (in module polars)": [[58, "polars.align_frames", false]], "all() (in module polars)": [[766, "polars.all", false]], "all() (in module polars.selectors)": [[976, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[369, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[385, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[552, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[947, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[983, "polars.Series.all", false]], "all() (polars.series.arr method)": [[998, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1178, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[767, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[976, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[976, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[370, "polars.Expr.and_", false]], "any() (in module polars)": [[768, "polars.any", false]], "any() (polars.expr method)": [[371, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[386, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[553, "polars.Expr.list.any", false]], "any() (polars.series method)": [[984, "polars.Series.any", false]], "any() (polars.series.arr method)": [[999, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1179, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[769, "polars.any_horizontal", false]], "append() (polars.expr method)": [[372, "polars.Expr.append", false]], "append() (polars.series method)": [[985, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[770, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[214, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[373, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[867, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[986, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[771, "polars.arange", false]], "arccos() (polars.expr method)": [[374, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[987, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[375, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[988, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[376, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[989, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[377, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[990, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[378, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[991, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[772, "polars.arctan2", false]], "arctan2d() (in module polars)": [[773, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[379, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[992, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[380, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[387, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[554, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[993, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[1000, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1180, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[381, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[388, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[555, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[994, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[1001, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1181, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[382, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[995, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[774, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[383, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[996, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[384, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[997, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[775, "polars.arg_where", false]], "array (class in polars.datatypes)": [[67, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[176, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[177, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[178, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[179, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[409, "polars.Expr.backward_fill", false]], "backward_fill() (polars.series method)": [[1022, "polars.Series.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[455, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1073, "polars.Series.dt.base_utc_offset", false]], "basepartitioncontext (class in polars.io.partition)": [[144, "polars.io.partition.BasePartitionContext", false]], "binary (class in polars.datatypes)": [[68, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[976, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[417, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1030, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[418, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1031, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[419, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1032, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[420, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1033, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[421, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1034, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[422, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1035, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[423, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1036, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[424, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1037, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[425, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1038, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[69, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[976, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[215, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[426, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[868, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1039, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[427, "polars.Expr.bottom_k_by", false]], "bottom_k_by() (polars.series method)": [[1040, "polars.Series.bottom_k_by", false]], "build_info() (in module polars)": [[63, "polars.build_info", false]], "business_day_count() (in module polars)": [[776, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[976, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[976, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[976, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[869, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[962, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[216, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[428, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[870, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1041, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[456, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1074, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[192, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[198, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[70, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[976, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[102, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[434, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1050, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[435, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1051, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[457, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1075, "polars.Series.dt.century", false]], "chronoformatwarning": [[103, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1052, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[217, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[871, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1053, "polars.Series.clear", false]], "clip() (polars.expr method)": [[436, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1054, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[218, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[872, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1055, "polars.Series.clone", false]], "coalesce() (in module polars)": [[777, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[873, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[64, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[65, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[874, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[219, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[875, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[180, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[199, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[104, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[220, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[876, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[181, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[458, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1076, "polars.Series.dt.combine", false]], "computeerror": [[105, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[66, "polars.concat", false]], "concat() (polars.expr.list method)": [[556, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[696, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1182, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1288, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[778, "polars.concat_arr", false]], "concat_list() (in module polars)": [[779, "polars.concat_list", false]], "concat_str() (in module polars)": [[780, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[976, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[389, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[410, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[557, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[697, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[1002, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1023, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1183, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1289, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[698, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1290, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[459, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1077, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[781, "polars.corr", false]], "corr() (polars.dataframe method)": [[221, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[437, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1056, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[438, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1057, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[439, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1058, "polars.Series.cot", false]], "count() (in module polars)": [[782, "polars.count", false]], "count() (polars.dataframe method)": [[222, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[440, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[877, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[948, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1059, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[390, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[558, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[699, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[1003, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1184, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1291, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[783, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[182, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[32, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[33, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[34, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[35, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[784, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[441, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1060, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[785, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[442, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1061, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[443, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1062, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[444, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1063, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[786, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[787, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[445, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1064, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[788, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[446, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1065, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[106, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[447, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1066, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[183, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[107, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[200, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[71, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[72, "polars.datatypes.Date", false]], "date() (in module polars)": [[789, "polars.date", false]], "date() (in module polars.selectors)": [[976, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[460, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1078, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[790, "polars.date_range", false]], "date_ranges() (in module polars)": [[791, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[73, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[792, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[976, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[461, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1079, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[793, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[794, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[462, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1080, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[74, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[976, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[411, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[700, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1024, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1292, "polars.Series.str.decode", false]], "defer() (in module polars)": [[97, "polars.defer", false]], "degrees() (polars.expr method)": [[448, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[223, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[878, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1067, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[224, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[449, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[879, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[450, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[559, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1068, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1185, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[976, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[98, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[451, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1069, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[225, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[880, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[226, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[227, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[452, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[881, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1070, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[228, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[453, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[560, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[882, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1071, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1186, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[463, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1081, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1122, "polars.Series.dtype", false]], "dtype_of() (in module polars)": [[99, "polars.dtype_of", false]], "dtypes (polars.dataframe property)": [[229, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[883, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[184, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[108, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[75, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[795, "polars.duration", false]], "duration() (in module polars.selectors)": [[976, "polars.selectors.duration", false]], "element() (in module polars)": [[796, "polars.element", false]], "enable_string_cache() (in module polars)": [[100, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[412, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[701, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1025, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1293, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[976, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[413, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[429, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[702, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1026, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1042, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1294, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[500, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1123, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[76, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[464, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1082, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[501, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[602, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1124, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[502, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1125, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[230, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1126, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[101, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[703, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1295, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[231, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1127, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[561, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1187, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[503, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1128, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[504, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1129, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[505, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1130, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[506, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1131, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[797, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[976, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[507, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1382, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1383, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[508, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1132, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[976, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[884, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[132, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[232, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[509, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[391, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[562, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[704, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[885, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1133, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[1004, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1188, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1296, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[233, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1134, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[510, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1135, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[705, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1297, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[706, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1298, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[707, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1299, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[708, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1300, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[963, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[964, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[77, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[745, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1337, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1338, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[234, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[511, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[886, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1136, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[235, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[512, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[887, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1137, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[236, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[513, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[888, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1138, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[709, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1301, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[710, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1302, "polars.Series.str.find_many", false]], "first() (in module polars)": [[798, "polars.first", false]], "first() (in module polars.selectors)": [[976, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[514, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[392, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[563, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[889, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[949, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1139, "polars.Series.first", false]], "first() (polars.series.arr method)": [[1005, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1189, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[237, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1140, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[515, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[976, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[78, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[79, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[516, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1141, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[517, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[799, "polars.fold", false]], "fold() (polars.dataframe method)": [[238, "polars.DataFrame.fold", false]], "format() (in module polars)": [[800, "polars.format", false]], "forward_fill() (polars.expr method)": [[518, "polars.Expr.forward_fill", false]], "forward_fill() (polars.series method)": [[1142, "polars.Series.forward_fill", false]], "from_arrow() (in module polars)": [[133, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[134, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[135, "polars.from_dict", false]], "from_dicts() (in module polars)": [[136, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[801, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[519, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[137, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[138, "polars.from_pandas", false]], "from_records() (in module polars)": [[139, "polars.from_records", false]], "from_repr() (in module polars)": [[140, "polars.from_repr", false]], "gather() (polars.expr method)": [[520, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[564, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1143, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1190, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[239, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[521, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[565, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[890, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1144, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1191, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[522, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1145, "polars.Series.ge", false]], "get() (polars.expr method)": [[523, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[393, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[566, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[1006, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1192, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[430, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1043, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1146, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[240, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[241, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[242, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[141, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[203, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[193, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[243, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[945, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[244, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[891, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[245, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[892, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[802, "polars.groups", false]], "gt() (polars.expr method)": [[524, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1147, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[603, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[525, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1148, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1149, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[526, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1150, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[246, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[803, "polars.head", false]], "head() (polars.dataframe method)": [[247, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[527, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[567, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[711, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[893, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[950, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1151, "polars.Series.head", false]], "head() (polars.series.list method)": [[1193, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1303, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[248, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[528, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1152, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[465, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1083, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[249, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[804, "polars.implode", false]], "implode() (polars.expr method)": [[529, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1153, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[530, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1154, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[250, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[531, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[894, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[80, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[81, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[82, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[83, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[84, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[805, "polars.int_range", false]], "int_ranges() (in module polars)": [[806, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[976, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[251, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[532, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[895, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1155, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[533, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1156, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[109, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[534, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1157, "polars.Series.is_between", false]], "is_business_day() (polars.expr.dt method)": [[466, "polars.Expr.dt.is_business_day", false]], "is_business_day() (polars.series.dt method)": [[1084, "polars.Series.dt.is_business_day", false]], "is_close() (polars.expr method)": [[535, "polars.Expr.is_close", false]], "is_close() (polars.series method)": [[1158, "polars.Series.is_close", false]], "is_column() (polars.expr.meta method)": [[604, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[605, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[252, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[536, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1159, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[253, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1160, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[537, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1161, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[538, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1162, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[539, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1163, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[540, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1164, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[541, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1165, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[467, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1085, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[606, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1044, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[542, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1166, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[543, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1167, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[544, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1168, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[545, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1169, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[607, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[976, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1170, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[254, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[546, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1171, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[468, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1086, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[255, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1172, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[256, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[257, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[258, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[259, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[394, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[568, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[712, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[896, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[1007, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1194, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1304, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[260, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[897, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[261, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[898, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[713, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1305, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[746, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1339, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[148, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[714, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1306, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[622, "polars.Expr.name.keep", false]], "keyedpartition (class in polars.io.partition)": [[145, "polars.io.partition.KeyedPartition", false]], "keyedpartitioncontext (class in polars.io.partition)": [[146, "polars.io.partition.KeyedPartitionContext", false]], "kurtosis() (polars.expr method)": [[547, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1173, "polars.Series.kurtosis", false]], "last() (in module polars)": [[807, "polars.last", false]], "last() (in module polars.selectors)": [[976, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[548, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[395, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[569, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[899, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[951, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1174, "polars.Series.last", false]], "last() (polars.series.arr method)": [[1008, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1195, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[262, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[900, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[549, "polars.Expr.le", false]], "le() (polars.series method)": [[1175, "polars.Series.le", false]], "len() (in module polars)": [[808, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[341, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[550, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[570, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[952, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1176, "polars.Series.len", false]], "len() (polars.series.list method)": [[1196, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[431, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[715, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1045, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1307, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[432, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[716, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1046, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1308, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[263, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[551, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[901, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1177, "polars.Series.limit", false]], "linear_space() (in module polars)": [[809, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[810, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[85, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[194, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[195, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[196, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[185, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[811, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[186, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[592, "polars.Expr.log", false]], "log() (polars.series method)": [[1218, "polars.Series.log", false]], "log10() (polars.expr method)": [[593, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1219, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[594, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1220, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[595, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1221, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[596, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1222, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[623, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[812, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[597, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[902, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[598, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1223, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[624, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[813, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[342, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[953, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[264, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[110, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "match_to_schema() (polars.dataframe method)": [[265, "polars.DataFrame.match_to_schema", false]], "match_to_schema() (polars.lazyframe method)": [[903, "polars.LazyFrame.match_to_schema", false]], "matches() (in module polars.selectors)": [[976, "polars.selectors.matches", false]], "max() (in module polars)": [[814, "polars.max", false]], "max() (polars.dataframe method)": [[266, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[343, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[599, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[396, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[571, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[904, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[954, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1224, "polars.Series.max", false]], "max() (polars.series.arr method)": [[1009, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1087, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1197, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[815, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[267, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[816, "polars.mean", false]], "mean() (polars.dataframe method)": [[268, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[344, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[600, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[572, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[905, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[955, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1225, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1088, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1198, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[817, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[269, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[818, "polars.median", false]], "median() (polars.dataframe method)": [[270, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[345, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[601, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[397, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[573, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[906, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[956, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1226, "polars.Series.median", false]], "median() (polars.series.arr method)": [[1010, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1089, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1199, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[271, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[907, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[272, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[908, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[469, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1090, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[470, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1091, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[471, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1092, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[819, "polars.min", false]], "min() (polars.dataframe method)": [[273, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[346, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[617, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[398, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[574, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[909, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[957, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1227, "polars.Series.min", false]], "min() (polars.series.arr method)": [[1011, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1093, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1200, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[820, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[274, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[472, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1094, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[618, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[619, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1228, "polars.Series.mode", false]], "module": [[976, "module-polars.selectors", false]], "moduleupgraderequirederror": [[111, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[473, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1095, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[474, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1096, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[475, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1097, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[620, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[275, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1229, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[821, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[276, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[347, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[621, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[399, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[575, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[958, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1230, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[1012, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1201, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1231, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[201, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[631, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1232, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[632, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1233, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[476, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1098, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[633, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[608, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1234, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[634, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1235, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[635, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1236, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[142, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[112, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[717, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1309, "polars.Series.str.normalize", false]], "norowsreturnederror": [[113, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[636, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1237, "polars.Series.not_", false]], "nth() (in module polars)": [[822, "polars.nth", false]], "null (class in polars.datatypes)": [[86, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[277, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[637, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[910, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1238, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[976, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[87, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[477, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1099, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[823, "polars.ones", false]], "or_() (polars.expr method)": [[638, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[478, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1100, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[114, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[609, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[639, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[718, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1310, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[719, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1311, "polars.Series.str.pad_start", false]], "panicexception": [[115, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[116, "polars.exceptions.ParameterCollisionError", false]], "parquetfieldoverwrites (class in polars.io.parquet)": [[143, "polars.io.parquet.ParquetFieldOverwrites", false]], "partition_by() (polars.dataframe method)": [[278, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[53, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[54, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[55, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[640, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1239, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[641, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1240, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[642, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1241, "polars.Series.peak_min", false]], "performancewarning": [[117, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[279, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[643, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[911, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[280, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[359, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1378, "polars.Series.plot", false]], "polars.selectors": [[976, "module-polars.selectors", false]], "polarserror": [[118, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[119, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[120, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[610, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[644, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1242, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[625, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[626, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[281, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[645, "polars.Expr.product", false]], "product() (polars.series method)": [[1243, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[912, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[646, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1244, "polars.Series.qcut", false]], "quantile() (in module polars)": [[824, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[282, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[348, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[647, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[913, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[959, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1245, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[479, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1101, "polars.Series.dt.quarter", false]], "queryoptflags (class in polars)": [[944, "polars.QueryOptFlags", false]], "radians() (polars.expr method)": [[648, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[649, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1246, "polars.Series.rank", false]], "read_avro() (in module polars)": [[150, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[151, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[152, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[153, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[154, "polars.read_database", false]], "read_database_uri() (in module polars)": [[155, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[156, "polars.read_delta", false]], "read_excel() (in module polars)": [[157, "polars.read_excel", false]], "read_ipc() (in module polars)": [[158, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[159, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[160, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[161, "polars.read_json", false]], "read_ndjson() (in module polars)": [[162, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[163, "polars.read_ods", false]], "read_parquet() (in module polars)": [[164, "polars.read_parquet", false]], "read_parquet_metadata() (in module polars)": [[165, "polars.read_parquet_metadata", false]], "read_parquet_schema() (in module polars)": [[166, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[283, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[650, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1247, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[825, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1384, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[59, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[60, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1385, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[147, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[61, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1386, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[149, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[62, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[651, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[414, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1248, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1027, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[914, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[284, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[915, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[285, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[916, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1249, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[747, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1340, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[826, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[652, "polars.Expr.repeat_by", false]], "repeat_by() (polars.series method)": [[1250, "polars.Series.repeat_by", false]], "replace() (polars.expr method)": [[653, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[480, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[720, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1251, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1102, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1312, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[721, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1313, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[286, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[722, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1314, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[654, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1252, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[481, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1103, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[655, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1253, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[287, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[656, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[400, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[576, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[723, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[917, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1254, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[1013, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1202, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1315, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[657, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1255, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[658, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1256, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[288, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[659, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[918, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[827, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[828, "polars.rolling_cov", false]], "rolling_kurtosis() (polars.expr method)": [[660, "polars.Expr.rolling_kurtosis", false]], "rolling_kurtosis() (polars.series method)": [[1257, "polars.Series.rolling_kurtosis", false]], "rolling_map() (polars.expr method)": [[661, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1258, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[662, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1259, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[663, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[664, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1260, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[665, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[666, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1261, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[667, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[668, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1262, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[669, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[670, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1263, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[671, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[672, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1264, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[673, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1265, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[674, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[675, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1266, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[676, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[677, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1267, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[678, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[611, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[679, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[482, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1268, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1104, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[680, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1269, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[289, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[290, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[291, "polars.DataFrame.rows_by_key", false]], "rowserror": [[121, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[292, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[681, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[577, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1270, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1203, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[167, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[168, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[169, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[170, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[171, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[172, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[173, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[197, "polars.Catalog.scan_table", false]], "scancastoptions (class in polars)": [[56, "polars.ScanCastOptions", false]], "scatter() (polars.series method)": [[1271, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[293, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[919, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1341, "polars.Series.struct.schema", false]], "schemaerror": [[124, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[125, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[682, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1272, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[483, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1105, "polars.Series.dt.second", false]], "select() (in module polars)": [[829, "polars.select", false]], "select() (polars.dataframe method)": [[294, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[920, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[295, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[921, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[296, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[612, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[922, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[187, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1273, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[578, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1204, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[10, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[579, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1205, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[188, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[174, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[297, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[683, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[923, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1274, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[580, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1206, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[581, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1207, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[298, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1275, "polars.Series.shape", false]], "shapeerror": [[126, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[299, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[684, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[401, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[582, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[924, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1276, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[1014, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1208, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[613, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[925, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[175, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[685, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1277, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[300, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1278, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[686, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1279, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[687, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1280, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[976, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[688, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1281, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[689, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1282, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[52, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[415, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1028, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[690, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1283, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[301, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[691, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[583, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[724, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[926, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1284, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1209, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1316, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[302, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[692, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[402, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[584, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[927, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1285, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[1015, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1210, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[693, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[725, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1317, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[726, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1318, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[727, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1319, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[830, "polars.sql", false]], "sql() (polars.dataframe method)": [[303, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[928, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[831, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1401, "polars.SQLContext", false]], "sqlinterfaceerror": [[122, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[123, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[694, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1286, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[976, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[416, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[433, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[728, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1029, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1047, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1320, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[31, "polars.Config.state", false]], "std() (in module polars)": [[832, "polars.std", false]], "std() (polars.dataframe method)": [[304, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[695, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[403, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[585, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[929, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1287, "polars.Series.std", false]], "std() (polars.series.arr method)": [[1016, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1211, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[484, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1106, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[88, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[976, "polars.selectors.string", false]], "stringcache (class in polars)": [[57, "polars.StringCache", false]], "stringcachemismatcherror": [[127, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[729, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1321, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[730, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1322, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[731, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1323, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[732, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1324, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[733, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1325, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[734, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1326, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[89, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[833, "polars.struct", false]], "structfieldnotfounderror": [[128, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[360, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[750, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[627, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[628, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[834, "polars.sum", false]], "sum() (polars.dataframe method)": [[305, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[349, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[751, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[404, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[586, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[930, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[960, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1343, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1017, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1212, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[835, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[306, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[202, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1387, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[204, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[836, "polars.tail", false]], "tail() (polars.dataframe method)": [[307, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[350, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[752, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[587, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[735, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[931, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[961, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1344, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1213, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1327, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[753, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1345, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[754, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1346, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[976, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[189, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[190, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[90, "polars.datatypes.Time", false]], "time() (in module polars)": [[837, "polars.time", false]], "time() (in module polars.selectors)": [[976, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[485, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1107, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[838, "polars.time_range", false]], "time_ranges() (in module polars)": [[839, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[486, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1108, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[588, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1214, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[308, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1347, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[736, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1328, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[737, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1329, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[738, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1330, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[309, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[310, "polars.DataFrame.to_dicts", false]], "to_dtype_expr() (polars.datatype method)": [[48, "polars.DataType.to_dtype_expr", false]], "to_dummies() (polars.dataframe method)": [[311, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1348, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1349, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[312, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1350, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[739, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1331, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[313, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1351, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[405, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1352, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1018, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1048, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[629, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[740, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1332, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[314, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1353, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[315, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1354, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[755, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1355, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[316, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[487, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1109, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[317, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[406, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[589, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1019, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1215, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[741, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1333, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[742, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1334, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[318, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1356, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[630, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[743, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1335, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[129, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[319, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[756, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[932, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1357, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[757, "polars.Expr.top_k_by", false]], "top_k_by() (polars.series method)": [[1358, "polars.Series.top_k_by", false]], "total_days() (polars.expr.dt method)": [[488, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1110, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[489, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1111, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[490, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1112, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[491, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1113, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[492, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1114, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[493, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1115, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[494, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1116, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[320, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[614, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[758, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[495, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1117, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[91, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[92, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[93, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[94, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[615, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[321, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[759, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[407, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[590, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[933, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1359, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1020, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1216, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[760, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1360, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[95, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[322, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[748, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[934, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1342, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[323, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[935, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1388, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[976, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[130, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[324, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[131, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[325, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[936, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[761, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1361, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[326, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1049, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[191, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[96, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[762, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1362, "polars.Series.value_counts", false]], "var() (in module polars)": [[840, "polars.var", false]], "var() (polars.dataframe method)": [[327, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[763, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[408, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[591, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[937, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1363, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1021, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1217, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[328, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[496, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1118, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[497, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1119, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[841, "polars.when", false]], "where() (polars.expr method)": [[764, "polars.Expr.where", false]], "width (polars.dataframe property)": [[329, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[938, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[330, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[939, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[331, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[940, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[941, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[749, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[332, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[942, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[333, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[943, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[498, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1120, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[37, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[38, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[39, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[40, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[41, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[42, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[43, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[45, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[616, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[46, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[47, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[765, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[499, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1121, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[842, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[744, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1336, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1364, "polars.Series.zip_with", false]]}, "objects": {"polars": [[192, 0, 1, "", "Catalog"], [32, 0, 1, "", "CredentialProvider"], [33, 0, 1, "", "CredentialProviderAWS"], [34, 0, 1, "", "CredentialProviderAzure"], [35, 0, 1, "", "CredentialProviderGCP"], [53, 0, 1, "", "PartitionByKey"], [54, 0, 1, "", "PartitionMaxSize"], [55, 0, 1, "", "PartitionParted"], [944, 0, 1, "", "QueryOptFlags"], [1401, 0, 1, "", "SQLContext"], [56, 0, 1, "", "ScanCastOptions"], [57, 0, 1, "", "StringCache"], [58, 4, 1, "", "align_frames"], [766, 4, 1, "", "all"], [767, 4, 1, "", "all_horizontal"], [768, 4, 1, "", "any"], [769, 4, 1, "", "any_horizontal"], [770, 4, 1, "", "approx_n_unique"], [771, 4, 1, "", "arange"], [772, 4, 1, "", "arctan2"], [773, 4, 1, "", "arctan2d"], [774, 4, 1, "", "arg_sort_by"], [775, 4, 1, "", "arg_where"], [63, 4, 1, "", "build_info"], [776, 4, 1, "", "business_day_count"], [777, 4, 1, "", "coalesce"], [64, 4, 1, "", "collect_all"], [65, 4, 1, "", "collect_all_async"], [66, 4, 1, "", "concat"], [778, 4, 1, "", "concat_arr"], [779, 4, 1, "", "concat_list"], [780, 4, 1, "", "concat_str"], [781, 4, 1, "", "corr"], [782, 4, 1, "", "count"], [783, 4, 1, "", "cov"], [784, 4, 1, "", "cum_count"], [785, 4, 1, "", "cum_fold"], [786, 4, 1, "", "cum_reduce"], [787, 4, 1, "", "cum_sum"], [788, 4, 1, "", "cum_sum_horizontal"], [789, 4, 1, "", "date"], [790, 4, 1, "", "date_range"], [791, 4, 1, "", "date_ranges"], [792, 4, 1, "", "datetime"], [793, 4, 1, "", "datetime_range"], [794, 4, 1, "", "datetime_ranges"], [97, 4, 1, "", "defer"], [98, 4, 1, "", "disable_string_cache"], [99, 4, 1, "", "dtype_of"], [795, 4, 1, "", "duration"], [796, 4, 1, "", "element"], [100, 4, 1, "", "enable_string_cache"], [101, 4, 1, "", "escape_regex"], [797, 4, 1, "", "exclude"], [132, 4, 1, "", "explain_all"], [798, 4, 1, "", "first"], [799, 4, 1, "", "fold"], [800, 4, 1, "", "format"], [133, 4, 1, "", "from_arrow"], [134, 4, 1, "", "from_dataframe"], [135, 4, 1, "", "from_dict"], [136, 4, 1, "", "from_dicts"], [801, 4, 1, "", "from_epoch"], [137, 4, 1, "", "from_numpy"], [138, 4, 1, "", "from_pandas"], [139, 4, 1, "", "from_records"], [140, 4, 1, "", "from_repr"], [141, 4, 1, "", "get_index_type"], [802, 4, 1, "", "groups"], [803, 4, 1, "", "head"], [804, 4, 1, "", "implode"], [805, 4, 1, "", "int_range"], [806, 4, 1, "", "int_ranges"], [148, 4, 1, "", "json_normalize"], [807, 4, 1, "", "last"], [808, 4, 1, "", "len"], [809, 4, 1, "", "linear_space"], [810, 4, 1, "", "linear_spaces"], [811, 4, 1, "", "lit"], [812, 4, 1, "", "map_batches"], [813, 4, 1, "", "map_groups"], [814, 4, 1, "", "max"], [815, 4, 1, "", "max_horizontal"], [816, 4, 1, "", "mean"], [817, 4, 1, "", "mean_horizontal"], [818, 4, 1, "", "median"], [819, 4, 1, "", "min"], [820, 4, 1, "", "min_horizontal"], [821, 4, 1, "", "n_unique"], [822, 4, 1, "", "nth"], [823, 4, 1, "", "ones"], [824, 4, 1, "", "quantile"], [150, 4, 1, "", "read_avro"], [151, 4, 1, "", "read_clipboard"], [152, 4, 1, "", "read_csv"], [153, 4, 1, "", "read_csv_batched"], [154, 4, 1, "", "read_database"], [155, 4, 1, "", "read_database_uri"], [156, 4, 1, "", "read_delta"], [157, 4, 1, "", "read_excel"], [158, 4, 1, "", "read_ipc"], [159, 4, 1, "", "read_ipc_schema"], [160, 4, 1, "", "read_ipc_stream"], [161, 4, 1, "", "read_json"], [162, 4, 1, "", "read_ndjson"], [163, 4, 1, "", "read_ods"], [164, 4, 1, "", "read_parquet"], [165, 4, 1, "", "read_parquet_metadata"], [166, 4, 1, "", "read_parquet_schema"], [825, 4, 1, "", "reduce"], [826, 4, 1, "", "repeat"], [827, 4, 1, "", "rolling_corr"], [828, 4, 1, "", "rolling_cov"], [167, 4, 1, "", "scan_csv"], [168, 4, 1, "", "scan_delta"], [169, 4, 1, "", "scan_iceberg"], [170, 4, 1, "", "scan_ipc"], [171, 4, 1, "", "scan_ndjson"], [172, 4, 1, "", "scan_parquet"], [173, 4, 1, "", "scan_pyarrow_dataset"], [829, 4, 1, "", "select"], [976, 7, 0, "-", "selectors"], [174, 4, 1, "", "set_random_seed"], [175, 4, 1, "", "show_versions"], [830, 4, 1, "", "sql"], [831, 4, 1, "", "sql_expr"], [832, 4, 1, "", "std"], [833, 4, 1, "", "struct"], [834, 4, 1, "", "sum"], [835, 4, 1, "", "sum_horizontal"], [836, 4, 1, "", "tail"], [189, 4, 1, "", "thread_pool_size"], [190, 4, 1, "", "threadpool_size"], [837, 4, 1, "", "time"], [838, 4, 1, "", "time_range"], [839, 4, 1, "", "time_ranges"], [191, 4, 1, "", "using_string_cache"], [840, 4, 1, "", "var"], [841, 4, 1, "", "when"], [842, 4, 1, "", "zeros"]], "polars.Catalog": [[192, 1, 1, "", "__init__"], [193, 1, 1, "", "get_table_info"], [194, 1, 1, "", "list_catalogs"], [195, 1, 1, "", "list_namespaces"], [196, 1, 1, "", "list_tables"], [197, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_engine_affinity"], [11, 1, 1, "", "set_float_precision"], [12, 1, 1, "", "set_fmt_float"], [13, 1, 1, "", "set_fmt_str_lengths"], [14, 1, 1, "", "set_fmt_table_cell_list_len"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cell_numeric_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_thousands_separator"], [29, 1, 1, "", "set_trim_decimal_zeros"], [30, 1, 1, "", "set_verbose"], [31, 1, 1, "", "state"]], "polars.CredentialProvider": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[35, 1, 1, "", "__init__"]], "polars.DataFrame": [[209, 1, 1, "", "__array__"], [210, 1, 1, "", "__arrow_c_stream__"], [211, 1, 1, "", "__dataframe__"], [212, 1, 1, "", "__getitem__"], [213, 1, 1, "", "__setitem__"], [214, 1, 1, "", "approx_n_unique"], [215, 1, 1, "", "bottom_k"], [216, 1, 1, "", "cast"], [217, 1, 1, "", "clear"], [218, 1, 1, "", "clone"], [219, 1, 1, "", "collect_schema"], [220, 2, 1, "", "columns"], [221, 1, 1, "", "corr"], [222, 1, 1, "", "count"], [223, 1, 1, "", "describe"], [224, 1, 1, "", "deserialize"], [225, 1, 1, "", "drop"], [226, 1, 1, "", "drop_in_place"], [227, 1, 1, "", "drop_nans"], [228, 1, 1, "", "drop_nulls"], [229, 2, 1, "", "dtypes"], [230, 1, 1, "", "equals"], [231, 1, 1, "", "estimated_size"], [232, 1, 1, "", "explode"], [233, 1, 1, "", "extend"], [234, 1, 1, "", "fill_nan"], [235, 1, 1, "", "fill_null"], [236, 1, 1, "", "filter"], [237, 2, 1, "", "flags"], [238, 1, 1, "", "fold"], [239, 1, 1, "", "gather_every"], [240, 1, 1, "", "get_column"], [241, 1, 1, "", "get_column_index"], [242, 1, 1, "", "get_columns"], [243, 1, 1, "", "glimpse"], [244, 1, 1, "", "group_by"], [245, 1, 1, "", "group_by_dynamic"], [246, 1, 1, "", "hash_rows"], [247, 1, 1, "", "head"], [248, 2, 1, "", "height"], [249, 1, 1, "", "hstack"], [250, 1, 1, "", "insert_column"], [251, 1, 1, "", "interpolate"], [252, 1, 1, "", "is_duplicated"], [253, 1, 1, "", "is_empty"], [254, 1, 1, "", "is_unique"], [255, 1, 1, "", "item"], [256, 1, 1, "", "iter_columns"], [257, 1, 1, "", "iter_rows"], [258, 1, 1, "", "iter_slices"], [259, 1, 1, "", "join"], [260, 1, 1, "", "join_asof"], [261, 1, 1, "", "join_where"], [262, 1, 1, "", "lazy"], [263, 1, 1, "", "limit"], [264, 1, 1, "", "map_rows"], [265, 1, 1, "", "match_to_schema"], [266, 1, 1, "", "max"], [267, 1, 1, "", "max_horizontal"], [268, 1, 1, "", "mean"], [269, 1, 1, "", "mean_horizontal"], [270, 1, 1, "", "median"], [271, 1, 1, "", "melt"], [272, 1, 1, "", "merge_sorted"], [273, 1, 1, "", "min"], [274, 1, 1, "", "min_horizontal"], [275, 1, 1, "", "n_chunks"], [276, 1, 1, "", "n_unique"], [277, 1, 1, "", "null_count"], [278, 1, 1, "", "partition_by"], [279, 1, 1, "", "pipe"], [280, 1, 1, "", "pivot"], [359, 2, 1, "", "plot"], [281, 1, 1, "", "product"], [282, 1, 1, "", "quantile"], [283, 1, 1, "", "rechunk"], [284, 1, 1, "", "remove"], [285, 1, 1, "", "rename"], [286, 1, 1, "", "replace_column"], [287, 1, 1, "", "reverse"], [288, 1, 1, "", "rolling"], [289, 1, 1, "", "row"], [290, 1, 1, "", "rows"], [291, 1, 1, "", "rows_by_key"], [292, 1, 1, "", "sample"], [293, 2, 1, "", "schema"], [294, 1, 1, "", "select"], [295, 1, 1, "", "select_seq"], [296, 1, 1, "", "serialize"], [297, 1, 1, "", "set_sorted"], [298, 2, 1, "", "shape"], [299, 1, 1, "", "shift"], [300, 1, 1, "", "shrink_to_fit"], [301, 1, 1, "", "slice"], [302, 1, 1, "", "sort"], [303, 1, 1, "", "sql"], [304, 1, 1, "", "std"], [360, 2, 1, "", "style"], [305, 1, 1, "", "sum"], [306, 1, 1, "", "sum_horizontal"], [307, 1, 1, "", "tail"], [308, 1, 1, "", "to_arrow"], [309, 1, 1, "", "to_dict"], [310, 1, 1, "", "to_dicts"], [311, 1, 1, "", "to_dummies"], [312, 1, 1, "", "to_init_repr"], [313, 1, 1, "", "to_jax"], [314, 1, 1, "", "to_numpy"], [315, 1, 1, "", "to_pandas"], [316, 1, 1, "", "to_series"], [317, 1, 1, "", "to_struct"], [318, 1, 1, "", "to_torch"], [319, 1, 1, "", "top_k"], [320, 1, 1, "", "transpose"], [321, 1, 1, "", "unique"], [322, 1, 1, "", "unnest"], [323, 1, 1, "", "unpivot"], [324, 1, 1, "", "unstack"], [325, 1, 1, "", "update"], [326, 1, 1, "", "upsample"], [327, 1, 1, "", "var"], [328, 1, 1, "", "vstack"], [329, 2, 1, "", "width"], [330, 1, 1, "", "with_columns"], [331, 1, 1, "", "with_columns_seq"], [332, 1, 1, "", "with_row_count"], [333, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_clipboard"], [38, 1, 1, "", "write_csv"], [39, 1, 1, "", "write_database"], [40, 1, 1, "", "write_delta"], [41, 1, 1, "", "write_excel"], [42, 1, 1, "", "write_iceberg"], [43, 1, 1, "", "write_ipc"], [44, 1, 1, "", "write_ipc_stream"], [45, 1, 1, "", "write_json"], [46, 1, 1, "", "write_ndjson"], [47, 1, 1, "", "write_parquet"]], "polars.DataType": [[48, 1, 1, "", "to_dtype_expr"]], "polars.Expr": [[365, 1, 1, "", "abs"], [366, 1, 1, "", "add"], [367, 1, 1, "", "agg_groups"], [368, 1, 1, "", "alias"], [369, 1, 1, "", "all"], [370, 1, 1, "", "and_"], [371, 1, 1, "", "any"], [372, 1, 1, "", "append"], [373, 1, 1, "", "approx_n_unique"], [374, 1, 1, "", "arccos"], [375, 1, 1, "", "arccosh"], [376, 1, 1, "", "arcsin"], [377, 1, 1, "", "arcsinh"], [378, 1, 1, "", "arctan"], [379, 1, 1, "", "arctanh"], [380, 1, 1, "", "arg_max"], [381, 1, 1, "", "arg_min"], [382, 1, 1, "", "arg_sort"], [383, 1, 1, "", "arg_true"], [384, 1, 1, "", "arg_unique"], [409, 1, 1, "", "backward_fill"], [417, 1, 1, "", "bitwise_and"], [418, 1, 1, "", "bitwise_count_ones"], [419, 1, 1, "", "bitwise_count_zeros"], [420, 1, 1, "", "bitwise_leading_ones"], [421, 1, 1, "", "bitwise_leading_zeros"], [422, 1, 1, "", "bitwise_or"], [423, 1, 1, "", "bitwise_trailing_ones"], [424, 1, 1, "", "bitwise_trailing_zeros"], [425, 1, 1, "", "bitwise_xor"], [426, 1, 1, "", "bottom_k"], [427, 1, 1, "", "bottom_k_by"], [428, 1, 1, "", "cast"], [434, 1, 1, "", "cbrt"], [435, 1, 1, "", "ceil"], [436, 1, 1, "", "clip"], [437, 1, 1, "", "cos"], [438, 1, 1, "", "cosh"], [439, 1, 1, "", "cot"], [440, 1, 1, "", "count"], [441, 1, 1, "", "cum_count"], [442, 1, 1, "", "cum_max"], [443, 1, 1, "", "cum_min"], [444, 1, 1, "", "cum_prod"], [445, 1, 1, "", "cum_sum"], [446, 1, 1, "", "cumulative_eval"], [447, 1, 1, "", "cut"], [448, 1, 1, "", "degrees"], [449, 1, 1, "", "deserialize"], [450, 1, 1, "", "diff"], [451, 1, 1, "", "dot"], [452, 1, 1, "", "drop_nans"], [453, 1, 1, "", "drop_nulls"], [500, 1, 1, "", "entropy"], [501, 1, 1, "", "eq"], [502, 1, 1, "", "eq_missing"], [503, 1, 1, "", "ewm_mean"], [504, 1, 1, "", "ewm_mean_by"], [505, 1, 1, "", "ewm_std"], [506, 1, 1, "", "ewm_var"], [507, 1, 1, "", "exclude"], [508, 1, 1, "", "exp"], [509, 1, 1, "", "explode"], [510, 1, 1, "", "extend_constant"], [511, 1, 1, "", "fill_nan"], [512, 1, 1, "", "fill_null"], [513, 1, 1, "", "filter"], [514, 1, 1, "", "first"], [515, 1, 1, "", "flatten"], [516, 1, 1, "", "floor"], [517, 1, 1, "", "floordiv"], [518, 1, 1, "", "forward_fill"], [519, 1, 1, "", "from_json"], [520, 1, 1, "", "gather"], [521, 1, 1, "", "gather_every"], [522, 1, 1, "", "ge"], [523, 1, 1, "", "get"], [524, 1, 1, "", "gt"], [525, 1, 1, "", "has_nulls"], [526, 1, 1, "", "hash"], [527, 1, 1, "", "head"], [528, 1, 1, "", "hist"], [529, 1, 1, "", "implode"], [530, 1, 1, "", "index_of"], [531, 1, 1, "", "inspect"], [532, 1, 1, "", "interpolate"], [533, 1, 1, "", "interpolate_by"], [534, 1, 1, "", "is_between"], [535, 1, 1, "", "is_close"], [536, 1, 1, "", "is_duplicated"], [537, 1, 1, "", "is_finite"], [538, 1, 1, "", "is_first_distinct"], [539, 1, 1, "", "is_in"], [540, 1, 1, "", "is_infinite"], [541, 1, 1, "", "is_last_distinct"], [542, 1, 1, "", "is_nan"], [543, 1, 1, "", "is_not_nan"], [544, 1, 1, "", "is_not_null"], [545, 1, 1, "", "is_null"], [546, 1, 1, "", "is_unique"], [547, 1, 1, "", "kurtosis"], [548, 1, 1, "", "last"], [549, 1, 1, "", "le"], [550, 1, 1, "", "len"], [551, 1, 1, "", "limit"], [592, 1, 1, "", "log"], [593, 1, 1, "", "log10"], [594, 1, 1, "", "log1p"], [595, 1, 1, "", "lower_bound"], [596, 1, 1, "", "lt"], [597, 1, 1, "", "map_batches"], [598, 1, 1, "", "map_elements"], [599, 1, 1, "", "max"], [600, 1, 1, "", "mean"], [601, 1, 1, "", "median"], [617, 1, 1, "", "min"], [618, 1, 1, "", "mod"], [619, 1, 1, "", "mode"], [620, 1, 1, "", "mul"], [621, 1, 1, "", "n_unique"], [631, 1, 1, "", "nan_max"], [632, 1, 1, "", "nan_min"], [633, 1, 1, "", "ne"], [634, 1, 1, "", "ne_missing"], [635, 1, 1, "", "neg"], [636, 1, 1, "", "not_"], [637, 1, 1, "", "null_count"], [638, 1, 1, "", "or_"], [639, 1, 1, "", "over"], [640, 1, 1, "", "pct_change"], [641, 1, 1, "", "peak_max"], [642, 1, 1, "", "peak_min"], [643, 1, 1, "", "pipe"], [644, 1, 1, "", "pow"], [645, 1, 1, "", "product"], [646, 1, 1, "", "qcut"], [647, 1, 1, "", "quantile"], [648, 1, 1, "", "radians"], [649, 1, 1, "", "rank"], [650, 1, 1, "", "rechunk"], [651, 1, 1, "", "reinterpret"], [652, 1, 1, "", "repeat_by"], [653, 1, 1, "", "replace"], [654, 1, 1, "", "replace_strict"], [655, 1, 1, "", "reshape"], [656, 1, 1, "", "reverse"], [657, 1, 1, "", "rle"], [658, 1, 1, "", "rle_id"], [659, 1, 1, "", "rolling"], [660, 1, 1, "", "rolling_kurtosis"], [661, 1, 1, "", "rolling_map"], [662, 1, 1, "", "rolling_max"], [663, 1, 1, "", "rolling_max_by"], [664, 1, 1, "", "rolling_mean"], [665, 1, 1, "", "rolling_mean_by"], [666, 1, 1, "", "rolling_median"], [667, 1, 1, "", "rolling_median_by"], [668, 1, 1, "", "rolling_min"], [669, 1, 1, "", "rolling_min_by"], [670, 1, 1, "", "rolling_quantile"], [671, 1, 1, "", "rolling_quantile_by"], [672, 1, 1, "", "rolling_skew"], [673, 1, 1, "", "rolling_std"], [674, 1, 1, "", "rolling_std_by"], [675, 1, 1, "", "rolling_sum"], [676, 1, 1, "", "rolling_sum_by"], [677, 1, 1, "", "rolling_var"], [678, 1, 1, "", "rolling_var_by"], [679, 1, 1, "", "round"], [680, 1, 1, "", "round_sig_figs"], [681, 1, 1, "", "sample"], [682, 1, 1, "", "search_sorted"], [683, 1, 1, "", "set_sorted"], [684, 1, 1, "", "shift"], [685, 1, 1, "", "shrink_dtype"], [686, 1, 1, "", "shuffle"], [687, 1, 1, "", "sign"], [688, 1, 1, "", "sin"], [689, 1, 1, "", "sinh"], [690, 1, 1, "", "skew"], [691, 1, 1, "", "slice"], [692, 1, 1, "", "sort"], [693, 1, 1, "", "sort_by"], [694, 1, 1, "", "sqrt"], [695, 1, 1, "", "std"], [750, 1, 1, "", "sub"], [751, 1, 1, "", "sum"], [752, 1, 1, "", "tail"], [753, 1, 1, "", "tan"], [754, 1, 1, "", "tanh"], [755, 1, 1, "", "to_physical"], [756, 1, 1, "", "top_k"], [757, 1, 1, "", "top_k_by"], [758, 1, 1, "", "truediv"], [759, 1, 1, "", "unique"], [760, 1, 1, "", "unique_counts"], [761, 1, 1, "", "upper_bound"], [762, 1, 1, "", "value_counts"], [763, 1, 1, "", "var"], [764, 1, 1, "", "where"], [765, 1, 1, "", "xor"]], "polars.Expr.arr": [[385, 1, 1, "", "all"], [386, 1, 1, "", "any"], [387, 1, 1, "", "arg_max"], [388, 1, 1, "", "arg_min"], [389, 1, 1, "", "contains"], [390, 1, 1, "", "count_matches"], [391, 1, 1, "", "explode"], [392, 1, 1, "", "first"], [393, 1, 1, "", "get"], [394, 1, 1, "", "join"], [395, 1, 1, "", "last"], [396, 1, 1, "", "max"], [397, 1, 1, "", "median"], [398, 1, 1, "", "min"], [399, 1, 1, "", "n_unique"], [400, 1, 1, "", "reverse"], [401, 1, 1, "", "shift"], [402, 1, 1, "", "sort"], [403, 1, 1, "", "std"], [404, 1, 1, "", "sum"], [405, 1, 1, "", "to_list"], [406, 1, 1, "", "to_struct"], [407, 1, 1, "", "unique"], [408, 1, 1, "", "var"]], "polars.Expr.bin": [[410, 1, 1, "", "contains"], [411, 1, 1, "", "decode"], [412, 1, 1, "", "encode"], [413, 1, 1, "", "ends_with"], [414, 1, 1, "", "reinterpret"], [415, 1, 1, "", "size"], [416, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[429, 1, 1, "", "ends_with"], [430, 1, 1, "", "get_categories"], [431, 1, 1, "", "len_bytes"], [432, 1, 1, "", "len_chars"], [433, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[454, 1, 1, "", "add_business_days"], [455, 1, 1, "", "base_utc_offset"], [456, 1, 1, "", "cast_time_unit"], [457, 1, 1, "", "century"], [458, 1, 1, "", "combine"], [459, 1, 1, "", "convert_time_zone"], [460, 1, 1, "", "date"], [461, 1, 1, "", "datetime"], [462, 1, 1, "", "day"], [463, 1, 1, "", "dst_offset"], [464, 1, 1, "", "epoch"], [465, 1, 1, "", "hour"], [466, 1, 1, "", "is_business_day"], [467, 1, 1, "", "is_leap_year"], [468, 1, 1, "", "iso_year"], [469, 1, 1, "", "microsecond"], [470, 1, 1, "", "millennium"], [471, 1, 1, "", "millisecond"], [472, 1, 1, "", "minute"], [473, 1, 1, "", "month"], [474, 1, 1, "", "month_end"], [475, 1, 1, "", "month_start"], [476, 1, 1, "", "nanosecond"], [477, 1, 1, "", "offset_by"], [478, 1, 1, "", "ordinal_day"], [479, 1, 1, "", "quarter"], [480, 1, 1, "", "replace"], [481, 1, 1, "", "replace_time_zone"], [482, 1, 1, "", "round"], [483, 1, 1, "", "second"], [484, 1, 1, "", "strftime"], [485, 1, 1, "", "time"], [486, 1, 1, "", "timestamp"], [487, 1, 1, "", "to_string"], [488, 1, 1, "", "total_days"], [489, 1, 1, "", "total_hours"], [490, 1, 1, "", "total_microseconds"], [491, 1, 1, "", "total_milliseconds"], [492, 1, 1, "", "total_minutes"], [493, 1, 1, "", "total_nanoseconds"], [494, 1, 1, "", "total_seconds"], [495, 1, 1, "", "truncate"], [496, 1, 1, "", "week"], [497, 1, 1, "", "weekday"], [498, 1, 1, "", "with_time_unit"], [499, 1, 1, "", "year"]], "polars.Expr.list": [[552, 1, 1, "", "all"], [553, 1, 1, "", "any"], [554, 1, 1, "", "arg_max"], [555, 1, 1, "", "arg_min"], [556, 1, 1, "", "concat"], [557, 1, 1, "", "contains"], [558, 1, 1, "", "count_matches"], [559, 1, 1, "", "diff"], [560, 1, 1, "", "drop_nulls"], [561, 1, 1, "", "eval"], [562, 1, 1, "", "explode"], [563, 1, 1, "", "first"], [564, 1, 1, "", "gather"], [565, 1, 1, "", "gather_every"], [566, 1, 1, "", "get"], [567, 1, 1, "", "head"], [568, 1, 1, "", "join"], [569, 1, 1, "", "last"], [570, 1, 1, "", "len"], [571, 1, 1, "", "max"], [572, 1, 1, "", "mean"], [573, 1, 1, "", "median"], [574, 1, 1, "", "min"], [575, 1, 1, "", "n_unique"], [576, 1, 1, "", "reverse"], [577, 1, 1, "", "sample"], [578, 1, 1, "", "set_difference"], [579, 1, 1, "", "set_intersection"], [580, 1, 1, "", "set_symmetric_difference"], [581, 1, 1, "", "set_union"], [582, 1, 1, "", "shift"], [583, 1, 1, "", "slice"], [584, 1, 1, "", "sort"], [585, 1, 1, "", "std"], [586, 1, 1, "", "sum"], [587, 1, 1, "", "tail"], [588, 1, 1, "", "to_array"], [589, 1, 1, "", "to_struct"], [590, 1, 1, "", "unique"], [591, 1, 1, "", "var"]], "polars.Expr.meta": [[602, 1, 1, "", "eq"], [603, 1, 1, "", "has_multiple_outputs"], [604, 1, 1, "", "is_column"], [605, 1, 1, "", "is_column_selection"], [606, 1, 1, "", "is_literal"], [607, 1, 1, "", "is_regex_projection"], [608, 1, 1, "", "ne"], [609, 1, 1, "", "output_name"], [610, 1, 1, "", "pop"], [611, 1, 1, "", "root_names"], [612, 1, 1, "", "serialize"], [613, 1, 1, "", "show_graph"], [614, 1, 1, "", "tree_format"], [615, 1, 1, "", "undo_aliases"], [616, 1, 1, "", "write_json"]], "polars.Expr.name": [[622, 1, 1, "", "keep"], [623, 1, 1, "", "map"], [624, 1, 1, "", "map_fields"], [625, 1, 1, "", "prefix"], [626, 1, 1, "", "prefix_fields"], [627, 1, 1, "", "suffix"], [628, 1, 1, "", "suffix_fields"], [629, 1, 1, "", "to_lowercase"], [630, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[696, 1, 1, "", "concat"], [697, 1, 1, "", "contains"], [698, 1, 1, "", "contains_any"], [699, 1, 1, "", "count_matches"], [700, 1, 1, "", "decode"], [701, 1, 1, "", "encode"], [702, 1, 1, "", "ends_with"], [703, 1, 1, "", "escape_regex"], [704, 1, 1, "", "explode"], [705, 1, 1, "", "extract"], [706, 1, 1, "", "extract_all"], [707, 1, 1, "", "extract_groups"], [708, 1, 1, "", "extract_many"], [709, 1, 1, "", "find"], [710, 1, 1, "", "find_many"], [711, 1, 1, "", "head"], [712, 1, 1, "", "join"], [713, 1, 1, "", "json_decode"], [714, 1, 1, "", "json_path_match"], [715, 1, 1, "", "len_bytes"], [716, 1, 1, "", "len_chars"], [717, 1, 1, "", "normalize"], [718, 1, 1, "", "pad_end"], [719, 1, 1, "", "pad_start"], [720, 1, 1, "", "replace"], [721, 1, 1, "", "replace_all"], [722, 1, 1, "", "replace_many"], [723, 1, 1, "", "reverse"], [724, 1, 1, "", "slice"], [725, 1, 1, "", "split"], [726, 1, 1, "", "split_exact"], [727, 1, 1, "", "splitn"], [728, 1, 1, "", "starts_with"], [729, 1, 1, "", "strip_chars"], [730, 1, 1, "", "strip_chars_end"], [731, 1, 1, "", "strip_chars_start"], [732, 1, 1, "", "strip_prefix"], [733, 1, 1, "", "strip_suffix"], [734, 1, 1, "", "strptime"], [735, 1, 1, "", "tail"], [736, 1, 1, "", "to_date"], [737, 1, 1, "", "to_datetime"], [738, 1, 1, "", "to_decimal"], [739, 1, 1, "", "to_integer"], [740, 1, 1, "", "to_lowercase"], [741, 1, 1, "", "to_time"], [742, 1, 1, "", "to_titlecase"], [743, 1, 1, "", "to_uppercase"], [744, 1, 1, "", "zfill"]], "polars.Expr.struct": [[745, 1, 1, "", "field"], [746, 1, 1, "", "json_encode"], [747, 1, 1, "", "rename_fields"], [748, 1, 1, "", "unnest"], [749, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[866, 1, 1, "", "__getitem__"], [867, 1, 1, "", "approx_n_unique"], [868, 1, 1, "", "bottom_k"], [869, 1, 1, "", "cache"], [870, 1, 1, "", "cast"], [871, 1, 1, "", "clear"], [872, 1, 1, "", "clone"], [873, 1, 1, "", "collect"], [874, 1, 1, "", "collect_async"], [875, 1, 1, "", "collect_schema"], [876, 2, 1, "", "columns"], [877, 1, 1, "", "count"], [878, 1, 1, "", "describe"], [879, 1, 1, "", "deserialize"], [880, 1, 1, "", "drop"], [881, 1, 1, "", "drop_nans"], [882, 1, 1, "", "drop_nulls"], [883, 2, 1, "", "dtypes"], [884, 1, 1, "", "explain"], [885, 1, 1, "", "explode"], [886, 1, 1, "", "fill_nan"], [887, 1, 1, "", "fill_null"], [888, 1, 1, "", "filter"], [889, 1, 1, "", "first"], [890, 1, 1, "", "gather_every"], [891, 1, 1, "", "group_by"], [892, 1, 1, "", "group_by_dynamic"], [893, 1, 1, "", "head"], [894, 1, 1, "", "inspect"], [895, 1, 1, "", "interpolate"], [896, 1, 1, "", "join"], [897, 1, 1, "", "join_asof"], [898, 1, 1, "", "join_where"], [899, 1, 1, "", "last"], [900, 1, 1, "", "lazy"], [901, 1, 1, "", "limit"], [902, 1, 1, "", "map_batches"], [903, 1, 1, "", "match_to_schema"], [904, 1, 1, "", "max"], [905, 1, 1, "", "mean"], [906, 1, 1, "", "median"], [907, 1, 1, "", "melt"], [908, 1, 1, "", "merge_sorted"], [909, 1, 1, "", "min"], [910, 1, 1, "", "null_count"], [911, 1, 1, "", "pipe"], [912, 1, 1, "", "profile"], [913, 1, 1, "", "quantile"], [914, 1, 1, "", "remote"], [915, 1, 1, "", "remove"], [916, 1, 1, "", "rename"], [917, 1, 1, "", "reverse"], [918, 1, 1, "", "rolling"], [919, 2, 1, "", "schema"], [920, 1, 1, "", "select"], [921, 1, 1, "", "select_seq"], [922, 1, 1, "", "serialize"], [923, 1, 1, "", "set_sorted"], [924, 1, 1, "", "shift"], [925, 1, 1, "", "show_graph"], [49, 1, 1, "", "sink_csv"], [50, 1, 1, "", "sink_ipc"], [51, 1, 1, "", "sink_ndjson"], [52, 1, 1, "", "sink_parquet"], [926, 1, 1, "", "slice"], [927, 1, 1, "", "sort"], [928, 1, 1, "", "sql"], [929, 1, 1, "", "std"], [930, 1, 1, "", "sum"], [931, 1, 1, "", "tail"], [932, 1, 1, "", "top_k"], [933, 1, 1, "", "unique"], [934, 1, 1, "", "unnest"], [935, 1, 1, "", "unpivot"], [936, 1, 1, "", "update"], [937, 1, 1, "", "var"], [938, 2, 1, "", "width"], [939, 1, 1, "", "with_columns"], [940, 1, 1, "", "with_columns_seq"], [941, 1, 1, "", "with_context"], [942, 1, 1, "", "with_row_count"], [943, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[53, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[54, 1, 1, "", "__init__"]], "polars.PartitionParted": [[55, 1, 1, "", "__init__"]], "polars.QueryOptFlags": [[944, 1, 1, "", "__init__"]], "polars.SQLContext": [[1401, 1, 1, "", "__enter__"], [1401, 1, 1, "", "__exit__"], [1401, 1, 1, "", "__init__"], [1382, 1, 1, "", "execute"], [1383, 1, 1, "", "execute_global"], [1384, 1, 1, "", "register"], [1385, 1, 1, "", "register_globals"], [1386, 1, 1, "", "register_many"], [1387, 1, 1, "", "tables"], [1388, 1, 1, "", "unregister"]], "polars.ScanCastOptions": [[56, 1, 1, "", "__init__"]], "polars.Series": [[978, 1, 1, "", "__array__"], [979, 1, 1, "", "__arrow_c_stream__"], [980, 1, 1, "", "__getitem__"], [981, 1, 1, "", "abs"], [982, 1, 1, "", "alias"], [983, 1, 1, "", "all"], [984, 1, 1, "", "any"], [985, 1, 1, "", "append"], [986, 1, 1, "", "approx_n_unique"], [987, 1, 1, "", "arccos"], [988, 1, 1, "", "arccosh"], [989, 1, 1, "", "arcsin"], [990, 1, 1, "", "arcsinh"], [991, 1, 1, "", "arctan"], [992, 1, 1, "", "arctanh"], [993, 1, 1, "", "arg_max"], [994, 1, 1, "", "arg_min"], [995, 1, 1, "", "arg_sort"], [996, 1, 1, "", "arg_true"], [997, 1, 1, "", "arg_unique"], [1022, 1, 1, "", "backward_fill"], [1030, 1, 1, "", "bitwise_and"], [1031, 1, 1, "", "bitwise_count_ones"], [1032, 1, 1, "", "bitwise_count_zeros"], [1033, 1, 1, "", "bitwise_leading_ones"], [1034, 1, 1, "", "bitwise_leading_zeros"], [1035, 1, 1, "", "bitwise_or"], [1036, 1, 1, "", "bitwise_trailing_ones"], [1037, 1, 1, "", "bitwise_trailing_zeros"], [1038, 1, 1, "", "bitwise_xor"], [1039, 1, 1, "", "bottom_k"], [1040, 1, 1, "", "bottom_k_by"], [1041, 1, 1, "", "cast"], [1050, 1, 1, "", "cbrt"], [1051, 1, 1, "", "ceil"], [1052, 1, 1, "", "chunk_lengths"], [1053, 1, 1, "", "clear"], [1054, 1, 1, "", "clip"], [1055, 1, 1, "", "clone"], [1056, 1, 1, "", "cos"], [1057, 1, 1, "", "cosh"], [1058, 1, 1, "", "cot"], [1059, 1, 1, "", "count"], [1060, 1, 1, "", "cum_count"], [1061, 1, 1, "", "cum_max"], [1062, 1, 1, "", "cum_min"], [1063, 1, 1, "", "cum_prod"], [1064, 1, 1, "", "cum_sum"], [1065, 1, 1, "", "cumulative_eval"], [1066, 1, 1, "", "cut"], [1067, 1, 1, "", "describe"], [1068, 1, 1, "", "diff"], [1069, 1, 1, "", "dot"], [1070, 1, 1, "", "drop_nans"], [1071, 1, 1, "", "drop_nulls"], [1122, 2, 1, "", "dtype"], [1123, 1, 1, "", "entropy"], [1124, 1, 1, "", "eq"], [1125, 1, 1, "", "eq_missing"], [1126, 1, 1, "", "equals"], [1127, 1, 1, "", "estimated_size"], [1128, 1, 1, "", "ewm_mean"], [1129, 1, 1, "", "ewm_mean_by"], [1130, 1, 1, "", "ewm_std"], [1131, 1, 1, "", "ewm_var"], [1132, 1, 1, "", "exp"], [1133, 1, 1, "", "explode"], [1134, 1, 1, "", "extend"], [1135, 1, 1, "", "extend_constant"], [1136, 1, 1, "", "fill_nan"], [1137, 1, 1, "", "fill_null"], [1138, 1, 1, "", "filter"], [1139, 1, 1, "", "first"], [1140, 2, 1, "", "flags"], [1141, 1, 1, "", "floor"], [1142, 1, 1, "", "forward_fill"], [1143, 1, 1, "", "gather"], [1144, 1, 1, "", "gather_every"], [1145, 1, 1, "", "ge"], [1146, 1, 1, "", "get_chunks"], [1147, 1, 1, "", "gt"], [1148, 1, 1, "", "has_nulls"], [1149, 1, 1, "", "has_validity"], [1150, 1, 1, "", "hash"], [1151, 1, 1, "", "head"], [1152, 1, 1, "", "hist"], [1153, 1, 1, "", "implode"], [1154, 1, 1, "", "index_of"], [1155, 1, 1, "", "interpolate"], [1156, 1, 1, "", "interpolate_by"], [1157, 1, 1, "", "is_between"], [1158, 1, 1, "", "is_close"], [1159, 1, 1, "", "is_duplicated"], [1160, 1, 1, "", "is_empty"], [1161, 1, 1, "", "is_finite"], [1162, 1, 1, "", "is_first_distinct"], [1163, 1, 1, "", "is_in"], [1164, 1, 1, "", "is_infinite"], [1165, 1, 1, "", "is_last_distinct"], [1166, 1, 1, "", "is_nan"], [1167, 1, 1, "", "is_not_nan"], [1168, 1, 1, "", "is_not_null"], [1169, 1, 1, "", "is_null"], [1170, 1, 1, "", "is_sorted"], [1171, 1, 1, "", "is_unique"], [1172, 1, 1, "", "item"], [1173, 1, 1, "", "kurtosis"], [1174, 1, 1, "", "last"], [1175, 1, 1, "", "le"], [1176, 1, 1, "", "len"], [1177, 1, 1, "", "limit"], [1218, 1, 1, "", "log"], [1219, 1, 1, "", "log10"], [1220, 1, 1, "", "log1p"], [1221, 1, 1, "", "lower_bound"], [1222, 1, 1, "", "lt"], [1223, 1, 1, "", "map_elements"], [1224, 1, 1, "", "max"], [1225, 1, 1, "", "mean"], [1226, 1, 1, "", "median"], [1227, 1, 1, "", "min"], [1228, 1, 1, "", "mode"], [1229, 1, 1, "", "n_chunks"], [1230, 1, 1, "", "n_unique"], [1231, 2, 1, "", "name"], [1232, 1, 1, "", "nan_max"], [1233, 1, 1, "", "nan_min"], [1234, 1, 1, "", "ne"], [1235, 1, 1, "", "ne_missing"], [1236, 1, 1, "", "new_from_index"], [1237, 1, 1, "", "not_"], [1238, 1, 1, "", "null_count"], [1239, 1, 1, "", "pct_change"], [1240, 1, 1, "", "peak_max"], [1241, 1, 1, "", "peak_min"], [1378, 2, 1, "", "plot"], [1242, 1, 1, "", "pow"], [1243, 1, 1, "", "product"], [1244, 1, 1, "", "qcut"], [1245, 1, 1, "", "quantile"], [1246, 1, 1, "", "rank"], [1247, 1, 1, "", "rechunk"], [1248, 1, 1, "", "reinterpret"], [1249, 1, 1, "", "rename"], [1250, 1, 1, "", "repeat_by"], [1251, 1, 1, "", "replace"], [1252, 1, 1, "", "replace_strict"], [1253, 1, 1, "", "reshape"], [1254, 1, 1, "", "reverse"], [1255, 1, 1, "", "rle"], [1256, 1, 1, "", "rle_id"], [1257, 1, 1, "", "rolling_kurtosis"], [1258, 1, 1, "", "rolling_map"], [1259, 1, 1, "", "rolling_max"], [1260, 1, 1, "", "rolling_mean"], [1261, 1, 1, "", "rolling_median"], [1262, 1, 1, "", "rolling_min"], [1263, 1, 1, "", "rolling_quantile"], [1264, 1, 1, "", "rolling_skew"], [1265, 1, 1, "", "rolling_std"], [1266, 1, 1, "", "rolling_sum"], [1267, 1, 1, "", "rolling_var"], [1268, 1, 1, "", "round"], [1269, 1, 1, "", "round_sig_figs"], [1270, 1, 1, "", "sample"], [1271, 1, 1, "", "scatter"], [1272, 1, 1, "", "search_sorted"], [1273, 1, 1, "", "set"], [1274, 1, 1, "", "set_sorted"], [1275, 2, 1, "", "shape"], [1276, 1, 1, "", "shift"], [1277, 1, 1, "", "shrink_dtype"], [1278, 1, 1, "", "shrink_to_fit"], [1279, 1, 1, "", "shuffle"], [1280, 1, 1, "", "sign"], [1281, 1, 1, "", "sin"], [1282, 1, 1, "", "sinh"], [1283, 1, 1, "", "skew"], [1284, 1, 1, "", "slice"], [1285, 1, 1, "", "sort"], [1286, 1, 1, "", "sqrt"], [1287, 1, 1, "", "std"], [1343, 1, 1, "", "sum"], [1344, 1, 1, "", "tail"], [1345, 1, 1, "", "tan"], [1346, 1, 1, "", "tanh"], [1347, 1, 1, "", "to_arrow"], [1348, 1, 1, "", "to_dummies"], [1349, 1, 1, "", "to_frame"], [1350, 1, 1, "", "to_init_repr"], [1351, 1, 1, "", "to_jax"], [1352, 1, 1, "", "to_list"], [1353, 1, 1, "", "to_numpy"], [1354, 1, 1, "", "to_pandas"], [1355, 1, 1, "", "to_physical"], [1356, 1, 1, "", "to_torch"], [1357, 1, 1, "", "top_k"], [1358, 1, 1, "", "top_k_by"], [1359, 1, 1, "", "unique"], [1360, 1, 1, "", "unique_counts"], [1361, 1, 1, "", "upper_bound"], [1362, 1, 1, "", "value_counts"], [1363, 1, 1, "", "var"], [1364, 1, 1, "", "zip_with"]], "polars.Series.arr": [[998, 1, 1, "", "all"], [999, 1, 1, "", "any"], [1000, 1, 1, "", "arg_max"], [1001, 1, 1, "", "arg_min"], [1002, 1, 1, "", "contains"], [1003, 1, 1, "", "count_matches"], [1004, 1, 1, "", "explode"], [1005, 1, 1, "", "first"], [1006, 1, 1, "", "get"], [1007, 1, 1, "", "join"], [1008, 1, 1, "", "last"], [1009, 1, 1, "", "max"], [1010, 1, 1, "", "median"], [1011, 1, 1, "", "min"], [1012, 1, 1, "", "n_unique"], [1013, 1, 1, "", "reverse"], [1014, 1, 1, "", "shift"], [1015, 1, 1, "", "sort"], [1016, 1, 1, "", "std"], [1017, 1, 1, "", "sum"], [1018, 1, 1, "", "to_list"], [1019, 1, 1, "", "to_struct"], [1020, 1, 1, "", "unique"], [1021, 1, 1, "", "var"]], "polars.Series.bin": [[1023, 1, 1, "", "contains"], [1024, 1, 1, "", "decode"], [1025, 1, 1, "", "encode"], [1026, 1, 1, "", "ends_with"], [1027, 1, 1, "", "reinterpret"], [1028, 1, 1, "", "size"], [1029, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1042, 1, 1, "", "ends_with"], [1043, 1, 1, "", "get_categories"], [1044, 1, 1, "", "is_local"], [1045, 1, 1, "", "len_bytes"], [1046, 1, 1, "", "len_chars"], [1047, 1, 1, "", "starts_with"], [1048, 1, 1, "", "to_local"], [1049, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1072, 1, 1, "", "add_business_days"], [1073, 1, 1, "", "base_utc_offset"], [1074, 1, 1, "", "cast_time_unit"], [1075, 1, 1, "", "century"], [1076, 1, 1, "", "combine"], [1077, 1, 1, "", "convert_time_zone"], [1078, 1, 1, "", "date"], [1079, 1, 1, "", "datetime"], [1080, 1, 1, "", "day"], [1081, 1, 1, "", "dst_offset"], [1082, 1, 1, "", "epoch"], [1083, 1, 1, "", "hour"], [1084, 1, 1, "", "is_business_day"], [1085, 1, 1, "", "is_leap_year"], [1086, 1, 1, "", "iso_year"], [1087, 1, 1, "", "max"], [1088, 1, 1, "", "mean"], [1089, 1, 1, "", "median"], [1090, 1, 1, "", "microsecond"], [1091, 1, 1, "", "millennium"], [1092, 1, 1, "", "millisecond"], [1093, 1, 1, "", "min"], [1094, 1, 1, "", "minute"], [1095, 1, 1, "", "month"], [1096, 1, 1, "", "month_end"], [1097, 1, 1, "", "month_start"], [1098, 1, 1, "", "nanosecond"], [1099, 1, 1, "", "offset_by"], [1100, 1, 1, "", "ordinal_day"], [1101, 1, 1, "", "quarter"], [1102, 1, 1, "", "replace"], [1103, 1, 1, "", "replace_time_zone"], [1104, 1, 1, "", "round"], [1105, 1, 1, "", "second"], [1106, 1, 1, "", "strftime"], [1107, 1, 1, "", "time"], [1108, 1, 1, "", "timestamp"], [1109, 1, 1, "", "to_string"], [1110, 1, 1, "", "total_days"], [1111, 1, 1, "", "total_hours"], [1112, 1, 1, "", "total_microseconds"], [1113, 1, 1, "", "total_milliseconds"], [1114, 1, 1, "", "total_minutes"], [1115, 1, 1, "", "total_nanoseconds"], [1116, 1, 1, "", "total_seconds"], [1117, 1, 1, "", "truncate"], [1118, 1, 1, "", "week"], [1119, 1, 1, "", "weekday"], [1120, 1, 1, "", "with_time_unit"], [1121, 1, 1, "", "year"]], "polars.Series.list": [[1178, 1, 1, "", "all"], [1179, 1, 1, "", "any"], [1180, 1, 1, "", "arg_max"], [1181, 1, 1, "", "arg_min"], [1182, 1, 1, "", "concat"], [1183, 1, 1, "", "contains"], [1184, 1, 1, "", "count_matches"], [1185, 1, 1, "", "diff"], [1186, 1, 1, "", "drop_nulls"], [1187, 1, 1, "", "eval"], [1188, 1, 1, "", "explode"], [1189, 1, 1, "", "first"], [1190, 1, 1, "", "gather"], [1191, 1, 1, "", "gather_every"], [1192, 1, 1, "", "get"], [1193, 1, 1, "", "head"], [1194, 1, 1, "", "join"], [1195, 1, 1, "", "last"], [1196, 1, 1, "", "len"], [1197, 1, 1, "", "max"], [1198, 1, 1, "", "mean"], [1199, 1, 1, "", "median"], [1200, 1, 1, "", "min"], [1201, 1, 1, "", "n_unique"], [1202, 1, 1, "", "reverse"], [1203, 1, 1, "", "sample"], [1204, 1, 1, "", "set_difference"], [1205, 1, 1, "", "set_intersection"], [1206, 1, 1, "", "set_symmetric_difference"], [1207, 1, 1, "", "set_union"], [1208, 1, 1, "", "shift"], [1209, 1, 1, "", "slice"], [1210, 1, 1, "", "sort"], [1211, 1, 1, "", "std"], [1212, 1, 1, "", "sum"], [1213, 1, 1, "", "tail"], [1214, 1, 1, "", "to_array"], [1215, 1, 1, "", "to_struct"], [1216, 1, 1, "", "unique"], [1217, 1, 1, "", "var"]], "polars.Series.str": [[1288, 1, 1, "", "concat"], [1289, 1, 1, "", "contains"], [1290, 1, 1, "", "contains_any"], [1291, 1, 1, "", "count_matches"], [1292, 1, 1, "", "decode"], [1293, 1, 1, "", "encode"], [1294, 1, 1, "", "ends_with"], [1295, 1, 1, "", "escape_regex"], [1296, 1, 1, "", "explode"], [1297, 1, 1, "", "extract"], [1298, 1, 1, "", "extract_all"], [1299, 1, 1, "", "extract_groups"], [1300, 1, 1, "", "extract_many"], [1301, 1, 1, "", "find"], [1302, 1, 1, "", "find_many"], [1303, 1, 1, "", "head"], [1304, 1, 1, "", "join"], [1305, 1, 1, "", "json_decode"], [1306, 1, 1, "", "json_path_match"], [1307, 1, 1, "", "len_bytes"], [1308, 1, 1, "", "len_chars"], [1309, 1, 1, "", "normalize"], [1310, 1, 1, "", "pad_end"], [1311, 1, 1, "", "pad_start"], [1312, 1, 1, "", "replace"], [1313, 1, 1, "", "replace_all"], [1314, 1, 1, "", "replace_many"], [1315, 1, 1, "", "reverse"], [1316, 1, 1, "", "slice"], [1317, 1, 1, "", "split"], [1318, 1, 1, "", "split_exact"], [1319, 1, 1, "", "splitn"], [1320, 1, 1, "", "starts_with"], [1321, 1, 1, "", "strip_chars"], [1322, 1, 1, "", "strip_chars_end"], [1323, 1, 1, "", "strip_chars_start"], [1324, 1, 1, "", "strip_prefix"], [1325, 1, 1, "", "strip_suffix"], [1326, 1, 1, "", "strptime"], [1327, 1, 1, "", "tail"], [1328, 1, 1, "", "to_date"], [1329, 1, 1, "", "to_datetime"], [1330, 1, 1, "", "to_decimal"], [1331, 1, 1, "", "to_integer"], [1332, 1, 1, "", "to_lowercase"], [1333, 1, 1, "", "to_time"], [1334, 1, 1, "", "to_titlecase"], [1335, 1, 1, "", "to_uppercase"], [1336, 1, 1, "", "zfill"]], "polars.Series.struct": [[1337, 1, 1, "", "field"], [1338, 3, 1, "", "fields"], [1339, 1, 1, "", "json_encode"], [1340, 1, 1, "", "rename_fields"], [1341, 3, 1, "", "schema"], [1342, 1, 1, "", "unnest"]], "polars.StringCache": [[57, 1, 1, "", "__init__"]], "polars.api": [[59, 4, 1, "", "register_dataframe_namespace"], [60, 4, 1, "", "register_expr_namespace"], [61, 4, 1, "", "register_lazyframe_namespace"], [62, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[198, 0, 1, "", "CatalogInfo"], [199, 0, 1, "", "ColumnInfo"], [200, 5, 1, "", "DataSourceFormat"], [201, 0, 1, "", "NamespaceInfo"], [202, 0, 1, "", "TableInfo"], [204, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[198, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[199, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[201, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[202, 1, 1, "", "__init__"], [203, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[334, 1, 1, "", "__iter__"], [335, 1, 1, "", "agg"], [336, 1, 1, "", "all"], [337, 1, 1, "", "count"], [338, 1, 1, "", "first"], [339, 1, 1, "", "head"], [340, 1, 1, "", "last"], [341, 1, 1, "", "len"], [342, 1, 1, "", "map_groups"], [343, 1, 1, "", "max"], [344, 1, 1, "", "mean"], [345, 1, 1, "", "median"], [346, 1, 1, "", "min"], [347, 1, 1, "", "n_unique"], [348, 1, 1, "", "quantile"], [349, 1, 1, "", "sum"], [350, 1, 1, "", "tail"]], "polars.datatypes": [[67, 0, 1, "", "Array"], [68, 0, 1, "", "Binary"], [69, 0, 1, "", "Boolean"], [70, 0, 1, "", "Categorical"], [71, 0, 1, "", "DataType"], [72, 0, 1, "", "Date"], [73, 0, 1, "", "Datetime"], [74, 0, 1, "", "Decimal"], [75, 0, 1, "", "Duration"], [76, 0, 1, "", "Enum"], [77, 0, 1, "", "Field"], [78, 0, 1, "", "Float32"], [79, 0, 1, "", "Float64"], [80, 0, 1, "", "Int128"], [81, 0, 1, "", "Int16"], [82, 0, 1, "", "Int32"], [83, 0, 1, "", "Int64"], [84, 0, 1, "", "Int8"], [85, 0, 1, "", "List"], [86, 0, 1, "", "Null"], [87, 0, 1, "", "Object"], [88, 0, 1, "", "String"], [89, 0, 1, "", "Struct"], [90, 0, 1, "", "Time"], [91, 0, 1, "", "UInt16"], [92, 0, 1, "", "UInt32"], [93, 0, 1, "", "UInt64"], [94, 0, 1, "", "UInt8"], [95, 0, 1, "", "Unknown"], [96, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[70, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[83, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[84, 1, 1, "", "__init__"]], "polars.datatypes.List": [[85, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[86, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[87, 1, 1, "", "__init__"]], "polars.datatypes.String": [[88, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[89, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[92, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[93, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[94, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[95, 1, 1, "", "__init__"]], "polars.exceptions": [[102, 6, 1, "", "CategoricalRemappingWarning"], [103, 6, 1, "", "ChronoFormatWarning"], [104, 6, 1, "", "ColumnNotFoundError"], [105, 6, 1, "", "ComputeError"], [106, 6, 1, "", "CustomUFuncWarning"], [107, 6, 1, "", "DataOrientationWarning"], [108, 6, 1, "", "DuplicateError"], [109, 6, 1, "", "InvalidOperationError"], [110, 6, 1, "", "MapWithoutReturnDtypeWarning"], [111, 6, 1, "", "ModuleUpgradeRequiredError"], [112, 6, 1, "", "NoDataError"], [113, 6, 1, "", "NoRowsReturnedError"], [114, 6, 1, "", "OutOfBoundsError"], [115, 6, 1, "", "PanicException"], [116, 6, 1, "", "ParameterCollisionError"], [117, 6, 1, "", "PerformanceWarning"], [118, 6, 1, "", "PolarsError"], [119, 6, 1, "", "PolarsInefficientMapWarning"], [120, 6, 1, "", "PolarsWarning"], [121, 6, 1, "", "RowsError"], [122, 6, 1, "", "SQLInterfaceError"], [123, 6, 1, "", "SQLSyntaxError"], [124, 6, 1, "", "SchemaError"], [125, 6, 1, "", "SchemaFieldNotFoundError"], [126, 6, 1, "", "ShapeError"], [127, 6, 1, "", "StringCacheMismatchError"], [128, 6, 1, "", "StructFieldNotFoundError"], [129, 6, 1, "", "TooManyRowsReturnedError"], [130, 6, 1, "", "UnstableWarning"], [131, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[142, 1, 1, "", "next_batches"]], "polars.io.parquet": [[143, 0, 1, "", "ParquetFieldOverwrites"]], "polars.io.parquet.ParquetFieldOverwrites": [[143, 1, 1, "", "__init__"]], "polars.io.partition": [[144, 0, 1, "", "BasePartitionContext"], [145, 0, 1, "", "KeyedPartition"], [146, 0, 1, "", "KeyedPartitionContext"]], "polars.io.partition.BasePartitionContext": [[144, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartition": [[145, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartitionContext": [[146, 1, 1, "", "__init__"]], "polars.io.plugins": [[147, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[945, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[945, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[946, 1, 1, "", "agg"], [947, 1, 1, "", "all"], [948, 1, 1, "", "count"], [949, 1, 1, "", "first"], [950, 1, 1, "", "head"], [951, 1, 1, "", "last"], [952, 1, 1, "", "len"], [953, 1, 1, "", "map_groups"], [954, 1, 1, "", "max"], [955, 1, 1, "", "mean"], [956, 1, 1, "", "median"], [957, 1, 1, "", "min"], [958, 1, 1, "", "n_unique"], [959, 1, 1, "", "quantile"], [960, 1, 1, "", "sum"], [961, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[962, 1, 1, "", "cancel"], [963, 1, 1, "", "fetch"], [964, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[149, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[976, 4, 1, "", "all"], [976, 4, 1, "", "alpha"], [976, 4, 1, "", "alphanumeric"], [976, 4, 1, "", "binary"], [976, 4, 1, "", "boolean"], [976, 4, 1, "", "by_dtype"], [976, 4, 1, "", "by_index"], [976, 4, 1, "", "by_name"], [976, 4, 1, "", "categorical"], [976, 4, 1, "", "contains"], [976, 4, 1, "", "date"], [976, 4, 1, "", "datetime"], [976, 4, 1, "", "decimal"], [976, 4, 1, "", "digit"], [976, 4, 1, "", "duration"], [976, 4, 1, "", "ends_with"], [976, 4, 1, "", "exclude"], [976, 4, 1, "", "expand_selector"], [976, 4, 1, "", "first"], [976, 4, 1, "", "float"], [976, 4, 1, "", "integer"], [976, 4, 1, "", "is_selector"], [976, 4, 1, "", "last"], [976, 4, 1, "", "matches"], [976, 4, 1, "", "numeric"], [976, 4, 1, "", "signed_integer"], [976, 4, 1, "", "starts_with"], [976, 4, 1, "", "string"], [976, 4, 1, "", "temporal"], [976, 4, 1, "", "time"], [976, 4, 1, "", "unsigned_integer"]], "polars.testing": [[176, 4, 1, "", "assert_frame_equal"], [177, 4, 1, "", "assert_frame_not_equal"], [178, 4, 1, "", "assert_series_equal"], [179, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[180, 0, 1, "", "column"], [181, 4, 1, "", "columns"], [182, 4, 1, "", "create_list_strategy"], [183, 4, 1, "", "dataframes"], [184, 4, 1, "", "dtypes"], [185, 4, 1, "", "lists"], [186, 4, 1, "", "load_profile"], [187, 4, 1, "", "series"], [188, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[180, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 12, 38, 39, 40, 41, 47, 49, 56, 62, 67, 77, 89, 97, 101, 103, 109, 133, 140, 147, 152, 153, 154, 155, 157, 158, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 187, 213, 215, 216, 227, 228, 231, 236, 239, 244, 245, 250, 256, 259, 260, 271, 278, 280, 284, 286, 288, 291, 294, 295, 302, 311, 314, 319, 321, 322, 323, 324, 325, 330, 331, 356, 394, 427, 459, 464, 484, 487, 507, 513, 517, 530, 547, 568, 597, 598, 610, 619, 624, 631, 632, 639, 640, 651, 658, 660, 693, 697, 705, 706, 707, 709, 711, 720, 721, 724, 725, 727, 734, 735, 736, 737, 741, 745, 747, 749, 757, 766, 767, 768, 769, 774, 781, 784, 787, 788, 797, 798, 800, 801, 807, 812, 813, 814, 815, 817, 819, 820, 822, 829, 831, 833, 834, 835, 841, 847, 851, 868, 870, 881, 891, 892, 896, 897, 907, 915, 920, 921, 927, 932, 933, 934, 935, 936, 939, 940, 953, 970, 975, 976, 980, 981, 982, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1081, 1082, 1084, 1085, 1087, 1088, 1089, 1091, 1092, 1093, 1096, 1097, 1100, 1102, 1104, 1105, 1106, 1109, 1117, 1119, 1120, 1121, 1122, 1127, 1128, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1140, 1141, 1143, 1144, 1146, 1148, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1373, 1378, 1382, 1386, 1389, 1396, 1397], "0": [1, 7, 9, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 47, 52, 53, 58, 59, 60, 62, 64, 66, 67, 74, 85, 97, 134, 140, 148, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 229, 230, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 250, 251, 255, 257, 258, 259, 262, 264, 265, 267, 268, 269, 270, 271, 274, 275, 276, 277, 280, 281, 282, 284, 286, 288, 290, 291, 292, 293, 294, 301, 302, 303, 304, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 324, 326, 327, 330, 332, 333, 335, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 356, 359, 360, 365, 367, 368, 370, 374, 375, 376, 377, 378, 379, 382, 383, 384, 387, 388, 390, 393, 403, 406, 408, 415, 417, 422, 425, 427, 428, 434, 435, 436, 437, 438, 439, 446, 447, 448, 452, 453, 454, 460, 461, 465, 469, 471, 472, 476, 480, 483, 485, 487, 490, 491, 493, 494, 498, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 516, 517, 519, 521, 522, 524, 526, 528, 532, 533, 535, 537, 540, 542, 543, 544, 545, 547, 549, 554, 555, 558, 561, 564, 565, 566, 572, 573, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 605, 610, 613, 616, 617, 618, 620, 622, 631, 632, 633, 634, 635, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 653, 654, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 687, 688, 689, 690, 694, 695, 696, 699, 704, 705, 706, 709, 710, 738, 749, 750, 751, 753, 754, 755, 757, 758, 762, 763, 764, 766, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 783, 785, 792, 796, 799, 805, 806, 808, 809, 810, 813, 816, 817, 818, 822, 824, 825, 827, 828, 829, 830, 834, 837, 838, 839, 840, 841, 842, 847, 851, 867, 868, 870, 871, 872, 873, 875, 877, 878, 880, 881, 883, 884, 886, 887, 888, 890, 891, 892, 895, 896, 900, 902, 903, 906, 907, 910, 912, 913, 915, 918, 919, 920, 925, 927, 928, 929, 932, 937, 939, 941, 942, 943, 946, 948, 949, 951, 953, 954, 955, 956, 957, 958, 959, 960, 970, 975, 976, 980, 987, 988, 989, 990, 991, 992, 993, 995, 997, 1000, 1006, 1016, 1017, 1019, 1021, 1028, 1041, 1050, 1051, 1053, 1056, 1057, 1058, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1079, 1083, 1088, 1089, 1090, 1092, 1094, 1098, 1102, 1105, 1109, 1112, 1113, 1115, 1116, 1120, 1123, 1126, 1128, 1129, 1130, 1131, 1136, 1141, 1144, 1149, 1150, 1152, 1155, 1156, 1158, 1161, 1164, 1166, 1167, 1168, 1169, 1172, 1173, 1180, 1181, 1184, 1187, 1190, 1191, 1192, 1198, 1199, 1211, 1212, 1215, 1217, 1218, 1219, 1220, 1221, 1225, 1226, 1232, 1233, 1239, 1242, 1244, 1245, 1246, 1251, 1252, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1280, 1281, 1282, 1283, 1286, 1287, 1288, 1291, 1296, 1297, 1298, 1301, 1302, 1306, 1312, 1330, 1343, 1345, 1346, 1348, 1351, 1353, 1354, 1355, 1356, 1361, 1362, 1363, 1373, 1378, 1382, 1388, 1390, 1391, 1392, 1395, 1396, 1398, 1399, 1401, 1403, 1404], "00": [28, 41, 73, 216, 223, 245, 326, 356, 455, 456, 459, 463, 474, 475, 477, 481, 482, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 663, 665, 667, 669, 671, 674, 676, 678, 734, 737, 741, 792, 793, 794, 795, 809, 837, 838, 839, 851, 870, 878, 892, 970, 976, 1073, 1074, 1077, 1078, 1079, 1081, 1082, 1083, 1089, 1090, 1094, 1096, 1097, 1098, 1099, 1103, 1104, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1312, 1326, 1329, 1333, 1396], "000": [9, 11, 28, 41, 54, 356, 1312, 1404], "0000": [318, 356, 1356, 1373, 1404], "000000": [411, 412, 487, 700, 1024, 1025, 1292], "00000001": [12, 765, 851], "0000001": 744, "00000010": [765, 851], "00000011": [765, 851], "00000100": [765, 851], "00001000": [765, 851], "00001010": [765, 851], "00001011": [765, 851], "0000e": 12, "0000ff": [411, 412, 700, 1024, 1025, 1292], "0001": 487, "000100": 487, "000101": 487, "0005": 976, "00050": 976, "000800": 1109, "001": [60, 744, 795, 1112, 1113, 1115, 1336], "002": [795, 1112, 1113, 1115], "005": [1123, 1373], "00prefix": 976, "00z": [734, 737, 1326, 1329], "01": [29, 58, 72, 73, 183, 216, 223, 243, 245, 260, 288, 326, 356, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 734, 736, 737, 741, 776, 789, 790, 791, 792, 793, 794, 795, 809, 851, 870, 878, 892, 897, 918, 970, 976, 1072, 1074, 1076, 1077, 1078, 1079, 1082, 1083, 1089, 1090, 1094, 1096, 1097, 1098, 1099, 1102, 1103, 1104, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1326, 1328, 1329, 1333, 1396, 1399], "010": [9, 739, 1331], "01000": 29, "01000010": [765, 851], "01000110": [765, 851], "012": [680, 717, 851, 1269, 1309, 1373], "0123": [744, 1336], "01234": [680, 851, 1269, 1373], "012345": 1109, "015625": [1242, 1373], "01\u00b2": [717, 1309], "02": [58, 216, 223, 243, 245, 288, 326, 356, 454, 456, 458, 464, 474, 475, 477, 481, 486, 487, 489, 492, 494, 498, 659, 663, 665, 667, 669, 671, 674, 676, 678, 679, 734, 736, 737, 741, 776, 789, 790, 791, 792, 793, 794, 795, 809, 851, 870, 878, 892, 918, 970, 976, 1019, 1074, 1076, 1078, 1079, 1082, 1083, 1089, 1090, 1094, 1096, 1097, 1098, 1102, 1103, 1104, 1107, 1108, 1111, 1114, 1116, 1117, 1215, 1326, 1328, 1329, 1333, 1396, 1397], "03": [58, 140, 152, 216, 245, 260, 288, 326, 356, 456, 458, 459, 464, 466, 474, 475, 477, 480, 481, 482, 484, 486, 487, 488, 489, 492, 494, 495, 498, 504, 517, 659, 663, 665, 667, 669, 671, 674, 676, 678, 736, 741, 789, 790, 791, 792, 793, 794, 795, 851, 870, 892, 897, 918, 970, 976, 1074, 1076, 1077, 1082, 1083, 1089, 1090, 1096, 1097, 1098, 1103, 1104, 1106, 1108, 1110, 1111, 1114, 1116, 1328, 1333], "037037": [1242, 1373], "04": [173, 216, 223, 245, 326, 356, 458, 459, 474, 475, 480, 481, 482, 484, 488, 489, 492, 494, 498, 663, 665, 667, 669, 671, 674, 676, 678, 734, 776, 789, 792, 793, 795, 851, 870, 878, 892, 970, 976, 1077, 1090, 1094, 1096, 1097, 1098, 1103, 1106, 1110, 1111, 1114, 1116, 1120, 1326, 1396], "047198": 1398, "05": [17, 173, 176, 177, 178, 179, 183, 216, 223, 326, 356, 454, 457, 458, 459, 460, 461, 465, 466, 469, 470, 471, 472, 474, 475, 476, 481, 483, 484, 485, 487, 488, 776, 789, 790, 792, 793, 870, 878, 970, 976, 1076, 1077, 1078, 1079, 1103, 1104, 1106, 1107, 1109, 1110, 1117, 1396, 1397, 1399], "050545": 140, "0522623626787952": [1173, 1373], "0545": [1078, 1079, 1107], "05t10": 1109, "06": [183, 216, 326, 356, 454, 458, 473, 479, 481, 482, 483, 495, 496, 789, 792, 809, 870, 970, 976, 1072, 1103, 1104, 1109, 1117], "060": [460, 461, 465, 469, 471, 472, 476, 483, 485], "0601749420166": [231, 356], "06293300616044681": [1123, 1373], "07": [17, 152, 183, 223, 356, 454, 457, 458, 470, 481, 482, 487, 495, 734, 789, 790, 792, 793, 801, 878, 970, 976, 1072, 1076, 1103, 1109, 1326, 1396, 1399], "071068": [223, 356, 878, 970], "08": [152, 176, 177, 178, 179, 223, 260, 288, 303, 356, 454, 458, 474, 475, 482, 487, 659, 734, 793, 795, 809, 851, 878, 897, 918, 970, 976, 1072, 1104, 1117, 1326, 1396, 1397], "085537": [1132, 1373], "09": [58, 152, 223, 288, 356, 454, 458, 474, 475, 487, 535, 639, 659, 738, 789, 790, 792, 839, 851, 878, 918, 970, 976, 1072, 1158, 1330, 1373], "090909": [640, 851], "094395": 1398, "098612": [594, 851, 1218, 1220, 1373, 1395], "0999": [457, 470], "0_": [41, 356], "0m": [463, 1081], "0x11bc0ad80": 975, "0\u00b5": 487, "1": [1, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 52, 53, 58, 59, 60, 61, 62, 64, 66, 67, 85, 89, 97, 104, 107, 108, 109, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 153, 156, 157, 158, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 187, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 415, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 606, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 702, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 720, 721, 722, 726, 727, 728, 729, 730, 731, 738, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 847, 851, 866, 867, 868, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 970, 976, 980, 981, 982, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1028, 1039, 1040, 1041, 1045, 1046, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1143, 1144, 1146, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1176, 1177, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1297, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1312, 1313, 1314, 1318, 1319, 1330, 1336, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1373, 1378, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1401, 1402, 1403, 1404], "10": [14, 17, 18, 28, 36, 38, 40, 41, 43, 44, 47, 58, 66, 140, 152, 153, 155, 167, 175, 213, 218, 223, 227, 233, 242, 243, 245, 247, 249, 250, 251, 256, 260, 263, 275, 279, 281, 286, 288, 294, 303, 307, 330, 335, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 368, 372, 380, 381, 382, 384, 436, 442, 445, 450, 454, 455, 457, 458, 460, 461, 463, 465, 469, 470, 471, 472, 474, 475, 476, 480, 481, 482, 483, 485, 487, 495, 498, 504, 525, 526, 527, 532, 539, 551, 559, 565, 567, 573, 583, 585, 587, 591, 593, 609, 611, 622, 637, 639, 640, 643, 653, 654, 659, 691, 739, 749, 752, 765, 776, 777, 785, 790, 792, 793, 796, 799, 801, 803, 811, 812, 836, 839, 851, 873, 874, 878, 881, 892, 893, 895, 897, 901, 911, 912, 918, 920, 930, 931, 939, 946, 949, 951, 954, 955, 956, 957, 958, 959, 960, 970, 976, 1054, 1068, 1072, 1073, 1075, 1076, 1081, 1091, 1103, 1109, 1117, 1120, 1123, 1129, 1151, 1163, 1177, 1185, 1193, 1199, 1209, 1211, 1213, 1217, 1219, 1223, 1239, 1252, 1271, 1273, 1331, 1344, 1351, 1353, 1356, 1373, 1382, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1399, 1404], "100": [11, 18, 28, 41, 54, 136, 139, 148, 152, 153, 154, 157, 161, 162, 163, 167, 171, 213, 261, 280, 299, 356, 487, 653, 654, 684, 698, 708, 710, 713, 722, 738, 794, 851, 898, 924, 970, 976, 1125, 1219, 1235, 1251, 1252, 1259, 1260, 1262, 1276, 1290, 1302, 1305, 1314, 1330, 1373, 1393, 1404], "1000": [154, 231, 312, 333, 356, 373, 851, 943, 970, 1112, 1219, 1350, 1373, 1404], "10000": [152, 258, 356], "100000": [11, 28], "1000000": [12, 1115], "1001": [333, 356, 943, 970], "1002": [333, 356, 943, 970], "10047419486152048166": [246, 356], "1005": [373, 851], "100_000": [54, 829, 902, 970], "100\u00b5": 487, "101": [9, 28, 261, 356, 458, 487, 739, 898, 970, 976, 1331, 1404], "101000": 458, "10101": [28, 1399], "1010101": 9, "101514": [223, 356, 878, 970], "102": [261, 356, 898, 970], "1024": [38, 47, 49, 52, 152, 153, 154, 162, 171, 356, 415, 970, 1028], "1040361802642717": [1173, 1373], "107149": 1398, "10734580197236529959": [1150, 1373], "1073741824": [685, 851], "10783150408545073287": [246, 356], "107_930_000": 1382, "10_000": [41, 356], "10i": [245, 356, 892, 970], "10m": [482, 495, 1104, 1117], "10t00": 487, "11": [11, 17, 47, 52, 175, 183, 214, 223, 260, 288, 356, 368, 474, 475, 477, 482, 495, 519, 532, 565, 616, 640, 649, 659, 661, 675, 691, 765, 809, 834, 839, 847, 851, 867, 873, 874, 878, 893, 897, 901, 912, 918, 931, 970, 976, 1099, 1104, 1117, 1223, 1258, 1373, 1391], "110": [227, 356, 722, 739, 881, 970, 1331], "1101441246220388612": [526, 851], "111": [11, 1393], "11111": 1105, "111110": 1105, "11111001": [765, 851], "11111010": [765, 851], "11111111": 11, "112": [685, 851, 1404], "11330": 182, "1152921504606846976": [1248, 1373], "116": 182, "11638928888656214026": [526, 851], "118034": [929, 970], "11aa": 1396, "11aabb": 1396, "11h": [455, 1073], "12": [27, 41, 58, 140, 152, 175, 183, 223, 245, 256, 260, 261, 288, 303, 326, 356, 368, 444, 454, 455, 457, 458, 462, 470, 473, 474, 475, 477, 478, 479, 480, 487, 496, 497, 504, 532, 565, 597, 613, 640, 648, 659, 675, 685, 699, 720, 738, 786, 789, 792, 793, 794, 809, 812, 837, 838, 839, 851, 878, 892, 893, 897, 898, 901, 918, 925, 931, 970, 976, 1073, 1075, 1076, 1088, 1089, 1091, 1095, 1102, 1109, 1129, 1223, 1268, 1291, 1313, 1330, 1373, 1395, 1396, 1397, 1399, 1401, 1404], "120": [261, 356, 795, 898, 970, 1398], "1200": [680, 851], "120134": [738, 1330], "121": 1404, "123": [9, 606, 699, 706, 721, 744, 841, 976, 1291, 1298, 1336, 1349, 1373], "123000": 976, "1232e": [1056, 1058, 1373], "1234": [28, 680, 851], "12345": [801, 1051, 1109, 1141, 1268, 1373], "1234500": 976, "123456": [9, 976], "1234567": 28, "123456780": 140, "12346": 801, "123465": 976, "123a123": 721, "123abc": [720, 1312, 1313], "125": [1, 41, 62, 356, 366, 644, 830, 851, 928, 970, 1239, 1242, 1373], "1252": 152, "127": [1361, 1373, 1392], "128": [60, 74, 80, 1239, 1373], "129": [685, 851], "13": [143, 217, 218, 223, 234, 235, 242, 261, 262, 275, 288, 330, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 368, 454, 460, 461, 465, 469, 471, 472, 476, 483, 485, 609, 611, 659, 738, 779, 785, 788, 792, 799, 835, 837, 840, 851, 871, 872, 878, 886, 887, 898, 900, 918, 939, 949, 951, 954, 955, 956, 957, 958, 959, 960, 970, 1072, 1104, 1117, 1118, 1223, 1330, 1373, 1392], "130": [261, 356, 898, 970], "13382926553367784577": [526, 851], "134821952": 1382, "134_821_952": 1382, "135": [773, 1398], "13614470193936745724": [526, 851], "13756996518000038261": [1150, 1373], "13d": 487, "13h": [455, 1073], "14": [40, 175, 223, 245, 261, 264, 288, 326, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 455, 460, 461, 465, 469, 471, 472, 476, 483, 485, 487, 532, 606, 649, 792, 837, 838, 851, 878, 892, 898, 918, 949, 951, 954, 955, 956, 957, 958, 959, 960, 970, 976, 1073, 1104, 1109], "140": [261, 356, 898, 970], "141592653589793": 11, "141593": [648, 851, 987, 1373, 1395, 1398], "142857": [1239, 1373], "143": [738, 1330, 1404], "1433": [39, 356], "1436e16": 183, "1438741209321515184": [246, 356], "1440": [492, 1114], "1443e235": 1404, "149": 1404, "14d": 976, "14h": 487, "15": [11, 41, 143, 175, 223, 245, 261, 264, 288, 356, 446, 450, 475, 480, 482, 487, 495, 504, 643, 659, 675, 717, 786, 792, 837, 838, 851, 878, 892, 898, 918, 970, 976, 1065, 1068, 1104, 1109, 1117, 1129, 1309, 1373, 1392, 1396], "150": [261, 356, 898, 970, 1260, 1373], "1500": [175, 186], "15000": [258, 356], "153061": [547, 851], "155": 148, "15836": 183, "15_000": [258, 356], "16": [1, 41, 60, 81, 91, 175, 189, 223, 245, 261, 288, 330, 356, 442, 445, 480, 487, 532, 613, 620, 639, 644, 659, 739, 749, 785, 795, 796, 799, 809, 851, 878, 892, 898, 918, 925, 939, 970, 976, 1104, 1117, 1239, 1281, 1331, 1345, 1373, 1392, 1395, 1396, 1401], "160": [261, 356, 898, 970], "165": [1104, 1117], "1656e15": [1058, 1373], "166667": [762, 851, 1239, 1362, 1373], "1666683077": 801, "1666683099": 801, "167": 58, "16996": 1404, "16h": 976, "17": [140, 175, 183, 231, 260, 335, 356, 504, 530, 639, 661, 679, 781, 801, 838, 851, 897, 946, 970, 1056, 1058, 1104, 1129, 1154, 1258, 1373, 1404], "170": [148, 261, 356, 898, 970], "17293822569102704640": [1248, 1373], "174": 1404, "175201": [689, 851, 1282, 1373], "1755e": [180, 183], "1764": 62, "17888890": [231, 356], "179": 1404, "17_500": [258, 356], "18": [39, 140, 157, 223, 272, 288, 356, 445, 482, 495, 498, 532, 622, 639, 659, 749, 851, 878, 908, 912, 918, 970, 976, 1109, 1120, 1390, 1401], "180": [148, 448, 648, 851, 1398], "1800": [480, 1102], "1844": 183, "18446744073709551614": [1248, 1373], "185_000_000": 1382, "186": 1404, "1875": [677, 851, 937, 970], "1897": [457, 470, 1075, 1091], "18d": 976, "19": [183, 260, 288, 356, 457, 482, 659, 665, 667, 669, 671, 738, 851, 897, 918, 970, 1075, 1104, 1117, 1330], "1920": 1396, "196": 1397, "1964": [912, 970], "1969": [1396, 1397], "1970": [72, 73, 173, 495, 1117, 1382], "1972": 1382, "1976": [468, 499], "1977": [468, 499], "1978": [460, 461, 465, 468, 469, 471, 472, 476, 483, 485, 499, 1397], "1979": [468, 499], "1980": 487, "1985": [790, 793], "1990": [152, 1382], "1993": 1382, "1994": 1382, "1995": 152, "1998": [477, 1099], "1999": [303, 356, 477, 487, 976, 1099, 1109, 1399], "199992": [902, 970], "199994": [902, 970], "199996": [902, 970], "199998": [902, 970], "1_000_000": [231, 356, 1127, 1373], "1_234_500": 976, "1d": [245, 260, 288, 326, 356, 456, 477, 482, 487, 489, 492, 495, 498, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 795, 811, 838, 839, 851, 892, 897, 918, 970, 976, 1074, 1082, 1089, 1099, 1104, 1108, 1111, 1114, 1117, 1129, 1373], "1e": [12, 176, 177, 178, 179, 535, 851, 1158, 1373], "1e6": 12, "1h": [245, 260, 288, 326, 356, 463, 477, 482, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1081, 1083, 1099, 1104, 1117, 1129, 1373], "1i": [245, 288, 326, 356, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 851, 892, 918, 970, 1129, 1373], "1m": [245, 260, 288, 326, 356, 477, 482, 494, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1099, 1104, 1112, 1113, 1115, 1116, 1117, 1129, 1373], "1mo": [245, 260, 288, 326, 356, 459, 474, 475, 477, 481, 482, 488, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1077, 1095, 1096, 1097, 1099, 1100, 1101, 1103, 1104, 1110, 1117, 1118, 1129, 1373], "1n": [245, 260, 288, 326, 356, 477, 482, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1099, 1104, 1117, 1129, 1373], "1q": [245, 260, 288, 326, 356, 477, 482, 495, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1099, 1104, 1117], "1st_col": 976, "1u": [245, 260, 288, 326, 356, 477, 482, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1099, 1104, 1117, 1129, 1373], "1w": [245, 260, 288, 326, 356, 477, 482, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1099, 1104, 1117, 1129, 1373], "1w2d": [790, 791], "1y": [245, 260, 288, 326, 356, 477, 482, 495, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1099, 1104, 1117], "1y2mo": [477, 1099], "1zy3": [699, 1291], "2": [1, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 66, 67, 85, 89, 104, 107, 109, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 155, 161, 162, 164, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 185, 197, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 370, 372, 373, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 414, 415, 417, 422, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 454, 455, 457, 458, 459, 460, 461, 462, 463, 466, 467, 470, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 613, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 825, 829, 830, 831, 832, 833, 834, 836, 839, 840, 841, 847, 851, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 970, 975, 976, 980, 981, 982, 985, 988, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1027, 1028, 1039, 1040, 1046, 1050, 1051, 1052, 1053, 1055, 1056, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1072, 1073, 1076, 1078, 1079, 1081, 1083, 1084, 1087, 1088, 1089, 1091, 1093, 1094, 1095, 1096, 1097, 1101, 1102, 1103, 1104, 1107, 1117, 1119, 1120, 1121, 1122, 1123, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1143, 1144, 1146, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1176, 1177, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1279, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1291, 1297, 1299, 1301, 1302, 1303, 1305, 1306, 1308, 1309, 1312, 1313, 1318, 1319, 1321, 1322, 1323, 1326, 1327, 1329, 1330, 1331, 1332, 1335, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1373, 1378, 1382, 1383, 1385, 1386, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1401, 1402, 1403, 1404], "20": [39, 40, 41, 67, 140, 152, 153, 157, 158, 160, 164, 167, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 213, 214, 223, 227, 233, 245, 249, 272, 279, 281, 286, 288, 303, 313, 314, 318, 326, 332, 337, 356, 380, 381, 382, 436, 450, 457, 460, 461, 465, 469, 470, 471, 472, 476, 482, 483, 485, 487, 495, 498, 519, 526, 532, 597, 605, 616, 643, 663, 665, 667, 669, 671, 674, 676, 678, 704, 738, 749, 764, 792, 801, 811, 830, 838, 851, 867, 878, 881, 884, 892, 908, 911, 918, 928, 942, 948, 970, 976, 1068, 1075, 1079, 1091, 1104, 1109, 1117, 1120, 1126, 1132, 1149, 1251, 1296, 1330, 1351, 1353, 1356, 1373, 1389, 1390, 1393, 1399, 1401], "200": [490, 491, 493, 653, 654, 851, 976, 1125, 1235, 1251, 1252, 1259, 1260, 1262, 1373, 1393], "2000": [457, 467, 470, 474, 475, 477, 976, 1075, 1085, 1091, 1096, 1097, 1099, 1105, 1382, 1396], "200000": [490, 902, 970], "200000000": 493, "2001": [17, 456, 457, 462, 464, 467, 470, 473, 477, 478, 479, 482, 486, 495, 496, 497, 498, 663, 665, 667, 669, 671, 674, 676, 678, 734, 851, 976, 1074, 1075, 1080, 1082, 1083, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1098, 1099, 1100, 1101, 1104, 1108, 1117, 1118, 1119, 1120, 1121, 1326], "2002": [152, 467, 477, 1085, 1099, 1121], "2003": [477, 801, 1099], "2004": [477, 1099], "2005": [477, 1099], "2006": [477, 1099], "2008": 1382, "200m": [490, 491, 493], "2010": [303, 356, 487, 976], "2011": [455, 1073], "2012": [455, 1073, 1399], "2013": 1102, "2016": [260, 356, 897, 970], "2017": [260, 356, 897, 970], "2018": [260, 356, 481, 897, 970, 1103], "2019": [260, 356, 897, 970], "202": 1397, "2020": [156, 168, 216, 223, 243, 260, 288, 356, 359, 454, 459, 463, 466, 481, 484, 487, 488, 489, 490, 491, 492, 493, 494, 504, 659, 734, 736, 737, 776, 851, 870, 878, 897, 918, 970, 976, 1072, 1077, 1081, 1084, 1103, 1106, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1129, 1326, 1328, 1329, 1373, 1397], "2021": [216, 223, 243, 245, 326, 356, 734, 811, 870, 878, 892, 970, 976, 1078, 1079, 1086, 1107, 1326, 1396], "2022": [58, 216, 223, 243, 356, 458, 482, 495, 734, 790, 791, 793, 794, 795, 801, 870, 878, 970, 976, 1076, 1086, 1104, 1117, 1326], "2023": [17, 41, 140, 175, 258, 356, 458, 795, 811, 976, 1076], "2024": [175, 454, 460, 461, 465, 466, 469, 471, 472, 476, 480, 483, 485, 639, 776, 789, 790, 792, 793, 795, 851, 976, 1072, 1084, 1102, 1396, 1399], "2025": [454, 466, 480, 776, 809, 976, 1072, 1084], "2026": 1397, "2030": 1396, "2031": 976, "2040": 487, "2047317070637311557": [246, 356], "2055938745": 140, "2065": [460, 461, 465, 469, 471, 472, 476, 483, 485], "2068": 183, "207": 1397, "2077": [303, 356, 487, 976, 1109, 1396, 1397], "2095": 183, "20_000": [41, 356], "20t08": 487, "20t18": 1109, "20word": 155, "21": [175, 223, 272, 305, 356, 446, 457, 503, 505, 506, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 792, 801, 809, 827, 828, 851, 878, 908, 970, 976, 1065, 1075, 1128, 1130, 1131, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1373, 1390], "213": 1404, "2147483647": 1404, "2147483648": [1221, 1373], "21d": 976, "22": [47, 52, 175, 183, 356, 462, 478, 482, 495, 497, 498, 661, 663, 665, 667, 669, 671, 674, 676, 678, 734, 792, 847, 851, 970, 976, 1104, 1117, 1120, 1258, 1326, 1373, 1396, 1397, 1404], "221": 1404, "2246e": [1281, 1345, 1373], "225": [482, 495, 1398], "22500": 829, "22_000_000": 1382, "22_500": 829, "23": [11, 134, 183, 223, 245, 288, 318, 356, 458, 462, 465, 478, 480, 482, 487, 497, 659, 663, 665, 667, 669, 671, 674, 676, 678, 792, 795, 837, 838, 839, 851, 878, 892, 918, 928, 970, 976, 1076, 1083, 1102, 1356, 1373, 1403, 1404], "230498": 12, "230498095872587": 12, "2304980958725870923": 12, "232338648": 1382, "2337": [41, 356], "234": 28, "2345": 976, "23456789": 11, "235": 1404, "23h": 976, "24": [60, 175, 245, 259, 260, 264, 288, 303, 326, 356, 444, 446, 462, 477, 478, 482, 489, 495, 497, 620, 659, 663, 665, 667, 669, 671, 674, 676, 678, 717, 790, 791, 793, 794, 795, 838, 839, 851, 892, 896, 897, 918, 970, 1065, 1099, 1104, 1111, 1117, 1172, 1347, 1373, 1396, 1403], "24030": 182, "249": [765, 851], "25": [1, 28, 41, 62, 140, 223, 227, 245, 250, 260, 288, 313, 318, 326, 330, 356, 415, 450, 462, 463, 478, 487, 497, 504, 644, 646, 649, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 758, 792, 793, 794, 795, 801, 809, 810, 813, 838, 839, 851, 878, 881, 892, 897, 905, 918, 937, 939, 970, 976, 1028, 1067, 1068, 1081, 1109, 1123, 1129, 1152, 1239, 1244, 1312, 1373, 1390, 1395, 1401, 1402], "250": [765, 851, 1260, 1373, 1393, 1404], "2500": [258, 318, 356], "254508": [504, 851, 1129, 1373], "255": 1404, "256": [264, 356, 415, 1028, 1239, 1373, 1395], "2560": 1028, "259921": [434, 851, 1050, 1373, 1395], "25_000_000": 1382, "26": [39, 41, 175, 180, 181, 182, 183, 187, 223, 356, 463, 496, 878, 970, 1081], "266667": [223, 356, 878, 970], "27": [1, 62, 313, 349, 356, 445, 473, 479, 496, 749, 776, 851, 960, 976, 1072, 1242, 1351, 1373, 1403, 1404], "270": 1398, "28": [309, 314, 356, 366, 481, 498, 851, 1103, 1120, 1353, 1373, 1396, 1398, 1403, 1404], "283185": [648, 851], "2846": 356, "285714": [533, 851, 1156, 1373], "289962": 1398, "28_341_469": 1382, "29": [17, 175, 455, 474, 1073, 1096], "29096": 1404, "290994": [929, 970], "292432": [988, 1373], "292893": [504, 851, 1129, 1373], "2_color_scal": [41, 356], "2d": [213, 288, 313, 314, 356, 477, 659, 811, 851, 918, 970, 1073, 1080], "2h": [663, 665, 667, 669, 671, 674, 676, 678, 851], "2i": [245, 356, 892, 970], "2m": [976, 1094], "2x": 182, "3": [1, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 53, 58, 59, 60, 61, 62, 66, 67, 85, 97, 104, 107, 109, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 155, 157, 161, 162, 163, 167, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 187, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 366, 367, 368, 369, 371, 382, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 479, 480, 481, 483, 484, 485, 486, 487, 488, 496, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 618, 619, 620, 621, 622, 623, 625, 627, 629, 630, 633, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 692, 693, 694, 697, 698, 700, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 735, 736, 741, 742, 744, 745, 746, 747, 748, 749, 750, 752, 756, 757, 760, 761, 762, 764, 765, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 851, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 946, 947, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 970, 975, 976, 981, 982, 985, 987, 989, 990, 991, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1076, 1077, 1080, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1091, 1093, 1094, 1095, 1100, 1103, 1105, 1106, 1108, 1109, 1110, 1112, 1113, 1115, 1119, 1120, 1122, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1143, 1144, 1146, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1176, 1177, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1290, 1292, 1293, 1294, 1297, 1298, 1299, 1302, 1303, 1304, 1305, 1307, 1308, 1312, 1313, 1314, 1315, 1316, 1320, 1327, 1328, 1333, 1334, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1352, 1353, 1354, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1373, 1378, 1382, 1383, 1385, 1386, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1401, 1402, 1403, 1404], "30": [41, 64, 164, 172, 213, 223, 233, 245, 249, 279, 286, 309, 330, 356, 359, 380, 381, 382, 450, 458, 460, 461, 465, 469, 471, 472, 473, 474, 476, 479, 481, 482, 483, 485, 487, 488, 495, 496, 526, 605, 685, 792, 809, 811, 837, 838, 851, 873, 878, 884, 892, 911, 912, 925, 939, 970, 976, 1068, 1076, 1096, 1103, 1104, 1109, 1110, 1117, 1149, 1373, 1378, 1389, 1390, 1393, 1395, 1396, 1398, 1399, 1402, 1404], "300": [309, 356, 525, 637, 654, 851, 976, 1252, 1259, 1260, 1262, 1373, 1393], "3000": 976, "3002": [457, 470, 1075, 1091], "30103": [593, 851, 1395], "3022416320763508302": [1150, 1373], "30_000": [41, 356], "30m": [245, 356, 482, 495, 892, 970, 1104, 1117], "30t16": 487, "31": [62, 67, 152, 153, 167, 176, 177, 178, 179, 223, 303, 356, 457, 458, 462, 470, 474, 477, 480, 488, 704, 734, 789, 792, 801, 811, 830, 878, 970, 976, 1073, 1075, 1076, 1080, 1091, 1096, 1102, 1109, 1110, 1126, 1251, 1296, 1326, 1373, 1397, 1399, 1401, 1404], "31t06": 1109, "32": [60, 72, 78, 82, 92, 255, 260, 288, 356, 597, 598, 620, 659, 685, 851, 897, 918, 970, 1069, 1100, 1239, 1263, 1373, 1390, 1396], "321": [28, 1404], "3212": [738, 1330], "321cba": 1396, "3265500": 976, "32971": [498, 1120], "32974": [498, 1120], "32976": [498, 1120], "32bit": [313, 356], "33": [223, 272, 356, 679, 851, 878, 908, 970, 1263, 1373, 1397], "333": [17, 680, 851, 1125, 1235, 1269, 1373], "33333": 1399, "333333": [251, 356, 622, 762, 809, 851, 895, 970, 1239, 1267, 1362, 1373, 1390], "34": [223, 356, 720, 734, 878, 970, 1313, 1326], "3420": [738, 1330], "343622": [690, 851], "345": [431, 432, 715, 716, 1045, 1046, 1307, 1308], "3450": [1269, 1373], "3456": 976, "34776706224699483": [1283, 1373], "35": [41, 356, 450, 487, 792, 851, 1068, 1373], "350": [356, 359, 525, 637, 851, 1260, 1373, 1378], "3500": [1269, 1373], "356": [462, 478, 497], "356194": [772, 773, 1398], "357": [462, 478, 497], "358": [462, 478, 497], "359": [462, 478, 497], "36": [223, 356, 878, 970, 1401], "360": [448, 648, 851, 1398], "361": 1404, "363961": [585, 1211], "366": [478, 1100], "37": [13, 143, 976], "370h": [504, 851, 1129, 1373], "37338": 1404, "38": [41, 140, 180, 183, 356], "38180177416060584": [672, 851, 1264, 1373], "381802": [672, 851, 1264, 1373], "386294": [594, 851, 1220, 1373, 1395], "389056": [508, 851, 1132, 1373, 1395], "39": [676, 801, 851], "39m": 976, "3_color_scal": [41, 356], "3d12h4m25": [245, 260, 288, 326, 356, 504, 659, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1129, 1373], "3f": [155, 734, 737, 1326, 1329], "3i": [245, 288, 356, 892, 970], "3rd": [1303, 1327], "3xy": [699, 1291], "4": [1, 8, 10, 14, 18, 26, 36, 38, 40, 41, 43, 44, 47, 58, 59, 60, 61, 62, 66, 67, 85, 107, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 153, 158, 160, 164, 167, 170, 171, 172, 175, 187, 211, 212, 213, 214, 215, 216, 217, 218, 222, 224, 228, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 267, 268, 269, 272, 274, 275, 276, 278, 279, 280, 281, 284, 288, 290, 291, 298, 299, 302, 306, 307, 308, 309, 310, 311, 314, 317, 319, 320, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 370, 372, 384, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 408, 415, 426, 427, 428, 431, 432, 434, 435, 436, 440, 441, 444, 445, 446, 448, 451, 458, 461, 462, 470, 478, 479, 480, 481, 483, 484, 487, 489, 492, 494, 497, 501, 502, 504, 508, 509, 511, 512, 513, 515, 516, 517, 520, 521, 522, 523, 524, 527, 529, 531, 532, 533, 534, 544, 545, 549, 550, 551, 558, 559, 560, 561, 562, 564, 565, 567, 575, 577, 578, 579, 580, 581, 582, 583, 587, 588, 593, 596, 597, 598, 618, 620, 622, 623, 625, 627, 629, 630, 633, 634, 635, 638, 639, 641, 642, 643, 644, 647, 649, 653, 654, 655, 656, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 684, 687, 691, 692, 693, 694, 697, 699, 703, 706, 709, 711, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 732, 733, 734, 735, 739, 744, 745, 747, 748, 749, 750, 752, 755, 756, 757, 758, 764, 765, 767, 769, 770, 772, 773, 774, 775, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 796, 798, 799, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 847, 851, 866, 867, 868, 870, 871, 872, 873, 874, 877, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 908, 909, 911, 912, 913, 915, 918, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 942, 943, 946, 947, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 970, 975, 976, 980, 985, 988, 995, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1028, 1039, 1040, 1045, 1046, 1051, 1052, 1054, 1060, 1065, 1067, 1069, 1079, 1083, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1101, 1103, 1106, 1111, 1114, 1116, 1118, 1119, 1126, 1129, 1133, 1134, 1136, 1137, 1143, 1144, 1146, 1151, 1152, 1155, 1156, 1157, 1158, 1159, 1163, 1166, 1167, 1168, 1169, 1171, 1177, 1184, 1185, 1186, 1187, 1188, 1193, 1197, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1213, 1214, 1229, 1232, 1233, 1236, 1239, 1240, 1241, 1242, 1246, 1247, 1251, 1252, 1253, 1256, 1257, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1272, 1276, 1277, 1280, 1283, 1284, 1285, 1289, 1291, 1295, 1298, 1301, 1303, 1307, 1308, 1310, 1311, 1316, 1318, 1319, 1324, 1325, 1326, 1327, 1331, 1336, 1337, 1340, 1342, 1344, 1350, 1353, 1355, 1357, 1358, 1364, 1373, 1378, 1382, 1383, 1385, 1386, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1401, 1402, 1403, 1404], "40": [41, 213, 223, 233, 260, 279, 356, 482, 487, 495, 526, 591, 738, 749, 851, 878, 897, 911, 970, 976, 1086, 1117, 1217, 1330, 1389, 1390, 1393, 1396], "400": [325, 356, 490, 491, 493, 936, 970, 1259, 1260, 1262, 1373, 1393], "4000000": [1127, 1373], "400157": 97, "404": [261, 356, 705, 707, 898, 970, 1297, 1299], "4096": 1395, "41": [223, 356, 676, 851, 878, 970, 1390, 1404], "412277": 183, "414214": [694, 851, 1286, 1373, 1395], "4160": 62, "416147": 1398, "4164": [260, 356, 897, 970], "4180": 152, "42": [62, 143, 223, 246, 272, 288, 356, 487, 659, 851, 878, 908, 918, 970, 1150, 1373, 1389, 1403], "424778": [648, 851], "428571": [503, 851, 1128, 1373], "429101": 1390, "4294967296": [47, 356], "43": [223, 288, 356, 445, 659, 676, 851, 878, 918, 970], "4321": 976, "433013": [673, 851, 929, 970], "44": [11, 272, 356, 451, 851, 908, 970], "4411": [260, 356, 897, 970], "44225": [1050, 1373], "444": 11, "44444444444": 11, "45": [41, 223, 288, 356, 458, 482, 495, 659, 676, 699, 706, 746, 773, 792, 811, 837, 838, 851, 878, 918, 970, 976, 1076, 1104, 1109, 1117, 1158, 1291, 1298, 1339, 1373, 1395, 1396, 1398, 1402, 1404], "450": [1260, 1373], "45000": 829, "4500000": 976, "456": [9, 11, 458, 976, 1076, 1349, 1373], "456000": [458, 1076], "456001\u00b5": 976, "4566": [260, 356, 897, 970], "456789": [487, 976, 1105], "456789\u00b5": 976, "456m": 976, "457658": 1398, "459148": [500, 851], "46": 976, "4696": [260, 356, 897, 970], "47": [58, 223, 356, 676, 851, 878, 970, 976, 1390], "470": [912, 970], "47033": [672, 851, 1264, 1373], "47033046033698594": [672, 851, 1264, 1373], "475": [912, 970], "48": [13, 183, 288, 356, 659, 749, 851, 918, 970, 976], "4827": [260, 356, 897, 970], "485": 1404, "49": [223, 356, 878, 970, 976], "492474": [504, 851, 1129, 1373], "498": [261, 356, 898, 970], "4_500_000": 976, "4ab4a": 1396, "4d": [504, 851, 1129, 1373], "4f6228": [41, 356], "4f71": [41, 356], "4x": [257, 356], "5": [1, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 36, 38, 40, 43, 44, 47, 53, 58, 59, 61, 62, 66, 107, 133, 136, 137, 138, 139, 140, 142, 153, 175, 176, 178, 181, 183, 187, 212, 213, 216, 217, 218, 223, 224, 227, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 247, 248, 250, 251, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 267, 268, 269, 274, 275, 276, 278, 280, 281, 282, 284, 288, 291, 298, 299, 302, 303, 306, 307, 308, 309, 310, 311, 313, 314, 317, 318, 320, 323, 324, 325, 326, 329, 330, 332, 333, 335, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 366, 367, 370, 385, 386, 391, 392, 393, 395, 397, 401, 406, 408, 414, 415, 426, 427, 428, 431, 432, 435, 436, 446, 447, 448, 450, 451, 454, 457, 458, 459, 460, 461, 465, 466, 469, 470, 471, 472, 476, 481, 483, 484, 485, 487, 488, 494, 498, 502, 504, 506, 507, 510, 512, 516, 517, 521, 522, 524, 527, 529, 532, 534, 535, 538, 541, 542, 543, 544, 545, 549, 551, 558, 561, 562, 564, 565, 567, 570, 572, 573, 577, 578, 579, 580, 581, 582, 586, 587, 591, 597, 618, 620, 622, 634, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 670, 673, 675, 676, 677, 678, 679, 682, 693, 699, 709, 710, 711, 714, 715, 716, 735, 739, 750, 752, 756, 757, 758, 762, 770, 772, 773, 775, 776, 777, 778, 779, 781, 783, 785, 786, 787, 788, 789, 790, 792, 795, 796, 797, 798, 799, 803, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 829, 830, 832, 834, 835, 836, 840, 841, 847, 851, 866, 870, 871, 872, 873, 874, 878, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 905, 906, 912, 915, 918, 924, 925, 926, 927, 928, 929, 930, 931, 935, 936, 938, 939, 942, 943, 946, 948, 949, 950, 951, 954, 955, 956, 957, 958, 959, 960, 961, 970, 976, 985, 988, 992, 995, 998, 999, 1002, 1004, 1005, 1006, 1008, 1010, 1014, 1019, 1020, 1021, 1027, 1028, 1039, 1040, 1045, 1052, 1054, 1061, 1065, 1066, 1067, 1068, 1069, 1072, 1075, 1076, 1077, 1078, 1079, 1080, 1084, 1091, 1103, 1105, 1106, 1107, 1109, 1110, 1116, 1118, 1119, 1120, 1126, 1129, 1131, 1133, 1134, 1135, 1146, 1151, 1152, 1155, 1157, 1158, 1162, 1165, 1177, 1184, 1187, 1188, 1193, 1196, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1212, 1213, 1217, 1221, 1229, 1236, 1239, 1240, 1241, 1244, 1245, 1246, 1247, 1252, 1253, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1266, 1268, 1270, 1272, 1277, 1283, 1286, 1291, 1301, 1302, 1303, 1306, 1307, 1327, 1331, 1344, 1351, 1353, 1356, 1357, 1358, 1361, 1362, 1364, 1373, 1378, 1383, 1386, 1388, 1390, 1391, 1392, 1395, 1396, 1397, 1398, 1401, 1403, 1404], "50": [13, 28, 41, 213, 223, 233, 243, 356, 436, 482, 487, 495, 790, 791, 851, 878, 970, 976, 1054, 1067, 1117, 1312, 1373, 1389, 1390], "500": [41, 325, 356, 359, 460, 461, 465, 469, 471, 472, 476, 483, 485, 936, 970, 1090, 1092, 1098, 1259, 1260, 1262, 1373, 1378], "5000": [318, 356, 1356, 1373], "50000": 153, "500000": [469, 1090], "500000000": [476, 1098], "5000555": 976, "500_000": [460, 461, 465, 469, 471, 472, 476, 483, 485], "500m": [1090, 1092, 1098], "51": 976, "512": [47, 154, 257, 356, 415, 644, 851, 1028, 1239, 1373], "51966": [739, 1331], "52": [330, 356, 496, 679, 851, 939, 970], "523599": 1398, "527525": [1265, 1373], "53": [496, 1118, 1401], "533316061": 1382, "533_316_061": 1382, "54": [508, 851, 1173, 1373, 1395, 1404], "540": [448, 648, 851], "540302": 1398, "543": 9, "543081": [438, 851, 1057, 1373], "5432": 154, "54321": 9, "544": 1404, "544705": 781, "549306": [992, 1373], "55": [41, 60, 356, 530, 535, 851, 1154, 1373, 1392, 1396, 1397], "5555": 976, "55550": 976, "56": [140, 720, 753, 851, 1313], "566371": [648, 851], "567": 28, "56789": [1051, 1141, 1268, 1373], "57": [676, 851, 1268, 1373, 1398, 1404], "570796": [374, 376, 851, 987, 989, 1373, 1398], "575050513": [180, 183], "58": [148, 280, 356], "581139": [1067, 1373], "584963": [592, 851], "587401": [434, 851, 1395], "59": [140, 223, 356, 458, 472, 480, 483, 487, 517, 792, 837, 838, 839, 851, 878, 970, 976, 1076, 1094, 1102, 1105], "59815": [508, 851, 1395], "5_000_555": 976, "5th": [41, 356], "6": [1, 8, 10, 14, 36, 38, 40, 41, 43, 44, 45, 46, 47, 57, 59, 61, 66, 98, 100, 107, 133, 136, 137, 138, 139, 157, 161, 162, 175, 212, 213, 216, 219, 220, 224, 225, 226, 228, 229, 230, 232, 233, 236, 239, 240, 241, 242, 243, 245, 247, 249, 250, 251, 253, 255, 256, 257, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 273, 274, 277, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 296, 299, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 320, 322, 323, 324, 326, 327, 328, 329, 330, 332, 333, 339, 349, 350, 356, 359, 360, 361, 366, 370, 391, 392, 393, 395, 401, 427, 428, 431, 432, 444, 445, 451, 454, 458, 462, 466, 473, 477, 478, 479, 490, 491, 493, 496, 497, 500, 502, 511, 512, 517, 521, 527, 529, 532, 551, 552, 553, 562, 565, 578, 579, 580, 581, 585, 598, 634, 638, 645, 648, 649, 650, 655, 657, 659, 662, 664, 666, 668, 670, 673, 675, 676, 677, 679, 682, 687, 693, 699, 704, 715, 716, 739, 750, 752, 757, 765, 767, 769, 776, 778, 783, 785, 786, 787, 789, 792, 796, 799, 805, 812, 813, 817, 830, 834, 841, 847, 851, 866, 870, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 888, 889, 890, 892, 893, 895, 896, 897, 898, 899, 901, 902, 910, 912, 914, 915, 916, 918, 919, 920, 922, 924, 925, 926, 927, 928, 931, 934, 935, 938, 939, 942, 943, 950, 960, 961, 970, 976, 1002, 1004, 1005, 1006, 1008, 1014, 1045, 1052, 1056, 1058, 1063, 1064, 1069, 1072, 1084, 1099, 1109, 1119, 1126, 1133, 1146, 1152, 1158, 1178, 1179, 1188, 1191, 1204, 1205, 1206, 1207, 1211, 1229, 1243, 1246, 1247, 1253, 1255, 1261, 1263, 1265, 1267, 1272, 1277, 1280, 1291, 1296, 1307, 1331, 1343, 1353, 1373, 1378, 1383, 1386, 1388, 1390, 1391, 1395, 1401, 1402, 1404], "60": [41, 213, 233, 280, 356, 465, 471, 472, 483, 494, 517, 676, 734, 851, 1100, 1105, 1116, 1248, 1326, 1373, 1398], "600": [325, 356, 490, 491, 493, 936, 970, 976], "60000": 469, "600000": 976, "60000000": 476, "60206": [593, 851, 1395], "605551": 832, "605551275463989": 832, "609438": 1395, "60_000": [460, 461, 465, 469, 471, 472, 476, 483, 485], "61": [280, 356], "625": [670, 851], "626172": [701, 1293], "63": [676, 851], "63204": 1404, "6331e16": [1345, 1373, 1398], "636253": 1398, "64": [1, 60, 62, 73, 75, 79, 83, 90, 93, 174, 211, 318, 356, 439, 620, 644, 851, 1239, 1242, 1373, 1395], "64030": [739, 1331], "642093": 1398, "647961": 183, "64bit": [175, 651, 851, 1248, 1373], "65": [227, 356, 881, 970, 1123, 1373], "650": [525, 637, 851], "65280": [739, 1331], "654": [28, 830, 928, 970], "65432": 1399, "654321": 606, "65536": 1395, "65552": [414, 1027], "66": [260, 325, 356, 676, 765, 851, 897, 936, 970, 1173, 1263, 1373], "663053": 140, "666": 976, "666000": 976, "666667": [223, 251, 327, 344, 356, 503, 809, 810, 816, 851, 878, 895, 937, 955, 970, 1128, 1373], "666f6f": [701, 1293], "67500": 829, "676": [261, 356, 898, 970], "678": [699, 706, 1291, 1298], "6789": [29, 976], "67890": 29, "686241": 1390, "69": [676, 851, 1173, 1373], "693147": [594, 851, 1218, 1220, 1373, 1395], "6_000_000": 1382, "7": [1, 17, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 53, 59, 61, 66, 157, 161, 162, 175, 190, 212, 216, 219, 220, 221, 223, 225, 226, 229, 230, 232, 236, 239, 241, 245, 247, 249, 251, 259, 263, 266, 268, 270, 272, 273, 277, 280, 282, 285, 286, 288, 289, 291, 292, 293, 294, 296, 299, 301, 304, 305, 306, 307, 312, 314, 315, 316, 324, 326, 327, 328, 356, 359, 360, 366, 370, 392, 393, 395, 404, 445, 457, 458, 462, 470, 478, 481, 482, 487, 495, 497, 508, 521, 527, 532, 533, 551, 565, 578, 579, 580, 581, 638, 639, 649, 655, 659, 675, 676, 693, 709, 738, 752, 776, 785, 786, 789, 792, 793, 799, 804, 812, 813, 830, 834, 841, 851, 870, 875, 876, 878, 880, 883, 885, 888, 890, 892, 893, 895, 896, 901, 908, 910, 913, 916, 918, 919, 920, 924, 928, 931, 970, 976, 992, 1005, 1006, 1008, 1017, 1075, 1076, 1080, 1086, 1091, 1103, 1104, 1109, 1117, 1119, 1132, 1156, 1172, 1191, 1204, 1205, 1206, 1207, 1252, 1253, 1266, 1272, 1301, 1330, 1373, 1378, 1383, 1388, 1390, 1391, 1392, 1395, 1397, 1401, 1404], "70": [223, 356, 765, 793, 851, 878, 970, 1173, 1373, 1390], "700": [325, 356, 936, 970], "702963": [41, 356], "7051579356916758811": 169, "707107": [403, 505, 673, 674, 772, 851, 1016, 1130, 1373, 1398], "712389": 1398, "714": 1404, "714286": [533, 851, 1156, 1373], "718281828459045": [11, 500, 592, 851, 1123, 1218, 1373], "718282": [508, 851, 1132, 1373, 1395], "720": [448, 648, 851], "7264": 1404, "732051": [1286, 1373], "7415e16": 183, "742": [261, 356, 898, 970], "75": [41, 223, 227, 356, 370, 638, 646, 649, 662, 664, 666, 668, 673, 675, 677, 809, 813, 851, 878, 881, 970, 976, 1067, 1152, 1173, 1244, 1312, 1373, 1390, 1398, 1404], "7500": [258, 356], "7508": 1404, "754": [758, 851], "754888": [500, 851], "761594": [754, 851, 1346, 1373], "764052": 97, "7654": 976, "765431": 1105, "7654321": 28, "76933c": [41, 356], "77": 1109, "78": [9, 148, 720, 1313], "780": 9, "784": [260, 356, 897, 970], "785398": [378, 772, 773, 851, 991, 1373, 1398], "789": [11, 976], "79": [1173, 1373], "7d": 976, "8": [1, 12, 36, 38, 40, 43, 44, 45, 46, 47, 49, 58, 59, 61, 62, 66, 84, 88, 94, 161, 162, 175, 212, 216, 219, 220, 221, 223, 225, 226, 228, 229, 230, 232, 236, 239, 241, 243, 247, 249, 256, 259, 260, 261, 263, 264, 266, 268, 270, 273, 282, 285, 286, 288, 289, 291, 292, 293, 294, 296, 299, 301, 303, 304, 305, 307, 312, 314, 315, 316, 324, 327, 328, 330, 356, 370, 372, 384, 392, 393, 395, 442, 445, 446, 458, 487, 521, 528, 532, 533, 559, 561, 565, 578, 579, 580, 581, 620, 638, 639, 644, 649, 655, 656, 661, 679, 685, 691, 693, 717, 718, 719, 734, 744, 765, 770, 776, 781, 783, 786, 788, 796, 798, 803, 804, 807, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 830, 832, 835, 836, 840, 851, 870, 875, 876, 878, 880, 882, 883, 885, 888, 890, 893, 896, 897, 898, 901, 902, 912, 916, 919, 920, 924, 928, 931, 939, 970, 976, 1005, 1006, 1008, 1058, 1065, 1086, 1152, 1156, 1172, 1185, 1187, 1191, 1204, 1205, 1206, 1207, 1239, 1242, 1253, 1256, 1258, 1261, 1263, 1265, 1267, 1268, 1310, 1311, 1326, 1373, 1382, 1383, 1388, 1390, 1391, 1392, 1395, 1396, 1397, 1401, 1404], "80": [41, 227, 356, 881, 970], "800": [490, 491, 493, 1109], "8000": 154, "803065983": 140, "81": 1395, "814697265625": [1127, 1373], "816497": [304, 356], "8192": 152, "82": [260, 356, 897, 970], "8257e14": 1404, "83": [260, 356, 897, 970], "833": [260, 356, 897, 970], "833333": [344, 955], "848062": 1398, "848808": 183, "85": [41, 148, 356, 1173, 1373, 1404], "850": [525, 637, 851], "8568409950394724": [1123, 1373], "8589934592": [685, 851], "86": 1404, "8601": 1396, "87": 1404, "876": 9, "877809": 1390, "88": [223, 356, 878, 970], "881374": [377, 851, 990, 1373], "888": [830, 928, 970], "8_000_000": 1382, "8a": [1024, 1025], "8nin": 1404, "9": [1, 9, 36, 38, 40, 41, 43, 44, 47, 52, 53, 58, 66, 212, 221, 223, 236, 238, 247, 251, 259, 261, 263, 264, 280, 288, 290, 291, 294, 306, 307, 324, 328, 330, 349, 356, 366, 370, 372, 384, 392, 393, 395, 400, 402, 442, 445, 448, 458, 487, 513, 521, 532, 539, 559, 565, 576, 584, 622, 638, 639, 648, 655, 659, 660, 661, 672, 675, 676, 687, 691, 706, 738, 746, 749, 779, 785, 786, 789, 792, 804, 839, 851, 878, 888, 893, 895, 896, 898, 901, 918, 920, 931, 939, 960, 970, 976, 1000, 1001, 1005, 1006, 1008, 1013, 1015, 1067, 1080, 1090, 1092, 1098, 1104, 1117, 1118, 1163, 1172, 1185, 1191, 1202, 1210, 1253, 1257, 1258, 1264, 1266, 1268, 1280, 1298, 1330, 1339, 1373, 1382, 1383, 1388, 1390, 1391, 1392, 1401], "90": [223, 261, 356, 738, 878, 898, 970, 1330, 1390, 1398], "90000": 829, "901234": [1051, 1141, 1268, 1373], "909": [260, 356, 897, 970], "910": [260, 356, 706, 897, 970, 1298], "910t": [699, 706, 1291, 1298], "914": [260, 356, 897, 970], "9223372036854775807": [761, 851], "9223372036854775808": [595, 851], "927295": 1398, "928571": [506, 851, 1131, 1373], "93": [1173, 1373], "94": [367, 851], "9477376373212048": [1173, 1373], "95": [18, 367, 851, 976], "95b3d7": [41, 356], "96": [18, 223, 356, 367, 851, 878, 970, 1173, 1373], "961": 62, "963624": [505, 851, 1130, 1373], "964028": [280, 356], "96_067_179": 1382, "97": [18, 250, 356, 367, 851, 1173, 1373], "9774092659964970114": [526, 851], "978307200": [464, 1082], "978307200000": 486, "978307200000000": [464, 486, 1082, 1108], "978307200000000000": 1108, "978393600": [464, 1082], "978393600000": 486, "978393600000000": [464, 486, 1082, 1108], "978393600000000000": 1108, "978480000": [464, 1082], "978480000000": 486, "978480000000000": [464, 486, 1082, 1108], "978480000000000000": 1108, "978738": 97, "98": [18, 250, 280, 356, 426, 520, 523, 692, 738, 756, 851, 1330], "987": [28, 606], "987000": 976, "9876": 9, "987654": [28, 976], "987654321": 11, "9876543210": 140, "987m": 976, "988": 11, "99": [18, 41, 234, 235, 250, 253, 280, 325, 356, 367, 426, 510, 512, 520, 523, 692, 756, 851, 886, 887, 936, 970, 1109, 1123, 1135, 1373, 1395], "9914e218": 183, "998347": [280, 356], "999": [457, 470, 976, 1075, 1091, 1393, 1404], "999000": 976, "999954": [280, 356], "999999": [480, 744, 792, 837, 838, 839, 976, 1102, 1109, 1336], "999999\u00b5": 976, "9bbb59": [41, 356], "A": [14, 38, 41, 47, 49, 52, 53, 54, 55, 64, 65, 70, 76, 132, 140, 145, 147, 152, 153, 154, 155, 167, 169, 174, 189, 220, 227, 228, 229, 234, 235, 238, 245, 260, 265, 267, 269, 274, 280, 306, 309, 324, 325, 326, 330, 331, 356, 361, 365, 432, 452, 453, 458, 484, 487, 501, 502, 510, 511, 512, 522, 524, 537, 540, 542, 543, 549, 589, 596, 597, 610, 624, 633, 634, 656, 662, 664, 666, 668, 670, 673, 675, 677, 697, 698, 699, 705, 706, 707, 708, 709, 710, 711, 714, 716, 720, 721, 722, 724, 735, 744, 779, 795, 796, 800, 851, 876, 881, 882, 883, 886, 887, 892, 897, 903, 916, 936, 939, 940, 970, 976, 1046, 1070, 1071, 1076, 1106, 1109, 1125, 1135, 1136, 1137, 1235, 1259, 1260, 1262, 1265, 1266, 1267, 1289, 1290, 1291, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1306, 1308, 1312, 1313, 1314, 1316, 1327, 1336, 1373, 1382, 1383, 1386, 1399, 1401], "AND": [261, 356, 766, 767, 830, 898, 970, 976, 1392], "ANDs": [417, 851, 1030, 1373], "AS": [303, 356, 830, 831, 928, 970, 1382, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1401, 1403], "And": [742, 1334], "As": [13, 57, 98, 100, 133, 135, 136, 137, 139, 157, 161, 162, 171, 236, 284, 313, 318, 356, 589, 841, 888, 915, 970], "At": [47, 49, 50, 51, 52, 64, 65, 280, 356, 873, 874, 884, 912, 925, 970], "BY": [830, 928, 970, 1382, 1385, 1391, 1400, 1401], "Be": 970, "By": [5, 13, 15, 31, 34, 58, 152, 153, 167, 245, 259, 260, 265, 288, 290, 299, 304, 326, 327, 356, 401, 477, 482, 495, 582, 585, 591, 639, 654, 659, 663, 665, 667, 669, 671, 674, 676, 678, 684, 695, 763, 783, 790, 791, 793, 794, 795, 811, 832, 838, 839, 840, 851, 873, 892, 896, 897, 903, 918, 924, 929, 937, 970, 1014, 1099, 1104, 1117, 1208, 1252, 1276, 1287, 1363, 1373], "For": [15, 40, 41, 53, 54, 55, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 213, 227, 228, 231, 233, 259, 260, 280, 288, 313, 342, 356, 359, 474, 475, 487, 503, 505, 506, 517, 589, 598, 610, 651, 690, 697, 705, 706, 707, 709, 711, 735, 785, 795, 799, 800, 841, 847, 851, 881, 882, 897, 918, 953, 970, 1109, 1127, 1128, 1130, 1131, 1134, 1223, 1248, 1283, 1289, 1297, 1298, 1299, 1301, 1303, 1327, 1351, 1373, 1378], "IF": 1394, "If": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 63, 64, 65, 74, 133, 134, 135, 136, 137, 138, 139, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 184, 185, 186, 197, 211, 213, 216, 228, 233, 236, 243, 245, 247, 255, 256, 257, 259, 260, 263, 264, 269, 276, 280, 284, 288, 290, 291, 292, 296, 299, 301, 303, 306, 307, 310, 311, 313, 314, 320, 321, 323, 324, 325, 356, 359, 369, 371, 389, 394, 401, 406, 414, 428, 454, 458, 459, 466, 474, 475, 484, 487, 513, 528, 534, 539, 547, 552, 553, 557, 568, 577, 582, 583, 586, 589, 597, 598, 605, 606, 612, 614, 639, 644, 645, 646, 649, 651, 653, 654, 655, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 684, 686, 690, 691, 696, 706, 707, 709, 711, 712, 713, 724, 725, 726, 727, 729, 730, 731, 734, 735, 736, 737, 741, 744, 751, 762, 766, 768, 771, 775, 776, 777, 780, 781, 783, 785, 790, 791, 793, 794, 795, 798, 799, 805, 806, 807, 809, 810, 811, 813, 817, 823, 826, 827, 828, 833, 834, 835, 838, 839, 841, 842, 851, 873, 874, 884, 888, 892, 896, 897, 902, 907, 912, 914, 915, 916, 918, 922, 924, 925, 926, 928, 933, 935, 936, 945, 953, 963, 970, 975, 976, 983, 984, 998, 999, 1002, 1007, 1014, 1017, 1019, 1027, 1041, 1054, 1072, 1076, 1077, 1084, 1096, 1097, 1106, 1109, 1134, 1151, 1152, 1157, 1163, 1172, 1173, 1177, 1178, 1179, 1183, 1194, 1203, 1208, 1209, 1212, 1215, 1223, 1242, 1243, 1244, 1246, 1248, 1251, 1252, 1253, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1270, 1272, 1274, 1276, 1279, 1283, 1284, 1288, 1298, 1299, 1301, 1303, 1304, 1305, 1312, 1316, 1317, 1318, 1319, 1321, 1322, 1323, 1326, 1327, 1328, 1329, 1333, 1336, 1343, 1344, 1347, 1348, 1351, 1353, 1362, 1373, 1378, 1382, 1383, 1385, 1393, 1396, 1401], "In": [58, 65, 154, 156, 168, 169, 172, 183, 187, 207, 212, 231, 233, 236, 245, 260, 261, 264, 276, 280, 288, 314, 323, 356, 359, 597, 639, 659, 720, 721, 841, 851, 874, 892, 897, 898, 918, 935, 970, 1127, 1134, 1242, 1247, 1313, 1373, 1378], "It": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 65, 74, 80, 97, 99, 100, 132, 143, 144, 145, 146, 147, 148, 156, 162, 164, 165, 167, 168, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 209, 223, 261, 265, 272, 279, 303, 313, 318, 325, 333, 342, 356, 359, 360, 361, 446, 447, 454, 466, 528, 589, 598, 609, 646, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 678, 776, 778, 809, 810, 841, 847, 851, 869, 873, 874, 878, 884, 898, 902, 903, 908, 912, 928, 936, 943, 944, 953, 970, 978, 1049, 1065, 1066, 1072, 1084, 1152, 1244, 1257, 1258, 1261, 1263, 1264, 1271, 1273, 1351, 1356, 1373, 1378], "Its": [246, 356, 526, 851, 1150, 1373], "NO": 976, "NOT": [136, 256, 297, 356, 589, 608, 683, 851, 923, 970, 1401], "No": [21, 259, 272, 356, 841, 896, 908, 970], "Not": [213, 259, 356, 542, 543, 851, 873, 884, 896, 912, 925, 970], "ON": 1401, "OR": [261, 356, 768, 769, 888, 898, 970, 976, 1392], "ORs": [422, 851, 1035, 1373], "On": [758, 851, 900, 970], "One": [58, 223, 259, 276, 313, 318, 356, 370, 638, 770, 782, 798, 804, 807, 816, 818, 821, 822, 831, 851, 878, 896, 970, 976, 1067, 1373], "Or": [244, 245, 260, 288, 302, 326, 335, 356, 359, 504, 659, 693, 790, 791, 793, 794, 838, 839, 847, 851, 891, 892, 897, 918, 927, 946, 970, 1129, 1373], "That": [158, 902, 970], "The": [10, 21, 34, 38, 39, 40, 41, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 67, 72, 73, 75, 76, 77, 85, 89, 90, 97, 100, 101, 103, 132, 133, 135, 136, 137, 139, 140, 147, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 183, 184, 185, 187, 189, 197, 213, 215, 223, 224, 226, 227, 228, 229, 232, 233, 236, 243, 244, 245, 246, 251, 257, 259, 260, 261, 264, 272, 278, 280, 284, 288, 289, 290, 291, 294, 295, 296, 303, 308, 313, 314, 319, 322, 326, 330, 331, 333, 334, 335, 342, 356, 368, 409, 410, 411, 412, 426, 427, 446, 447, 449, 452, 453, 454, 462, 466, 473, 477, 478, 482, 484, 487, 495, 496, 503, 505, 506, 507, 510, 513, 517, 518, 526, 535, 560, 564, 597, 598, 612, 639, 646, 649, 652, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 690, 696, 700, 701, 705, 710, 711, 712, 713, 718, 719, 720, 721, 729, 730, 731, 732, 733, 734, 735, 745, 749, 755, 756, 757, 776, 779, 797, 801, 810, 811, 813, 827, 828, 829, 830, 833, 841, 843, 844, 846, 847, 851, 852, 853, 856, 858, 859, 860, 868, 873, 874, 878, 879, 881, 882, 884, 885, 888, 891, 892, 895, 896, 897, 898, 902, 908, 912, 915, 918, 920, 921, 922, 925, 928, 932, 934, 939, 940, 943, 944, 946, 953, 970, 974, 975, 976, 982, 985, 1022, 1023, 1024, 1025, 1039, 1040, 1053, 1065, 1066, 1067, 1070, 1071, 1072, 1080, 1084, 1095, 1099, 1100, 1104, 1106, 1109, 1117, 1118, 1126, 1128, 1130, 1131, 1134, 1135, 1138, 1142, 1150, 1158, 1186, 1190, 1223, 1242, 1244, 1246, 1250, 1251, 1252, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1280, 1283, 1288, 1292, 1293, 1302, 1303, 1304, 1305, 1310, 1311, 1312, 1313, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1347, 1353, 1355, 1357, 1358, 1365, 1367, 1369, 1373, 1374, 1379, 1380, 1381, 1382, 1387, 1401, 1402, 1404], "Then": 172, "There": 1401, "These": [1, 33, 41, 142, 149, 154, 155, 207, 320, 356, 850, 851], "To": [40, 65, 227, 228, 234, 235, 261, 356, 436, 452, 453, 511, 512, 697, 704, 705, 706, 709, 720, 721, 730, 731, 732, 733, 742, 851, 881, 882, 886, 887, 898, 970, 1054, 1070, 1071, 1136, 1137, 1289, 1296, 1297, 1298, 1301, 1312, 1313, 1334, 1353, 1373, 1401], "Will": [64, 873, 884, 912, 925, 970, 1373], "With": [161, 255, 299, 356, 401, 582, 684, 851, 873, 924, 970, 1014, 1172, 1208, 1276, 1373], "_": [1, 58, 62, 207, 280, 311, 315, 356, 394, 431, 432, 568, 698, 706, 708, 710, 715, 716, 722, 725, 726, 1045, 1046, 1290, 1298, 1302, 1307, 1308, 1314, 1318, 1348, 1373], "__array_ufunc__": 978, "__call__": 847, "__enter__": 1401, "__exit__": 1401, "__getattr__": 847, "__getitem__": 745, "__init__": [1, 32, 33, 34, 35, 53, 54, 55, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 143, 144, 145, 146, 180, 192, 198, 199, 201, 202, 944, 945, 1401], "__name__": [258, 356], "_auto_init_unhandled_kei": 33, "_awai": [679, 851], "_bar_": 800, "_btm_by_a": [427, 851], "_btm_by_b": [427, 851], "_by_ca": [427, 757, 851], "_by_cb": [427, 757, 851], "_check_ord": [925, 970], "_deletion_fil": 172, "_df": [1, 59], "_diff": [330, 356, 939, 970], "_eager": 589, "_expr": [1, 60], "_foo": 603, "_geventdataframeresult": [65, 874, 970], "_internal_cal": 56, "_is_not_nan": [543, 851], "_is_odd": [294, 356, 920, 970], "_isnan": [542, 851], "_isnul": [545, 851], "_kwarg": [873, 912, 970], "_ldf": 1, "_lf": 61, "_lower_boundari": [245, 356, 892, 970], "_mean_squar": [335, 946], "_not_nul": [544, 851], "_o": [431, 432, 715, 716, 1045, 1046, 1307, 1308], "_revers": [623, 627, 656, 851], "_right": [259, 260, 261, 356, 896, 897, 898, 970], "_storage_account": 34, "_storage_options_has_endpoint_url": 33, "_suffix": 628, "_sum": [335, 946], "_to_even": [679, 851], "_top_by_a": [757, 851], "_top_by_b": [757, 851], "_train": [941, 970], "_type": [914, 970], "_type_check": [925, 970], "_upper_boundari": [245, 356, 892, 970], "_world": 800, "a1": [41, 59, 61, 356], "a101": 1404, "a123": [41, 356], "a2": [41, 59, 61, 356], "a_1": [726, 1318, 1348, 1373], "a_2": [1348, 1373], "a_3": [1348, 1373], "a_a": 831, "a_agg_list": [245, 356, 892, 970], "a_b_doubl": 796, "a_btm_by_a": [427, 851], "a_btm_by_b": [427, 851], "a_by_ca": [427, 757, 851], "a_by_cb": [427, 757, 851], "a_div_2": 1395, "a_div_5": 1395, "a_interpol": [533, 851], "a_is_even": [303, 356, 830, 928, 970], "a_isnul": [545, 851], "a_lag_": 779, "a_log2": 1395, "a_mod_2": 1395, "a_not_nul": [544, 851], "a_revers": [623, 627, 656, 851], "a_rol": 779, "a_suffix": 628, "a_times_2": [598, 851], "a_times_b": [597, 851], "a_top_by_a": [757, 851], "a_top_by_b": [757, 851], "a_txt": 831, "aa": [507, 697, 709, 797, 851, 976, 1067, 1289, 1301, 1373, 1396], "aaa": [1, 41, 356, 697, 709, 745, 747, 748, 976, 1289, 1301], "aaaa": [1024, 1025], "aabcdef": 731, "aad": [1024, 1025], "aag": 27, "aazz": 1396, "ab": [247, 263, 307, 330, 356, 721, 745, 747, 748, 851, 939, 970, 976, 1151, 1177, 1344, 1373, 1394, 1396], "ab12": 721, "ab12cd34ef": 721, "abc": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 366, 703, 706, 720, 730, 851, 976, 1295, 1298, 1312, 1313, 1396], "abc123": 1396, "abc456": [720, 1312, 1313, 1396], "abcabc": 721, "abcd": 1396, "abcdeff": 730, "abf": [156, 168, 169], "abl": [107, 154, 589], "about": [53, 54, 55, 107, 147, 149, 154, 690, 697, 705, 706, 709, 720, 721, 851, 1283, 1289, 1297, 1298, 1301, 1312, 1313, 1373, 1404], "abov": [41, 213, 260, 280, 356, 359, 897, 970], "abs_a": 1395, "abs_tol": [535, 851, 1158, 1373], "absolut": [149, 156, 168, 169, 176, 177, 178, 179, 365, 503, 505, 506, 535, 851, 981, 1128, 1130, 1131, 1158, 1373, 1395], "acc": [785, 786, 799, 825], "accent": 976, "accept": [38, 43, 47, 49, 50, 51, 52, 55, 147, 149, 150, 152, 153, 156, 158, 160, 162, 164, 167, 170, 171, 172, 183, 197, 215, 225, 244, 294, 295, 299, 302, 319, 330, 331, 335, 356, 366, 427, 436, 507, 534, 639, 653, 654, 693, 722, 749, 757, 765, 767, 769, 774, 777, 778, 779, 780, 788, 797, 815, 817, 820, 829, 833, 835, 841, 847, 851, 868, 880, 891, 920, 921, 924, 927, 932, 939, 940, 946, 970, 975, 1040, 1054, 1157, 1242, 1251, 1252, 1276, 1314, 1358, 1373], "access": [38, 43, 47, 49, 50, 51, 52, 59, 60, 61, 62, 158, 162, 164, 167, 169, 170, 171, 172, 197, 211, 219, 257, 280, 289, 290, 303, 356, 707, 745, 875, 928, 941, 970, 975, 1299, 1404], "accord": [289, 356, 646, 790, 791, 793, 794, 838, 839, 851, 1086, 1244, 1373], "accordingli": [147, 150, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166], "account": [41, 140, 155, 169, 356, 477, 503, 505, 506, 851, 1099, 1128, 1130, 1131, 1373], "accumul": [785, 786, 799, 825], "acg": 27, "achiev": [264, 280, 342, 356, 432, 598, 716, 851, 1046, 1223, 1308, 1373], "aco": 1394, "acosd": 1394, "across": [41, 58, 155, 157, 224, 246, 259, 267, 269, 274, 296, 306, 356, 449, 526, 612, 767, 769, 785, 786, 788, 815, 817, 820, 835, 851, 879, 896, 922, 970, 1150, 1373], "action": [40, 356], "activ": [7, 8, 19, 20, 22, 23, 24, 25, 29, 30, 561, 706, 1187, 1298], "actual": [41, 136, 183, 187, 291, 356, 1278, 1373, 1396, 1403], "ad": [39, 41, 136, 157, 245, 265, 303, 313, 318, 320, 325, 330, 331, 356, 372, 487, 510, 605, 606, 749, 785, 786, 830, 851, 892, 903, 928, 936, 939, 940, 970, 976, 1109, 1135, 1351, 1356, 1373], "adbc": [39, 154, 155, 356], "adbc_driver_manag": 175, "adbc_ingest": [39, 356], "add": [40, 41, 42, 47, 52, 153, 213, 233, 245, 264, 330, 331, 332, 333, 356, 359, 447, 625, 626, 627, 628, 646, 749, 795, 799, 841, 851, 892, 896, 939, 940, 941, 942, 943, 970, 1134, 1373, 1378], "add_calendar_dai": 795, "add_calendar_month": 795, "add_calendar_year": 795, "add_chart": [41, 356], "add_dai": 795, "add_format": [41, 356], "add_hour": 795, "add_milli": 795, "add_second": 795, "add_seri": [41, 356], "add_week": 795, "add_worksheet": [41, 356], "addit": [30, 37, 39, 40, 41, 136, 151, 156, 157, 168, 169, 181, 183, 185, 187, 197, 228, 232, 244, 262, 265, 278, 294, 295, 302, 315, 322, 330, 331, 335, 356, 366, 463, 507, 510, 639, 693, 697, 705, 706, 709, 720, 721, 745, 749, 774, 777, 778, 779, 780, 797, 829, 830, 833, 847, 851, 885, 891, 903, 920, 921, 927, 934, 939, 940, 946, 970, 976, 1073, 1081, 1135, 1289, 1297, 1298, 1301, 1312, 1313, 1354, 1373, 1383, 1401], "addition": [66, 157, 289, 356, 976], "address": 706, "adjac": [41, 356], "adjust": [503, 505, 506, 690, 851, 1128, 1130, 1131, 1283, 1373], "adl": [156, 168, 169], "adlf": 169, "advanc": [41, 280, 356, 406, 589, 622, 625, 627, 629, 630, 1019, 1215, 1404], "advantag": [41, 207, 279, 356], "advis": [41, 57, 100, 356], "aedt": 792, "aeiuo": [709, 1301], "af1": 58, "af2": 58, "af3": 58, "affect": [39, 176, 177, 178, 179, 356], "afm": 169, "afoo": [941, 970], "after": [41, 136, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 215, 216, 233, 319, 322, 356, 426, 427, 428, 454, 507, 639, 649, 744, 756, 757, 776, 851, 868, 932, 934, 970, 1039, 1040, 1072, 1134, 1246, 1336, 1357, 1358, 1373, 1388], "afterward": [57, 841], "ag": [272, 356, 908, 970, 1402], "again": [598, 851], "against": [39, 109, 152, 154, 236, 284, 303, 356, 561, 709, 830, 888, 915, 928, 970, 1187, 1301, 1382, 1401, 1403, 1404], "agg": [244, 245, 280, 288, 356, 367, 417, 422, 425, 427, 513, 515, 520, 523, 597, 598, 639, 692, 693, 757, 764, 790, 793, 813, 851, 873, 874, 884, 891, 892, 912, 914, 918, 925, 970, 976], "agg_group": [802, 851], "agg_list": [597, 851], "aggreg": [149, 152, 153, 156, 164, 168, 238, 244, 245, 266, 268, 270, 273, 276, 280, 281, 282, 288, 304, 305, 324, 327, 335, 336, 338, 340, 356, 367, 417, 422, 425, 513, 529, 597, 639, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 766, 767, 768, 769, 785, 786, 787, 788, 799, 804, 814, 815, 817, 819, 820, 825, 834, 835, 851, 892, 902, 904, 905, 906, 909, 910, 913, 918, 929, 930, 937, 946, 947, 949, 951, 970, 1030, 1035, 1038, 1153, 1258, 1259, 1260, 1262, 1265, 1266, 1267, 1373, 1389, 1391, 1394, 1400], "aggregate_funct": [280, 356, 976], "aho": [698, 708, 710, 722, 1290, 1300, 1302, 1314], "aiosqlit": 154, "alchemy_conn": 154, "algorithm": [214, 356, 373, 698, 708, 710, 722, 770, 851, 867, 970, 986, 1290, 1300, 1302, 1314, 1373], "alia": [1, 13, 58, 60, 62, 66, 96, 200, 204, 219, 245, 250, 263, 280, 288, 322, 330, 333, 356, 359, 366, 370, 409, 410, 411, 412, 413, 416, 426, 429, 431, 432, 433, 441, 442, 443, 444, 445, 447, 450, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 494, 495, 496, 497, 498, 501, 502, 515, 517, 518, 522, 524, 530, 531, 534, 535, 538, 541, 549, 551, 573, 585, 591, 596, 598, 602, 605, 606, 608, 615, 618, 620, 622, 633, 634, 638, 640, 644, 646, 649, 651, 680, 682, 697, 698, 699, 700, 702, 703, 705, 706, 708, 709, 710, 711, 715, 716, 722, 723, 724, 725, 726, 727, 728, 732, 733, 735, 745, 746, 747, 748, 750, 755, 756, 758, 764, 765, 771, 772, 773, 777, 778, 779, 780, 790, 793, 795, 796, 799, 800, 805, 808, 809, 812, 813, 825, 829, 833, 838, 841, 851, 892, 894, 901, 918, 934, 939, 943, 970, 1022, 1066, 1073, 1074, 1077, 1080, 1081, 1082, 1083, 1089, 1090, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1142, 1177, 1244, 1249, 1297, 1298, 1302, 1313, 1318, 1319, 1373], "alias": [303, 356, 605, 606, 928, 970], "alic": [152, 1402], "align": [11, 16, 17, 41, 58, 66, 356, 1402], "align_fram": 66, "align_ful": 66, "align_inn": 66, "align_left": 66, "align_right": 66, "all": [1, 4, 5, 8, 14, 18, 21, 26, 31, 38, 40, 41, 47, 49, 50, 51, 52, 53, 54, 55, 58, 64, 71, 118, 120, 133, 134, 138, 148, 152, 153, 156, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 180, 181, 184, 187, 207, 212, 214, 216, 223, 225, 227, 228, 235, 247, 252, 254, 256, 257, 258, 259, 261, 262, 263, 269, 271, 275, 276, 280, 283, 285, 289, 290, 291, 295, 301, 302, 306, 307, 311, 313, 314, 318, 321, 323, 324, 325, 326, 331, 333, 356, 359, 370, 372, 394, 427, 440, 446, 452, 453, 454, 455, 466, 487, 495, 507, 512, 525, 526, 529, 532, 537, 540, 544, 545, 550, 560, 561, 568, 586, 589, 597, 619, 622, 623, 625, 626, 627, 628, 629, 630, 637, 639, 649, 654, 656, 661, 679, 685, 691, 693, 699, 703, 706, 707, 711, 714, 717, 721, 729, 730, 731, 735, 757, 767, 776, 778, 785, 786, 787, 788, 797, 799, 804, 805, 808, 817, 825, 833, 834, 835, 841, 847, 851, 857, 863, 866, 867, 870, 873, 874, 878, 880, 881, 882, 884, 887, 896, 898, 902, 907, 912, 916, 921, 925, 926, 927, 933, 935, 936, 940, 941, 943, 970, 976, 1007, 1065, 1067, 1070, 1071, 1072, 1073, 1084, 1109, 1117, 1151, 1159, 1171, 1177, 1186, 1187, 1194, 1212, 1215, 1246, 1252, 1258, 1284, 1291, 1295, 1298, 1299, 1302, 1303, 1306, 1313, 1321, 1322, 1323, 1327, 1344, 1353, 1373, 1377, 1378, 1383, 1385, 1390, 1391, 1396, 1400, 1401, 1403, 1404], "all_compat": 1385, "all_data": 1401, "all_horizont": [227, 228, 356, 766, 841, 881, 882, 970], "all_stat": 31, "alloc": [149, 152, 153, 231, 283, 356, 851, 945, 1127, 1373], "allow": [1, 8, 40, 41, 49, 50, 51, 52, 56, 57, 66, 100, 109, 134, 154, 157, 167, 169, 170, 171, 172, 173, 180, 183, 184, 187, 207, 211, 257, 260, 262, 265, 289, 290, 292, 314, 315, 318, 321, 334, 356, 361, 429, 433, 477, 484, 487, 535, 577, 597, 598, 605, 606, 651, 681, 734, 736, 737, 851, 896, 897, 902, 903, 907, 914, 933, 941, 970, 974, 976, 1099, 1106, 1109, 1158, 1203, 1223, 1248, 1270, 1326, 1328, 1329, 1353, 1354, 1373, 1396, 1404], "allow_alias": [605, 606], "allow_chunk": [183, 187], "allow_copi": [134, 211, 314, 356, 1353, 1373], "allow_dupl": [646, 851, 1244, 1373], "allow_exact_match": [260, 356, 897, 970], "allow_infin": [183, 187], "allow_masked_out": [183, 187], "allow_missing_column": [164, 172], "allow_nul": [180, 183, 187, 1404], "allow_object": 811, "allow_parallel": [260, 356, 896, 897, 970], "allow_pyarrow_filt": 173, "allow_time_zon": [183, 184, 187], "allowed_dtyp": [183, 184, 187, 1404], "almost": [65, 264, 342, 356, 535, 734, 736, 737, 851, 874, 970, 974, 1223, 1326, 1328, 1329, 1373], "along": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 970], "alpha": [503, 505, 506, 851, 976, 1128, 1130, 1131, 1373], "alpha_i": [504, 851, 1129, 1373], "alphabet": [976, 1404], "alphanumer": [742, 976, 1334], "alreadi": [39, 40, 108, 313, 356, 561, 613, 762, 851, 925, 970, 1065, 1187, 1362, 1373], "also": [28, 38, 41, 49, 50, 51, 52, 57, 64, 65, 136, 140, 154, 157, 158, 163, 164, 167, 172, 182, 183, 186, 187, 192, 201, 207, 229, 244, 245, 265, 272, 276, 280, 288, 290, 294, 302, 313, 325, 330, 333, 356, 442, 445, 454, 466, 477, 481, 487, 513, 534, 598, 605, 606, 639, 649, 653, 654, 679, 693, 720, 721, 722, 729, 730, 745, 776, 785, 786, 789, 792, 799, 801, 825, 841, 850, 851, 857, 873, 874, 884, 891, 892, 903, 908, 912, 918, 920, 925, 927, 936, 939, 941, 943, 970, 976, 1072, 1084, 1103, 1157, 1246, 1251, 1252, 1268, 1291, 1312, 1313, 1314, 1321, 1373, 1377, 1383, 1385, 1388, 1392, 1396, 1399, 1401, 1402], "alt": [356, 359, 1373, 1378], "altair": [175, 356, 359, 1373, 1378], "altern": [41, 192, 356, 847, 1393], "although": [303, 356, 928, 970], "alwai": [14, 38, 40, 49, 55, 74, 80, 152, 158, 162, 164, 215, 244, 259, 260, 264, 319, 342, 356, 426, 427, 597, 609, 734, 756, 757, 841, 851, 868, 896, 897, 902, 932, 970, 976, 1039, 1040, 1044, 1223, 1326, 1357, 1358, 1373, 1382, 1383, 1401, 1404], "am": [723, 1315], "amarillo": 1396, "amaz": [356, 359, 1373, 1378], "amazonaw": 33, "ambigu": [480, 481, 482, 495, 734, 737, 792, 1102, 1103, 1104, 1117, 1326, 1329], "america": 793, "amount": [53, 57, 75, 100, 162, 167, 170, 171, 598, 795, 851, 1390], "amsterdam": [481, 1103], "an": [1, 31, 34, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 56, 59, 61, 62, 66, 74, 75, 76, 97, 105, 109, 112, 115, 122, 124, 133, 135, 136, 139, 147, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 167, 168, 169, 170, 171, 172, 181, 183, 187, 197, 213, 217, 218, 219, 225, 231, 234, 238, 240, 245, 256, 257, 258, 260, 261, 264, 265, 276, 280, 285, 286, 288, 289, 293, 303, 308, 314, 318, 320, 324, 325, 330, 333, 342, 356, 359, 361, 368, 390, 393, 405, 409, 411, 417, 420, 422, 423, 425, 442, 443, 444, 445, 446, 447, 454, 458, 459, 477, 481, 484, 498, 504, 512, 513, 518, 519, 520, 523, 558, 561, 564, 566, 588, 589, 597, 598, 610, 612, 622, 623, 644, 645, 646, 654, 655, 659, 661, 662, 664, 666, 668, 670, 673, 675, 677, 696, 697, 700, 706, 709, 713, 734, 736, 737, 739, 741, 755, 758, 766, 771, 775, 777, 781, 783, 790, 791, 793, 794, 796, 798, 801, 805, 806, 807, 808, 809, 810, 811, 823, 825, 826, 829, 833, 838, 839, 841, 842, 847, 851, 870, 871, 872, 874, 878, 880, 884, 888, 892, 897, 898, 902, 903, 916, 918, 919, 928, 936, 939, 941, 943, 945, 953, 967, 970, 974, 975, 976, 1003, 1006, 1018, 1022, 1024, 1030, 1033, 1035, 1036, 1038, 1053, 1055, 1061, 1062, 1063, 1064, 1065, 1072, 1076, 1106, 1120, 1127, 1129, 1142, 1172, 1184, 1187, 1190, 1192, 1214, 1223, 1252, 1253, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1271, 1273, 1288, 1289, 1292, 1298, 1301, 1305, 1326, 1328, 1329, 1331, 1333, 1353, 1355, 1373, 1391, 1393, 1396, 1400, 1401, 1403], "ana": [723, 1315], "anan": [723, 1315], "ananab": 1396, "and_": 851, "ang": 1396, "angl": [772, 773], "ani": [4, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 73, 74, 80, 99, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 207, 209, 212, 213, 215, 221, 225, 227, 228, 233, 235, 236, 238, 240, 255, 257, 258, 259, 260, 261, 264, 265, 269, 279, 284, 285, 289, 290, 291, 303, 306, 309, 310, 313, 314, 315, 318, 319, 321, 324, 325, 333, 356, 359, 360, 361, 366, 369, 370, 394, 426, 427, 428, 446, 447, 454, 466, 483, 501, 502, 512, 513, 517, 520, 522, 524, 528, 539, 549, 556, 561, 568, 578, 579, 580, 581, 596, 597, 598, 605, 615, 618, 620, 622, 623, 625, 627, 629, 630, 633, 634, 638, 643, 646, 653, 654, 655, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 678, 682, 686, 696, 698, 712, 730, 731, 732, 733, 734, 736, 737, 739, 741, 750, 756, 757, 758, 765, 766, 767, 769, 776, 778, 780, 781, 782, 809, 810, 811, 813, 817, 835, 841, 851, 868, 873, 874, 880, 881, 882, 884, 887, 888, 896, 897, 898, 903, 911, 912, 915, 916, 928, 932, 933, 936, 943, 944, 945, 970, 974, 976, 978, 980, 983, 1007, 1039, 1040, 1049, 1065, 1066, 1072, 1084, 1105, 1124, 1125, 1134, 1137, 1143, 1145, 1147, 1152, 1163, 1172, 1175, 1182, 1187, 1194, 1204, 1205, 1206, 1207, 1222, 1223, 1234, 1235, 1244, 1251, 1252, 1253, 1257, 1258, 1261, 1263, 1264, 1271, 1272, 1288, 1290, 1304, 1326, 1328, 1329, 1331, 1333, 1351, 1352, 1353, 1354, 1356, 1357, 1358, 1373, 1378, 1401, 1404], "anna": [272, 356, 908, 970], "annex": [717, 1309], "announc": [914, 970], "anoth": [102, 182, 216, 224, 230, 244, 260, 296, 356, 449, 456, 533, 564, 602, 608, 612, 653, 663, 665, 667, 669, 671, 674, 676, 678, 709, 851, 870, 879, 891, 897, 922, 941, 970, 1065, 1074, 1126, 1134, 1156, 1190, 1251, 1252, 1301, 1373, 1395, 1396], "anti": [259, 356, 896, 953, 970, 1271, 1273, 1373, 1389], "antipattern": [152, 158, 162, 164], "any_horizont": [768, 841], "anyth": [40, 289, 356], "anywher": [413, 416, 734, 736, 737, 1326, 1328, 1329], "ap": 1396, "apach": [36, 43, 44, 47, 134, 150, 154, 155, 158, 160, 169, 210, 356, 979], "apaya": [735, 1327], "api": [0, 33, 38, 43, 47, 49, 50, 51, 52, 134, 162, 164, 167, 170, 171, 172, 173, 192, 197, 211, 264, 342, 356, 598, 813, 851, 953, 970, 1223, 1373, 1400], "apia": [455, 1073], "app": [433, 728, 1047, 1320], "appear": [41, 70, 136, 178, 179, 356, 721, 760, 851, 976, 1360, 1373, 1402], "append": [39, 40, 42, 183, 233, 259, 260, 261, 356, 650, 841, 851, 896, 897, 898, 970, 1134, 1373], "appl": [220, 249, 259, 285, 286, 309, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 349, 356, 427, 429, 433, 656, 702, 728, 757, 851, 896, 916, 948, 949, 951, 952, 954, 955, 956, 957, 958, 959, 960, 970, 1042, 1047, 1294, 1320, 1389, 1396], "appli": [11, 21, 38, 41, 49, 64, 66, 132, 147, 154, 167, 180, 183, 187, 207, 223, 238, 261, 264, 279, 302, 303, 313, 342, 356, 382, 457, 460, 461, 462, 465, 467, 468, 469, 470, 471, 472, 473, 476, 478, 479, 483, 485, 496, 497, 499, 505, 506, 597, 598, 643, 662, 663, 664, 665, 668, 669, 675, 676, 693, 720, 721, 734, 736, 737, 741, 774, 785, 786, 799, 812, 813, 825, 830, 841, 851, 878, 898, 902, 911, 927, 928, 953, 970, 1054, 1075, 1078, 1079, 1080, 1083, 1085, 1086, 1090, 1091, 1092, 1094, 1095, 1098, 1100, 1101, 1105, 1107, 1118, 1119, 1121, 1130, 1131, 1223, 1259, 1260, 1262, 1266, 1312, 1313, 1326, 1328, 1329, 1333, 1373, 1382], "applic": [55, 314, 356, 598, 851], "apply_on_context_ent": 207, "appropri": [41, 173, 236, 284, 314, 356, 487, 649, 851, 888, 915, 970, 1109, 1246, 1373], "approx": [373, 851], "approx_n_uniqu": [356, 851, 970, 1373], "approxim": [47, 214, 356, 373, 504, 770, 851, 867, 970, 986, 1129, 1373, 1395, 1404], "april": [484, 1106, 1396, 1397], "ar": [1, 11, 12, 18, 21, 31, 33, 35, 38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 64, 65, 66, 97, 98, 100, 107, 113, 129, 133, 134, 135, 136, 137, 138, 139, 140, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 181, 183, 184, 185, 187, 197, 207, 211, 215, 216, 221, 223, 227, 228, 231, 236, 237, 238, 243, 244, 245, 257, 259, 260, 261, 262, 264, 271, 272, 278, 280, 284, 288, 289, 290, 291, 294, 295, 299, 302, 309, 311, 313, 314, 315, 318, 319, 323, 325, 326, 330, 331, 334, 335, 356, 369, 371, 385, 401, 406, 426, 427, 428, 436, 442, 444, 445, 454, 482, 487, 495, 500, 502, 503, 504, 505, 506, 513, 528, 534, 535, 537, 539, 540, 542, 543, 544, 545, 547, 552, 553, 582, 586, 589, 597, 634, 639, 645, 646, 649, 652, 653, 654, 655, 659, 660, 663, 665, 667, 669, 671, 672, 674, 676, 678, 682, 684, 687, 690, 692, 693, 698, 707, 711, 713, 714, 718, 719, 720, 721, 722, 724, 735, 737, 739, 744, 749, 751, 755, 756, 757, 766, 767, 768, 769, 774, 777, 778, 779, 780, 781, 788, 790, 791, 793, 794, 809, 810, 815, 817, 820, 829, 833, 834, 835, 838, 839, 841, 843, 844, 846, 850, 851, 852, 853, 856, 857, 858, 859, 860, 863, 866, 868, 873, 874, 878, 881, 882, 888, 891, 892, 896, 897, 898, 902, 907, 908, 912, 914, 915, 916, 918, 920, 921, 924, 925, 927, 932, 935, 936, 939, 940, 941, 946, 970, 974, 976, 983, 984, 998, 999, 1014, 1017, 1019, 1039, 1040, 1048, 1054, 1063, 1064, 1072, 1104, 1109, 1117, 1123, 1125, 1127, 1128, 1129, 1130, 1131, 1138, 1140, 1152, 1157, 1158, 1161, 1163, 1164, 1166, 1167, 1168, 1169, 1173, 1178, 1179, 1208, 1212, 1215, 1235, 1243, 1244, 1246, 1250, 1251, 1252, 1253, 1257, 1264, 1272, 1276, 1280, 1283, 1290, 1299, 1303, 1305, 1310, 1311, 1312, 1313, 1316, 1327, 1329, 1331, 1336, 1343, 1348, 1351, 1353, 1354, 1355, 1357, 1358, 1365, 1367, 1369, 1373, 1374, 1377, 1379, 1380, 1381, 1383, 1385, 1388, 1393, 1401, 1404], "arbitrari": [53, 87, 240, 356, 449, 851, 879, 970, 976], "arbitrarili": [264, 356], "arcco": [851, 1373], "arccosh": [851, 1373], "arcsin": [851, 1373], "arcsinh": [851, 1373], "arctan": [772, 773, 851, 1373], "arctan2": 773, "arctanh": [851, 1373], "aren": [38, 49, 356, 970], "arg": [32, 57, 68, 69, 71, 72, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 149, 200, 204, 236, 279, 284, 356, 382, 643, 774, 800, 851, 888, 911, 915, 970, 1223, 1373, 1386], "arg_max": [851, 1373], "arg_min": [851, 1373], "arg_sort": [851, 1373], "arg_tru": [775, 851, 1373], "arg_uniqu": [851, 1373], "arg_wher": [383, 851], "argmax": [597, 851], "argument": [37, 40, 47, 97, 147, 149, 151, 152, 156, 164, 167, 168, 183, 185, 187, 197, 221, 225, 232, 244, 245, 260, 278, 279, 288, 294, 295, 302, 315, 322, 326, 330, 331, 335, 356, 454, 482, 495, 507, 513, 534, 597, 639, 643, 659, 693, 729, 730, 731, 738, 749, 766, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 797, 829, 833, 841, 847, 851, 880, 885, 891, 892, 897, 911, 918, 920, 921, 927, 934, 939, 940, 946, 967, 970, 976, 1072, 1104, 1117, 1157, 1321, 1322, 1323, 1330, 1354, 1373, 1395, 1396], "aris": 154, "arithmet": [238, 356], "arm": 175, "arm64": 175, "around": [38, 49, 356, 970], "arr": [314, 356, 843, 1353, 1365, 1373, 1396], "arr_bar": 1391, "arr_foo": 1391, "arrai": [133, 137, 152, 153, 156, 164, 168, 209, 213, 231, 232, 308, 313, 314, 315, 356, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 414, 442, 443, 444, 445, 556, 571, 572, 573, 574, 576, 585, 586, 588, 591, 593, 597, 655, 662, 664, 666, 668, 670, 673, 675, 677, 683, 755, 778, 796, 810, 830, 851, 885, 970, 975, 978, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1027, 1061, 1062, 1063, 1064, 1069, 1127, 1182, 1197, 1198, 1199, 1200, 1202, 1210, 1211, 1212, 1214, 1217, 1219, 1220, 1253, 1259, 1260, 1262, 1265, 1266, 1267, 1274, 1278, 1347, 1351, 1353, 1354, 1355, 1373, 1394, 1396, 1400, 1403], "array_agg": 1394, "array_contain": 1394, "array_get": 1394, "array_length": 1394, "array_low": 1394, "array_mean": 1394, "array_revers": 1394, "array_sum": 1394, "array_to_str": 1394, "array_uniqu": 1394, "array_upp": 1394, "arraylik": [1069, 1373], "arrow": [43, 44, 50, 133, 134, 154, 155, 158, 160, 170, 210, 257, 290, 291, 308, 310, 314, 356, 970, 979, 1347, 1353, 1373], "arrowarrayexport": [133, 134], "arrowinvaliderror": [40, 356], "arrowstreamexport": [133, 134], "as_": [1373, 1378], "as_arrai": 810, "as_dict": [153, 278, 356], "as_expr": 976, "as_seri": [216, 309, 356, 870, 970, 976], "asarrai": [209, 978], "ascend": [245, 272, 288, 356, 639, 659, 851, 892, 908, 918, 970], "ascii": [7, 21, 431, 432, 698, 708, 710, 711, 715, 716, 722, 724, 735, 744, 976, 1045, 1046, 1290, 1300, 1302, 1303, 1307, 1308, 1314, 1316, 1327, 1336], "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_case_insensit": [698, 708, 710, 722, 1290, 1300, 1302, 1314], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_horizontal_onli": 21, "ascii_lett": 1404, "ascii_markdown": 21, "ascii_no_bord": 21, "ascii_onli": 976, "ascii_t": 207, "ascii_uppercas": [324, 356], "asd": [699, 706, 1291, 1298], "asia": [140, 976, 1078, 1079, 1107], "asid": 487, "asin": 1394, "asind": 1394, "asof": [260, 356, 897, 970], "asofjoinstrategi": [260, 356, 897, 970], "assert": [176, 177, 178, 179, 183, 187, 288, 356, 863, 976], "assert_frame_equ": [177, 178, 230, 356, 1404], "assert_frame_not_equ": [176, 179], "assert_series_equ": [176, 179, 1126, 1373, 1404], "assert_series_not_equ": [177, 178], "assert_someth": 181, "assertionerror": [176, 177, 178, 179], "assign": [181, 213, 245, 341, 356, 406, 589, 639, 649, 726, 727, 851, 892, 952, 970, 1019, 1215, 1246, 1318, 1319, 1373], "associ": [39, 41, 58, 155, 157, 182, 185, 291, 356, 975, 1384, 1386, 1390], "assum": [33, 291, 356, 902, 953, 970, 1396], "assume_rol": 33, "assumpt": [597, 851], "async": [64, 65, 154, 874, 970], "async_engin": 154, "asynchron": [65, 154, 874, 970], "asyncio": [65, 154, 874, 970], "asyncresult": [65, 874, 970], "asyncsurrealdb": 154, "ata": 27, "atan": 1394, "atan2": [772, 773, 1394], "atan2_ab": 1398, "atan2d": [773, 1394], "atan2d_ab": 1398, "atand": 1394, "atg": 27, "atgataaaggag": 27, "atol": [176, 177, 178, 179], "attain": [693, 851], "attempt": [1, 10, 49, 50, 51, 52, 64, 65, 213, 449, 851, 873, 874, 879, 884, 912, 925, 970], "attr": [356, 359, 1373, 1378], "attribut": [67, 70, 73, 74, 75, 76, 77, 85, 89, 143, 144, 145, 146, 180, 198, 199, 201, 202, 356, 359, 843, 844, 846, 847, 852, 853, 856, 858, 859, 860, 944, 945, 970, 1365, 1367, 1369, 1373, 1374, 1378, 1379, 1380, 1381], "attributeerror": 1, "audi": [309, 356, 656, 851], "august": 487, "australia": 792, "auth": 35, "authent": [40, 156, 164, 166, 167, 168, 169, 170, 172, 192, 356], "author": 1, "auto": [10, 38, 40, 43, 47, 49, 50, 51, 52, 64, 65, 66, 133, 135, 136, 137, 139, 156, 161, 162, 164, 167, 168, 170, 171, 172, 192, 197, 320, 356, 873, 874, 884, 912, 925, 970, 1404], "auto_structifi": [294, 330, 356, 920, 939, 970], "autofilt": [41, 356], "autofit": [41, 356], "autogener": [152, 153, 157, 163, 167], "automat": [8, 38, 49, 66, 133, 135, 136, 137, 139, 140, 149, 152, 153, 154, 155, 161, 162, 164, 167, 169, 170, 171, 183, 187, 189, 192, 294, 303, 330, 356, 597, 654, 729, 730, 731, 830, 851, 920, 928, 939, 970, 1251, 1252, 1321, 1322, 1323, 1356, 1373, 1383, 1385, 1388, 1401], "autumn": [720, 721], "avail": [41, 47, 52, 142, 154, 155, 156, 165, 168, 169, 181, 194, 195, 196, 207, 265, 280, 303, 355, 356, 361, 487, 649, 830, 843, 844, 846, 850, 851, 852, 853, 856, 857, 858, 859, 860, 863, 903, 928, 968, 969, 970, 976, 1067, 1246, 1365, 1367, 1369, 1373, 1374, 1377, 1379, 1380, 1381, 1392], "available_timezon": [73, 976], "averag": [41, 356, 503, 504, 505, 506, 649, 851, 1128, 1129, 1130, 1131, 1246, 1373, 1390], "avg": 1394, "avocado": 1396, "avoid": [183, 187, 236, 284, 290, 356, 368, 851, 888, 915, 970], "avro": [36, 150, 200, 356, 863], "avrocompress": [36, 356], "aw": [33, 38, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 970], "awai": [679, 851, 1395], "await": [65, 154, 874, 964, 970], "await_result": [914, 970], "awar": [11, 154, 257, 290, 291, 310, 356, 504, 698, 708, 710, 722, 737, 851, 970, 1129, 1290, 1300, 1302, 1314, 1329, 1373], "aws_access_key_id": [40, 156, 168, 172, 356], "aws_region": [40, 168, 172, 356], "aws_secret_access_kei": [40, 156, 168, 172, 356], "awsassumerolekwarg": 33, "axi": [271, 323, 356, 359, 772, 773, 907, 935, 970, 1373, 1378], "aya": [724, 1316, 1327], "az": [156, 168, 169], "azur": [34, 38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 169, 170, 171, 172, 197, 356, 970], "azure_storage_account_kei": [156, 168, 169], "azure_storage_account_nam": [156, 168, 169], "b": [1, 11, 36, 38, 40, 43, 44, 47, 53, 61, 66, 89, 97, 104, 107, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 154, 157, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 254, 255, 256, 257, 258, 259, 262, 263, 265, 266, 268, 270, 273, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 299, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 366, 368, 369, 371, 372, 382, 384, 389, 394, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 427, 428, 440, 447, 451, 484, 487, 507, 509, 511, 512, 513, 515, 525, 526, 529, 532, 533, 534, 535, 537, 540, 542, 543, 544, 545, 550, 556, 561, 568, 578, 579, 580, 581, 597, 598, 603, 619, 622, 623, 624, 625, 626, 627, 628, 636, 637, 639, 643, 646, 649, 653, 654, 656, 658, 685, 691, 693, 700, 704, 709, 713, 720, 721, 745, 746, 757, 760, 764, 766, 767, 768, 769, 770, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 797, 798, 799, 800, 803, 804, 805, 807, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 827, 828, 830, 832, 833, 834, 835, 836, 840, 847, 851, 866, 867, 868, 871, 872, 873, 874, 875, 876, 877, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 915, 916, 917, 919, 920, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 943, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 970, 976, 982, 985, 1007, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1049, 1066, 1069, 1106, 1109, 1123, 1126, 1127, 1134, 1137, 1157, 1158, 1163, 1182, 1204, 1205, 1206, 1207, 1244, 1249, 1292, 1296, 1301, 1305, 1312, 1313, 1337, 1339, 1340, 1342, 1354, 1360, 1373, 1383, 1385, 1386, 1388, 1389, 1390, 1391, 1396, 1397, 1398, 1401], "b1": [59, 61], "b2": [59, 61], "b345": [41, 356], "b4": [41, 356], "b_b": [303, 356], "b_btm_by_a": [427, 851], "b_btm_by_b": [427, 851], "b_by_ca": [427, 757, 851], "b_by_cb": [427, 757, 851], "b_div_a": [250, 356], "b_is_not_nan": [543, 851], "b_isnan": [542, 851], "b_isnul": [545, 851], "b_not_nul": [544, 851], "b_revers": [623, 627, 656, 851], "b_suffix": 628, "b_sum": [335, 946], "b_top_by_a": [757, 851], "b_top_by_b": [757, 851], "ba": [449, 507, 612, 728, 797, 851, 976], "back": [4, 58, 172, 233, 245, 296, 314, 315, 356, 612, 639, 721, 851, 873, 884, 892, 912, 922, 925, 945, 970, 1134, 1354, 1373], "backend": [40, 154, 155, 156, 168, 169, 356, 359, 1373, 1378], "background": [64, 65, 356, 360, 873, 874, 969, 970], "backward": [47, 52, 235, 260, 356, 409, 454, 475, 512, 851, 887, 897, 970, 1022, 1072, 1097, 1137, 1373], "backward_fil": [512, 518, 851, 1137, 1142, 1373], "bad": [720, 721, 1312, 1313], "balanc": [186, 188, 1404], "ballon_dor": [705, 707, 1297, 1299], "banana": [220, 309, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 427, 656, 702, 728, 757, 851, 949, 951, 954, 955, 956, 957, 958, 959, 960, 1396], "banded_column": [41, 356], "banded_row": [41, 356], "banker": [679, 851, 1268, 1373], "bar": [36, 38, 40, 43, 44, 45, 46, 47, 148, 161, 162, 216, 219, 220, 221, 225, 226, 227, 228, 229, 230, 233, 236, 238, 240, 241, 242, 247, 249, 250, 251, 253, 259, 263, 264, 266, 267, 268, 269, 270, 273, 274, 277, 280, 282, 284, 285, 286, 289, 292, 293, 294, 296, 301, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 321, 322, 327, 328, 329, 334, 356, 359, 430, 449, 531, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 690, 699, 701, 704, 706, 707, 723, 725, 727, 732, 733, 770, 781, 782, 783, 798, 803, 804, 807, 808, 814, 816, 818, 819, 821, 822, 829, 832, 836, 840, 841, 847, 851, 870, 875, 876, 880, 881, 882, 883, 888, 894, 895, 896, 910, 915, 916, 919, 920, 933, 934, 938, 970, 975, 976, 1043, 1194, 1283, 1291, 1293, 1296, 1298, 1299, 1315, 1319, 1324, 1325, 1373, 1387, 1389, 1390, 1391, 1393, 1396, 1399], "bar2": 1396, "bar22": [238, 356], "bar_": 725, "bar_3": [311, 356], "bar_4": [311, 356], "bar_a": [280, 356], "bar_at_2": 1391, "bar_avg": 1390, "bar_b": [280, 356], "bar_color": [41, 356], "bar_max": 1390, "bar_median": 1390, "bar_min": 1390, "bar_negative_border_color_sam": [41, 356], "bar_negative_color_sam": [41, 356], "bar_std": 1390, "bar_sum": 1390, "bar_var": 1390, "bare": [605, 606, 976], "base": [32, 41, 53, 54, 55, 71, 118, 120, 157, 185, 213, 228, 236, 245, 261, 284, 288, 356, 455, 463, 500, 503, 504, 505, 506, 513, 528, 533, 592, 593, 597, 598, 644, 646, 654, 659, 663, 665, 667, 669, 671, 674, 676, 678, 739, 799, 851, 888, 892, 898, 915, 918, 970, 976, 1073, 1081, 1123, 1128, 1129, 1130, 1131, 1152, 1156, 1218, 1219, 1223, 1242, 1244, 1251, 1252, 1331, 1364, 1373, 1389, 1395, 1404], "base64": [411, 412, 700, 701, 1024, 1025, 1292, 1293], "base_nam": [320, 356], "base_path": [53, 54, 55], "base_utc_offset": [463, 1081], "baseexcept": 1401, "basepartitioncontext": 54, "basi": [41, 157, 183, 356], "basic": [41, 209, 356, 604, 978, 1404], "basic_chart": [41, 356], "batch": [44, 97, 142, 147, 153, 154, 160, 162, 171, 173, 290, 318, 356, 873, 902, 970], "batch_siz": [38, 49, 147, 152, 153, 154, 162, 171, 173, 318, 356, 970], "batchedcsvread": 153, "baz": [240, 250, 251, 322, 356, 707, 725, 727, 798, 807, 822, 847, 895, 934, 970, 975, 976, 1299, 1319, 1387, 1393, 1396], "bb": [976, 1067, 1373, 1396, 1401], "bbb": [1, 41, 356, 745, 747, 748, 976], "bc": [709, 721, 834, 1301], "bcbc45": 1396, "bea": 13, "bear": 976, "bearer": 192, "bearer_token": 192, "beauti": 13, "becaus": [162, 171, 231, 245, 262, 264, 324, 342, 356, 517, 561, 589, 851, 892, 953, 970, 1127, 1187, 1223, 1373], "becom": [185, 355, 968, 969], "bed3": [41, 356], "been": [5, 31, 41, 190, 211, 337, 356, 519, 616, 649, 851, 948, 1246, 1373], "beetl": [309, 356, 656, 851], "befor": [41, 49, 50, 51, 52, 53, 72, 73, 147, 149, 152, 154, 157, 167, 173, 176, 177, 178, 179, 189, 207, 233, 245, 260, 303, 313, 318, 322, 356, 420, 421, 423, 424, 444, 445, 446, 639, 640, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 704, 744, 751, 779, 827, 828, 851, 892, 894, 897, 934, 970, 1033, 1034, 1036, 1037, 1063, 1064, 1065, 1134, 1239, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1296, 1336, 1343, 1373, 1389], "beforehand": [734, 736, 737, 1326, 1328, 1329], "begin": [13, 41, 251, 356, 503, 505, 506, 532, 533, 705, 735, 851, 895, 970, 1128, 1130, 1131, 1155, 1156, 1297, 1327, 1373], "behav": [236, 284, 356, 513, 598, 730, 731, 841, 851, 888, 915, 970], "behavior": [47, 52, 56, 152, 164, 172, 213, 227, 228, 236, 259, 260, 356, 393, 519, 535, 564, 566, 704, 798, 807, 851, 881, 882, 896, 897, 967, 970, 1006, 1158, 1190, 1192, 1296, 1373], "behaviour": [11, 58, 227, 228, 236, 284, 303, 356, 697, 705, 706, 709, 720, 721, 758, 830, 851, 881, 882, 888, 915, 928, 970, 1289, 1297, 1298, 1301, 1312, 1313], "behind": 189, "being": [14, 32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 99, 132, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 157, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 216, 232, 261, 265, 303, 311, 313, 318, 325, 356, 359, 360, 361, 446, 447, 454, 466, 528, 598, 646, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 678, 704, 776, 778, 796, 809, 810, 841, 851, 870, 873, 874, 884, 885, 898, 903, 912, 928, 936, 944, 970, 1049, 1065, 1066, 1072, 1084, 1152, 1158, 1244, 1257, 1258, 1261, 1263, 1264, 1296, 1348, 1351, 1356, 1373, 1378, 1404], "belong": [1, 245, 356, 892, 970], "below": [20, 40, 156, 157, 168, 169, 228, 236, 280, 284, 356, 487, 512, 711, 720, 721, 735, 790, 791, 793, 794, 838, 839, 841, 847, 851, 888, 915, 970, 1109, 1303, 1312, 1313, 1327], "best": [169, 264, 342, 356, 598, 851, 1223, 1373], "better": [264, 313, 314, 342, 356, 432, 598, 716, 851, 869, 953, 970, 1046, 1271, 1273, 1308, 1373], "between": [25, 66, 103, 180, 181, 183, 187, 212, 221, 259, 272, 282, 290, 348, 356, 394, 428, 450, 451, 487, 534, 535, 559, 568, 578, 579, 580, 581, 640, 646, 647, 670, 671, 696, 712, 772, 773, 776, 781, 783, 810, 824, 827, 828, 851, 896, 908, 913, 959, 970, 1007, 1041, 1068, 1069, 1109, 1157, 1158, 1185, 1194, 1204, 1205, 1206, 1207, 1239, 1244, 1245, 1263, 1288, 1304, 1373, 1390, 1398], "between_ab": [534, 851], "beyond": [53, 742, 1334], "bia": [505, 506, 547, 660, 672, 690, 851, 1130, 1131, 1173, 1257, 1264, 1283, 1373], "bias": [547, 690, 851, 1173, 1283, 1373], "big": [153, 414, 1027], "big_fil": 153, "bigidx": 141, "bigqueri": 155, "bigquery_format": 200, "bin": [447, 528, 646, 739, 765, 844, 851, 1066, 1152, 1244, 1331, 1367, 1373, 1378], "bin2int": 414, "bin_count": [528, 851, 1152, 1373], "bin_i": [765, 851], "bin_x": [765, 851], "bin_xor_xi": [765, 851], "binari": [41, 43, 148, 154, 224, 296, 356, 410, 411, 412, 413, 414, 415, 416, 449, 612, 700, 851, 879, 922, 970, 976, 1023, 1024, 1026, 1027, 1028, 1029, 1292, 1392], "binary_str": [765, 851], "bind": 157, "birthdai": 152, "bit": [72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 418, 419, 420, 421, 423, 424, 651, 697, 851, 1031, 1033, 1034, 1036, 1037, 1248, 1289, 1373, 1392, 1396], "bit_and": 1394, "bit_count": 1394, "bit_length": 1394, "bit_or": 1394, "bit_xor": 1394, "bitmap": [231, 356, 1127, 1373], "bitwis": [370, 417, 422, 425, 638, 765, 766, 767, 768, 769, 851, 1030, 1035, 1038, 1373, 1394, 1400], "bitwise_and": [851, 1373], "bitwise_count_on": [851, 1373], "bitwise_count_zero": [851, 1373], "bitwise_leading_on": [851, 1373], "bitwise_leading_zero": [851, 1373], "bitwise_or": [851, 1373], "bitwise_trailing_on": [851, 1373], "bitwise_trailing_zero": [851, 1373], "bitwise_xor": [851, 1373], "bla": [699, 706, 1291, 1298], "black": [264, 356, 410, 411, 412, 413, 416], "blindli": [561, 1187], "block": [21, 65, 244, 321, 356, 874, 891, 916, 933, 942, 943, 953, 970, 1271, 1273, 1373], "blue": [57, 98, 100, 410, 411, 412, 413, 416, 762, 851, 1362, 1373], "bob": [152, 272, 356, 908, 970, 1402], "bodi": [41, 356, 360], "bold": [41, 356], "bom": [38, 49, 356, 970], "bool": [5, 7, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 38, 40, 41, 47, 49, 50, 51, 52, 53, 55, 56, 58, 64, 65, 66, 97, 98, 133, 134, 135, 136, 138, 139, 140, 143, 147, 148, 149, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 209, 211, 215, 216, 217, 218, 223, 225, 230, 235, 236, 237, 238, 242, 243, 244, 245, 249, 252, 253, 254, 257, 259, 260, 269, 278, 280, 284, 285, 289, 290, 291, 292, 297, 300, 302, 303, 306, 309, 311, 314, 315, 319, 320, 321, 322, 325, 326, 328, 330, 338, 340, 343, 346, 356, 368, 369, 370, 371, 372, 382, 385, 386, 389, 393, 394, 402, 407, 410, 411, 413, 416, 427, 428, 429, 433, 441, 442, 443, 444, 445, 447, 454, 466, 467, 483, 500, 501, 502, 503, 505, 506, 522, 524, 525, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 553, 557, 561, 564, 566, 568, 577, 584, 589, 590, 596, 597, 598, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 633, 634, 636, 638, 639, 641, 642, 646, 649, 651, 660, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 681, 682, 683, 685, 690, 692, 693, 696, 697, 698, 699, 700, 702, 708, 709, 710, 712, 720, 721, 722, 725, 726, 728, 734, 736, 737, 739, 741, 745, 747, 748, 757, 759, 762, 765, 766, 767, 768, 769, 771, 774, 775, 776, 777, 780, 781, 783, 784, 785, 790, 791, 793, 794, 799, 805, 806, 809, 810, 811, 813, 817, 823, 826, 829, 830, 833, 835, 838, 839, 841, 842, 851, 868, 870, 871, 873, 874, 878, 880, 884, 887, 888, 891, 892, 896, 897, 902, 907, 912, 915, 916, 923, 925, 927, 928, 932, 933, 934, 935, 936, 939, 944, 945, 949, 951, 954, 957, 970, 975, 976, 978, 983, 984, 995, 998, 999, 1002, 1006, 1007, 1015, 1020, 1023, 1024, 1026, 1029, 1040, 1041, 1042, 1044, 1047, 1049, 1053, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1072, 1084, 1085, 1105, 1123, 1125, 1126, 1128, 1130, 1131, 1138, 1140, 1148, 1149, 1152, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1178, 1179, 1183, 1187, 1190, 1192, 1194, 1203, 1210, 1216, 1223, 1235, 1237, 1240, 1241, 1244, 1246, 1247, 1248, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1270, 1272, 1273, 1274, 1278, 1283, 1285, 1288, 1289, 1290, 1291, 1292, 1294, 1300, 1301, 1302, 1304, 1312, 1313, 1314, 1317, 1318, 1320, 1326, 1328, 1329, 1331, 1333, 1348, 1353, 1354, 1358, 1359, 1362, 1373, 1382, 1383, 1385, 1391, 1396, 1401], "boolean": [58, 97, 183, 215, 236, 238, 284, 302, 319, 356, 369, 370, 371, 385, 386, 389, 410, 413, 416, 427, 466, 467, 513, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 552, 553, 557, 636, 638, 641, 642, 682, 693, 713, 757, 764, 765, 774, 775, 833, 841, 851, 868, 888, 915, 927, 932, 970, 976, 983, 984, 996, 998, 999, 1002, 1023, 1040, 1084, 1085, 1138, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1178, 1179, 1183, 1237, 1240, 1241, 1272, 1273, 1289, 1358, 1364, 1373, 1393], "border": 21, "both": [11, 26, 38, 49, 57, 98, 100, 154, 157, 172, 219, 245, 259, 260, 261, 272, 288, 289, 315, 325, 356, 372, 436, 447, 487, 507, 534, 646, 659, 663, 665, 667, 669, 671, 674, 676, 678, 724, 790, 791, 793, 794, 809, 810, 838, 839, 841, 847, 851, 862, 892, 896, 897, 898, 908, 918, 925, 936, 970, 976, 1054, 1109, 1157, 1316, 1354, 1373, 1401, 1402], "boto3": 33, "bottom": [215, 356, 427, 851, 868, 970], "bottom_k": [319, 356, 427, 756, 757, 851, 932, 970, 1040, 1357, 1358, 1373], "bottom_k_bi": [426, 756, 757, 851, 1039, 1357, 1358, 1373], "bound": [114, 152, 153, 231, 245, 356, 393, 436, 534, 564, 566, 589, 595, 761, 771, 790, 791, 793, 794, 809, 810, 838, 839, 851, 892, 970, 1006, 1054, 1127, 1157, 1190, 1192, 1221, 1361, 1373, 1391], "boundari": [245, 356, 436, 742, 851, 892, 970, 1054, 1334, 1373], "box": [21, 264, 356], "box_draw": 21, "branch": [64, 841, 873, 884, 912, 925, 970], "break": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 99, 132, 143, 144, 145, 146, 147, 148, 156, 162, 164, 165, 167, 168, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 259, 261, 265, 303, 313, 318, 325, 356, 359, 360, 361, 446, 447, 454, 466, 528, 598, 646, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 678, 776, 778, 809, 810, 851, 873, 874, 884, 896, 898, 903, 912, 928, 936, 944, 970, 1049, 1065, 1066, 1072, 1084, 1152, 1244, 1257, 1258, 1261, 1263, 1264, 1351, 1356, 1373, 1378], "breakpoint": [447, 528, 646, 851, 1066, 1152, 1244, 1373], "breezah": 167, "breviti": 207, "broadcast": [722, 778, 976, 1314], "broader": 976, "brotli": [47, 52, 356, 970], "brussel": [481, 1103], "bst": [459, 463, 481, 1077, 1081, 1103], "bucket": [40, 156, 168, 169, 172, 356, 482, 495, 528, 851, 1104, 1117, 1152, 1373], "bud": [720, 721, 1312, 1313], "budget": 1382, "buffer": [53, 152, 153, 154, 231, 257, 356, 414, 1027, 1127, 1373], "buffer_s": [257, 356], "bug": [97, 147, 597, 598, 851, 902, 953, 970, 1223, 1373], "build": [63, 134, 976, 1404], "built": 103, "builtin": [150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 224, 356, 449, 851, 879, 970], "bundl": 207, "busi": [454, 466, 776, 1072, 1084], "by_alternate_row": 1, "by_dtyp": 976, "by_first_letter_of_column_nam": 59, "by_first_letter_of_column_valu": 59, "by_index": 976, "by_left": [260, 356, 897, 970], "by_nam": 976, "by_pred": [289, 356], "by_right": [260, 356, 897, 970], "bye": 1, "byi": 1396, "bys": [245, 356, 892, 970], "byte": [36, 38, 41, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 148, 150, 151, 152, 153, 158, 159, 160, 161, 162, 165, 166, 167, 170, 171, 224, 231, 296, 356, 414, 431, 432, 449, 612, 709, 710, 711, 715, 716, 724, 735, 851, 879, 922, 970, 1027, 1045, 1046, 1127, 1301, 1302, 1303, 1307, 1308, 1316, 1327, 1373, 1396], "bytesio": [41, 43, 44, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 224, 296, 356, 449, 612, 851, 879, 922, 970], "c": [1, 11, 36, 38, 40, 43, 44, 47, 53, 59, 61, 66, 107, 134, 136, 138, 140, 143, 149, 157, 167, 211, 212, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 232, 236, 238, 241, 242, 243, 244, 245, 247, 249, 250, 258, 259, 262, 263, 265, 266, 268, 270, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 289, 292, 293, 294, 301, 302, 303, 304, 305, 307, 308, 311, 312, 313, 314, 315, 316, 319, 323, 324, 325, 327, 328, 330, 335, 338, 339, 340, 343, 344, 346, 349, 350, 356, 360, 366, 368, 369, 371, 389, 427, 447, 487, 525, 534, 556, 568, 598, 605, 622, 623, 637, 639, 643, 646, 685, 726, 734, 757, 760, 767, 769, 770, 772, 773, 774, 777, 778, 780, 781, 782, 783, 785, 786, 788, 798, 799, 800, 803, 804, 807, 808, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 830, 832, 834, 835, 836, 840, 847, 851, 868, 870, 871, 872, 873, 874, 875, 876, 877, 880, 881, 882, 883, 884, 885, 888, 891, 892, 896, 900, 903, 910, 912, 915, 916, 917, 919, 920, 925, 926, 927, 928, 932, 935, 936, 939, 941, 946, 949, 950, 951, 954, 955, 957, 960, 961, 970, 976, 1066, 1157, 1182, 1244, 1318, 1326, 1340, 1360, 1373, 1383, 1385, 1386, 1388, 1389, 1390, 1391, 1396, 1401], "c00": 976, "c01": 976, "c02": 976, "c03": 976, "c05": 976, "c1": 406, "c123": 1396, "c2": 406, "c20": 976, "c25": 976, "c3": 406, "c40": 976, "c45": 1396, "c4d79b": [41, 356], "c50": 976, "c567": [41, 356], "c60": 976, "c75": 976, "c80": 976, "c8ae6d2b276": [41, 356], "c93": 976, "c95": 976, "c96": 976, "c97": 976, "c98": 976, "c99": 976, "c_btm_by_a": [427, 851], "c_btm_by_b": [427, 851], "c_by_ca": [427, 757, 851], "c_by_cb": [427, 757, 851], "c_c_c": [830, 928, 970], "c_contigu": [314, 356], "c_max": [639, 851], "c_mean_squar": [335, 946], "c_min": [639, 851], "c_top_by_a": [757, 851], "c_top_by_b": [757, 851], "c_total": 1401, "ca": 784, "cach": [57, 64, 98, 100, 127, 158, 167, 170, 172, 176, 177, 178, 179, 191, 653, 654, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 734, 736, 737, 741, 851, 862, 873, 884, 912, 925, 970, 1251, 1252, 1326, 1328, 1329, 1333, 1373], "cadi": [280, 356], "cafe": [739, 1331], "caf\u00e9": [431, 432, 715, 716, 976, 1045, 1046, 1307, 1308], "calamin": 157, "calcul": [41, 47, 52, 58, 223, 245, 304, 327, 356, 450, 503, 504, 505, 506, 547, 559, 578, 585, 591, 595, 660, 672, 690, 695, 761, 763, 783, 827, 828, 832, 840, 851, 878, 892, 929, 937, 970, 1067, 1068, 1128, 1129, 1130, 1131, 1173, 1185, 1204, 1257, 1264, 1283, 1287, 1363, 1373], "calendar": [72, 73, 245, 260, 288, 326, 356, 457, 468, 470, 477, 482, 495, 499, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 795, 838, 839, 851, 892, 897, 918, 970, 1075, 1086, 1091, 1099, 1104, 1117, 1121, 1129, 1373], "calendar_year": [468, 499], "call": [10, 38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 64, 138, 147, 149, 152, 153, 154, 156, 157, 158, 162, 164, 167, 168, 170, 171, 172, 176, 177, 178, 179, 183, 187, 197, 207, 215, 244, 245, 262, 264, 288, 303, 314, 319, 355, 356, 426, 427, 442, 445, 454, 466, 597, 598, 622, 623, 625, 627, 629, 630, 653, 654, 686, 756, 757, 776, 782, 847, 851, 868, 873, 884, 891, 892, 912, 918, 925, 928, 932, 967, 968, 969, 970, 976, 1039, 1040, 1072, 1084, 1223, 1252, 1279, 1353, 1357, 1358, 1373, 1383, 1387, 1401], "callabl": [53, 54, 55, 59, 60, 61, 62, 97, 147, 167, 238, 264, 279, 285, 342, 356, 406, 589, 597, 598, 623, 624, 643, 661, 785, 786, 799, 812, 813, 825, 851, 902, 911, 916, 953, 970, 1019, 1215, 1223, 1258, 1373], "callback": [47, 52, 53, 54, 55, 144, 146, 356, 970], "caller": [97, 155, 272, 356, 589, 902, 908, 953, 970], "cam": [285, 356, 916, 970], "can": [1, 15, 28, 38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 57, 58, 64, 72, 73, 75, 89, 97, 98, 100, 136, 147, 152, 153, 154, 156, 157, 158, 162, 163, 164, 167, 168, 170, 171, 172, 173, 181, 182, 183, 187, 189, 192, 197, 207, 209, 215, 217, 227, 228, 229, 238, 240, 244, 245, 252, 254, 256, 259, 260, 264, 265, 276, 280, 288, 290, 291, 294, 296, 297, 302, 313, 314, 318, 319, 320, 324, 330, 333, 342, 356, 359, 361, 369, 406, 427, 442, 445, 446, 449, 454, 466, 474, 475, 477, 481, 484, 487, 504, 510, 513, 534, 561, 589, 597, 598, 605, 609, 612, 613, 619, 622, 623, 625, 627, 629, 630, 639, 644, 645, 646, 651, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 683, 685, 690, 693, 698, 707, 714, 718, 720, 721, 722, 729, 730, 731, 734, 745, 751, 757, 774, 776, 789, 792, 799, 801, 805, 806, 809, 813, 830, 834, 841, 847, 850, 851, 862, 868, 869, 873, 874, 879, 881, 882, 884, 892, 896, 897, 903, 918, 920, 922, 923, 925, 927, 928, 932, 939, 942, 943, 970, 976, 978, 1019, 1040, 1065, 1072, 1084, 1096, 1097, 1099, 1103, 1106, 1109, 1129, 1135, 1157, 1187, 1215, 1223, 1228, 1242, 1243, 1244, 1248, 1252, 1271, 1273, 1274, 1277, 1283, 1290, 1291, 1299, 1306, 1312, 1313, 1314, 1321, 1322, 1323, 1326, 1343, 1351, 1353, 1358, 1373, 1378, 1388, 1401], "cancel": [873, 970], "candid": [705, 707, 1297, 1299], "cannot": [1, 47, 49, 50, 51, 52, 64, 65, 109, 112, 152, 153, 157, 158, 160, 162, 163, 164, 172, 189, 207, 260, 264, 291, 292, 314, 333, 342, 356, 411, 487, 507, 577, 598, 613, 681, 700, 726, 747, 813, 851, 873, 874, 884, 897, 912, 925, 943, 945, 953, 970, 976, 1024, 1109, 1203, 1223, 1270, 1292, 1318, 1353, 1373], "capabl": [1, 41, 356], "capac": [231, 300, 356, 1127, 1278, 1373], "capit": [742, 1334], "captur": [705, 707, 720, 721, 1297, 1299, 1312, 1313], "car": [285, 309, 356, 656, 851, 916, 970], "cardin": [214, 356, 373, 770, 851, 867, 970, 986, 1373], "care": [41, 297, 356, 598, 639, 683, 851, 923, 970, 1274, 1373], "cars_revers": [656, 851], "cartesian": [259, 356, 896, 970], "case": [41, 57, 58, 65, 97, 107, 133, 135, 136, 137, 139, 147, 149, 154, 161, 162, 171, 172, 189, 233, 245, 257, 264, 280, 288, 290, 291, 310, 313, 314, 356, 455, 504, 597, 609, 610, 623, 639, 659, 697, 698, 706, 708, 709, 710, 720, 721, 722, 742, 841, 851, 874, 892, 915, 918, 970, 976, 1073, 1129, 1134, 1289, 1290, 1298, 1300, 1301, 1302, 1312, 1313, 1314, 1334, 1351, 1373], "cast": [1, 40, 56, 60, 61, 133, 135, 136, 139, 149, 172, 176, 177, 178, 179, 238, 245, 265, 279, 288, 313, 314, 318, 330, 356, 372, 444, 445, 456, 484, 487, 498, 638, 643, 644, 651, 653, 659, 713, 714, 744, 751, 755, 779, 780, 831, 851, 863, 892, 903, 911, 918, 939, 970, 976, 1049, 1063, 1064, 1074, 1106, 1109, 1120, 1242, 1248, 1305, 1306, 1331, 1336, 1343, 1349, 1353, 1355, 1356, 1373, 1394], "cast_opt": 172, "cast_str_to_int": [279, 356, 911, 970], "cast_to_supertyp": [149, 851], "cat": [27, 57, 98, 100, 447, 646, 697, 699, 740, 743, 755, 780, 846, 851, 976, 1066, 1152, 1244, 1289, 1291, 1332, 1335, 1369, 1373], "catalog": [0, 863], "catalog_nam": [193, 195, 196, 197], "cataloginfo": [194, 205], "categor": [40, 57, 76, 98, 100, 102, 176, 177, 178, 179, 259, 311, 356, 429, 430, 431, 432, 433, 447, 646, 653, 654, 755, 851, 976, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1066, 1244, 1251, 1252, 1355, 1373], "categori": [41, 57, 76, 100, 311, 356, 430, 447, 528, 646, 851, 1043, 1066, 1152, 1244, 1348, 1373], "categorical_as_str": [176, 177, 178, 179], "categoricalord": 70, "categoricaltyp": [308, 356], "caus": [115, 124, 134, 152, 153, 154, 167, 211, 233, 314, 356, 1134, 1353, 1373], "cb": 784, "cba": 731, "cbrt": [851, 1373, 1394], "cbrt_a": 1395, "cc": [507, 797, 851, 976, 1067, 1373, 1396], "ccc": [1, 41, 356, 745, 747, 748, 976, 1396], "ccy": 1404, "cd": [721, 745, 747, 748, 976], "cd34": 721, "cdatainterfac": [134, 210, 979], "cde": [976, 1396], "cdot": [535, 851, 1158, 1373], "cdt": [482, 495, 1104, 1117], "ceil": [60, 851, 1373, 1394], "ceil_a": 1395, "cell": [16, 17, 41, 280, 356], "cent": [457, 1312], "center": [16, 17, 41, 356, 503, 505, 506, 660, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 851, 1128, 1130, 1131, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1373], "central": [168, 169, 207, 547, 690, 851, 1173, 1283, 1373], "centuri": 1397, "certain": [53, 250, 326, 356, 730, 731, 847, 866, 873, 912, 970, 1373], "certainli": [734, 736, 737, 1326, 1328, 1329], "cest": [481, 1103], "cet": [481, 1103], "cfg": [2, 4, 18, 207], "cfg_ascii_fram": 207, "cfg_markdown": 207, "cfg_verbos": 207, "cfoo": [941, 970], "chain": [622, 623, 625, 627, 629, 630, 841], "chanc": [180, 183, 187, 1404], "chang": [31, 32, 33, 34, 35, 38, 40, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 64, 65, 74, 80, 99, 132, 134, 140, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 156, 157, 158, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 215, 245, 259, 261, 265, 280, 288, 303, 308, 313, 318, 319, 325, 326, 332, 356, 359, 360, 361, 427, 446, 447, 450, 454, 466, 487, 503, 505, 506, 528, 598, 639, 640, 646, 653, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 738, 757, 776, 778, 809, 810, 827, 828, 841, 851, 868, 873, 874, 884, 892, 896, 898, 903, 912, 918, 928, 932, 936, 942, 944, 970, 976, 1049, 1065, 1066, 1072, 1084, 1109, 1126, 1128, 1130, 1131, 1152, 1239, 1244, 1251, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1278, 1330, 1347, 1351, 1356, 1373, 1378, 1401], "changes_length": [149, 851], "char": [28, 152, 167, 706, 1298], "char_length": 1396, "charact": [7, 9, 13, 21, 27, 28, 29, 38, 39, 49, 101, 151, 152, 153, 155, 167, 356, 431, 432, 477, 703, 704, 706, 711, 715, 716, 718, 719, 720, 721, 724, 725, 726, 729, 730, 731, 732, 733, 735, 742, 744, 912, 970, 976, 1045, 1046, 1099, 1295, 1296, 1298, 1303, 1307, 1308, 1310, 1311, 1312, 1313, 1316, 1317, 1318, 1321, 1322, 1323, 1327, 1334, 1336, 1396], "character_length": 1396, "characterist": [183, 187], "charli": [152, 1402], "chart": [41, 356, 359, 912, 970, 1373, 1378], "cheap": [217, 218, 295, 331, 356, 871, 872, 921, 940, 970, 1053, 1055, 1373], "cheaper": [564, 1190], "check": [40, 73, 109, 152, 153, 167, 176, 177, 178, 179, 191, 230, 255, 259, 260, 356, 389, 410, 413, 416, 429, 433, 525, 534, 535, 539, 557, 697, 702, 709, 728, 851, 896, 897, 902, 970, 1002, 1023, 1026, 1029, 1042, 1047, 1126, 1148, 1149, 1160, 1163, 1170, 1172, 1183, 1289, 1294, 1301, 1320, 1373], "check_column_ord": [176, 177], "check_dtyp": [176, 177, 178, 179, 975, 1126, 1373], "check_exact": [176, 177, 178, 179], "check_nam": [178, 179, 1126, 1373], "check_ord": [178, 179], "check_order_observ": 944, "check_row_ord": [176, 177], "check_sorted": [260, 356, 897, 970], "children": 143, "choos": [47, 50, 52, 245, 280, 356, 487, 892, 970, 1109], "chrono": [38, 49, 103, 356, 484, 487, 734, 736, 737, 741, 970, 1106, 1109, 1326, 1328, 1329, 1333, 1396, 1397], "chunk": [15, 52, 142, 152, 153, 156, 162, 164, 167, 168, 170, 171, 172, 183, 187, 233, 258, 275, 314, 356, 372, 650, 851, 970, 985, 1052, 1134, 1146, 1229, 1247, 1347, 1353, 1373], "chunk_length": 1373, "chunkedarrai": [133, 275, 356], "citi": [720, 721], "clang": 175, "clariti": [289, 356], "class": [1, 18, 32, 33, 34, 35, 53, 54, 55, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 118, 120, 143, 144, 145, 146, 180, 181, 192, 198, 199, 201, 202, 291, 296, 356, 361, 612, 809, 838, 847, 851, 857, 863, 876, 883, 919, 938, 944, 945, 970, 975, 1352, 1373, 1377, 1385, 1401], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 224, 356, 449, 519, 851, 879, 970, 1383, 1401], "claus": [863, 1391, 1400], "clean": [734, 736, 737, 1326, 1328, 1329], "cleaner": 207, "cleanli": [11, 243, 356, 1401], "clear": [57, 98, 218, 356, 872, 970, 1055, 1373], "clearer": 136, "clickhous": 155, "client": [33, 154, 192], "clip": [851, 1373], "clipboard": [37, 151, 356, 863], "clone": [135, 136, 137, 138, 139, 217, 314, 356, 871, 970, 1053, 1373], "close": [41, 49, 50, 51, 52, 54, 154, 245, 288, 303, 356, 447, 534, 535, 594, 646, 659, 663, 665, 667, 669, 671, 674, 676, 678, 690, 790, 791, 793, 794, 809, 810, 838, 839, 851, 892, 918, 928, 970, 1066, 1157, 1158, 1244, 1283, 1373], "closedinterv": [245, 288, 356, 534, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 809, 810, 838, 839, 851, 892, 918, 970, 1157, 1373], "closest": [133, 260, 356, 897, 970, 1390, 1395], "closur": [663, 665, 674, 676, 678, 851], "cloud": [35, 38, 40, 43, 47, 49, 50, 51, 52, 97, 154, 156, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 197, 356, 863, 914, 970], "cloudi": [720, 721], "cloudpickl": 175, "cluster": 172, "cluster_with_column": [64, 873, 884, 912, 925, 944, 970], "co": [706, 851, 1298, 1373, 1394], "coalesc": [66, 259, 260, 325, 356, 532, 708, 710, 734, 841, 851, 896, 897, 936, 970, 1302, 1326, 1389, 1394], "code": [207, 219, 259, 356, 410, 411, 412, 413, 416, 449, 598, 683, 851, 879, 896, 900, 970, 1274, 1373, 1383], "codebas": 207, "coeffici": [221, 356, 690, 851, 1283, 1373, 1390], "coerc": [66, 652, 851, 1250, 1373], "coerce_int96_timestamp_unit": 56, "coercion": [64, 265, 356, 652, 851, 873, 884, 903, 912, 925, 970, 1250, 1373], "col": [1, 13, 38, 41, 49, 53, 58, 59, 60, 61, 137, 139, 167, 181, 183, 236, 244, 245, 250, 253, 255, 259, 260, 261, 264, 265, 276, 279, 280, 284, 288, 289, 294, 302, 313, 318, 322, 324, 330, 335, 356, 360, 361, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 539, 541, 542, 543, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 620, 621, 622, 624, 626, 628, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 770, 774, 775, 777, 778, 779, 780, 782, 784, 787, 789, 790, 792, 793, 795, 799, 800, 801, 802, 803, 804, 814, 816, 818, 819, 821, 824, 825, 829, 830, 832, 834, 836, 837, 840, 841, 851, 888, 891, 892, 894, 896, 897, 898, 903, 911, 915, 918, 920, 927, 928, 934, 939, 941, 946, 970, 976, 1099, 1103, 1187, 1271, 1273, 1302, 1306, 1326, 1373, 1404], "col0": [183, 1404], "col1": [183, 280, 356, 970, 1404], "col2": [183, 280, 356, 970, 1404], "col3": [280, 356, 1404], "col4": 1404, "col_idx": 213, "col_nam": [279, 356, 598, 841, 851, 911, 970], "col_or_expr": 99, "cole": 148, "coli": [41, 356, 629, 630, 976, 1404], "collaps": [64, 873, 884, 912, 925, 970], "collapse_join": [64, 873, 884, 912, 925, 944, 970], "collect": [10, 49, 50, 51, 52, 56, 61, 64, 65, 97, 132, 167, 168, 169, 173, 183, 184, 187, 227, 228, 262, 280, 303, 308, 321, 322, 356, 361, 507, 539, 578, 579, 580, 581, 598, 779, 797, 801, 829, 830, 833, 851, 866, 867, 868, 870, 871, 874, 877, 878, 879, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 920, 922, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 943, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 967, 969, 970, 976, 1163, 1204, 1205, 1206, 1207, 1373, 1383, 1384, 1385, 1388, 1389, 1401, 1402, 1404], "collect_al": [61, 65, 132, 873, 874, 970], "collect_all_async": [874, 970], "collect_async": [65, 970], "collect_dtyp": [48, 361], "collect_schema": [61, 166, 262, 356, 876, 883, 911, 919, 938, 970], "collis": 66, "colnam": [25, 41, 167, 356], "color": [57, 98, 100, 342, 356, 359, 410, 411, 412, 413, 416, 700, 762, 851, 953, 1023, 1024, 1025, 1026, 1029, 1292, 1362, 1373, 1396], "column": [11, 17, 18, 19, 22, 23, 25, 40, 41, 47, 52, 53, 54, 55, 57, 58, 59, 66, 73, 89, 99, 100, 104, 108, 133, 135, 136, 137, 138, 139, 140, 147, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 183, 199, 202, 212, 213, 215, 216, 219, 221, 222, 225, 226, 227, 228, 229, 232, 236, 237, 240, 241, 243, 244, 245, 249, 250, 255, 256, 257, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 297, 302, 304, 305, 306, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 335, 341, 356, 359, 360, 361, 368, 369, 371, 382, 391, 400, 402, 405, 414, 427, 436, 440, 441, 447, 457, 458, 460, 461, 462, 465, 467, 468, 469, 470, 471, 472, 473, 476, 478, 479, 480, 483, 484, 485, 487, 496, 497, 499, 507, 509, 513, 515, 528, 533, 534, 550, 556, 562, 564, 584, 588, 589, 598, 604, 605, 607, 609, 611, 622, 624, 625, 626, 627, 628, 629, 630, 639, 646, 650, 652, 653, 654, 655, 657, 658, 659, 663, 665, 667, 669, 671, 674, 676, 678, 685, 686, 692, 693, 696, 704, 709, 711, 712, 722, 726, 727, 734, 735, 736, 737, 738, 739, 741, 746, 749, 757, 762, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 851, 868, 870, 877, 880, 881, 882, 883, 885, 888, 891, 892, 896, 897, 898, 902, 903, 904, 905, 906, 907, 909, 910, 913, 915, 916, 918, 919, 920, 921, 923, 927, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 946, 952, 953, 970, 975, 976, 983, 984, 1004, 1013, 1015, 1018, 1027, 1040, 1044, 1048, 1054, 1059, 1060, 1066, 1075, 1078, 1079, 1080, 1083, 1085, 1086, 1090, 1091, 1092, 1094, 1095, 1098, 1100, 1101, 1105, 1106, 1107, 1109, 1118, 1119, 1121, 1133, 1152, 1156, 1182, 1188, 1190, 1210, 1214, 1244, 1250, 1252, 1253, 1256, 1277, 1288, 1296, 1301, 1304, 1318, 1319, 1326, 1328, 1329, 1330, 1331, 1333, 1339, 1342, 1348, 1349, 1358, 1362, 1373, 1389, 1390, 1391, 1393, 1395, 1396, 1398, 1399, 1402, 1403, 1404], "column_0": [1, 264, 320, 356, 914, 970], "column_1": [264, 320, 356, 1398], "column_2": [320, 356, 1398], "column_abc": 16, "column_format": [41, 356], "column_nam": [285, 320, 356, 916, 970], "column_tot": [41, 356], "column_width": [41, 356], "column_x": [152, 153, 157, 163, 167], "column_xyz": 16, "columnar": [137, 139, 257, 290, 356], "columnformatdict": [41, 356], "columninfo": [202, 205], "columnnameorselector": [216, 225, 227, 228, 271, 278, 280, 291, 311, 321, 322, 323, 324, 356, 870, 880, 881, 882, 907, 933, 934, 935, 970], "columnnotfounderror": [240, 241, 356], "columntotalsdefinit": [41, 356], "columnwidthsdefinit": [41, 356], "colx": [41, 356, 629, 630, 976, 1388, 1404], "colz": [976, 1404], "com": [33, 41, 155, 356, 503, 505, 506, 705, 706, 707, 851, 1128, 1130, 1131, 1297, 1298, 1299, 1373], "combin": [47, 52, 64, 66, 132, 236, 245, 246, 260, 280, 284, 288, 326, 356, 370, 383, 504, 517, 613, 638, 654, 659, 729, 730, 731, 790, 791, 793, 794, 838, 839, 841, 851, 873, 884, 892, 897, 912, 915, 918, 925, 970, 1129, 1252, 1321, 1322, 1323, 1373, 1389, 1402], "come": [127, 155, 245, 321, 323, 356, 454, 466, 474, 475, 547, 589, 776, 841, 851, 892, 933, 935, 970, 1072, 1084, 1096, 1097, 1173, 1373], "comm_subexpr_elim": [64, 873, 884, 912, 925, 944, 970], "comm_subplan_elim": [64, 873, 884, 912, 925, 944, 970], "comma": [37, 38, 49, 152, 153, 167, 356, 970], "comment": [152, 153, 167, 198, 199, 201, 202], "comment_prefix": [152, 153, 167], "common": [56, 58, 64, 66, 107, 132, 152, 153, 167, 325, 356, 623, 857, 873, 884, 912, 925, 936, 970, 1377], "commonli": 841, "compact": 1399, "compani": 155, "compar": [172, 176, 177, 178, 179, 230, 236, 284, 356, 501, 502, 522, 524, 534, 549, 596, 633, 634, 851, 888, 915, 970, 1125, 1126, 1235, 1373], "comparison": [173, 236, 284, 356, 888, 915, 970], "compat": [21, 41, 43, 44, 47, 50, 52, 102, 140, 308, 356, 697, 699, 705, 706, 707, 709, 720, 721, 970, 976, 1109, 1289, 1291, 1297, 1298, 1299, 1301, 1312, 1313, 1347, 1373, 1383, 1396, 1397, 1401], "compat_level": [43, 44, 50, 308, 356, 970, 1347, 1373], "compatibleframetyp": [1384, 1386, 1401], "compatlevel": [43, 44, 50, 308, 356, 970, 1347, 1373], "competit": [649, 851, 1246, 1373], "compil": [63, 387, 388, 554, 555, 974, 1000, 1001, 1180, 1181], "complement": 976, "complet": [152, 154, 167, 1402], "complex": [184, 426, 427, 446, 756, 757, 851, 1039, 1040, 1065, 1357, 1358, 1373], "compliant": [41, 356, 487, 1109], "compon": [458, 483, 487, 734, 737, 795, 1076, 1105, 1109, 1326, 1329], "compos": 1402, "composit": [89, 1404], "compound": [140, 291, 356, 976], "comprehens": 181, "compress": [36, 40, 43, 44, 47, 50, 52, 356, 657, 851, 970, 1255, 1373], "compression_level": [47, 52, 356, 970], "comput": [64, 66, 105, 231, 244, 260, 280, 315, 321, 335, 348, 356, 365, 374, 375, 376, 377, 378, 379, 396, 397, 398, 403, 404, 408, 434, 437, 438, 439, 442, 443, 444, 445, 451, 500, 503, 504, 505, 506, 508, 547, 571, 572, 573, 574, 578, 579, 580, 581, 585, 591, 592, 593, 594, 619, 639, 640, 645, 649, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 687, 688, 689, 690, 694, 753, 754, 762, 767, 769, 772, 773, 774, 781, 783, 796, 817, 827, 828, 841, 851, 866, 873, 891, 894, 896, 897, 914, 933, 941, 946, 959, 970, 981, 987, 988, 989, 990, 991, 992, 1009, 1010, 1011, 1016, 1017, 1021, 1050, 1056, 1057, 1058, 1061, 1062, 1063, 1064, 1069, 1123, 1127, 1128, 1129, 1130, 1131, 1132, 1173, 1197, 1198, 1199, 1200, 1204, 1205, 1206, 1207, 1211, 1217, 1218, 1219, 1220, 1228, 1239, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1280, 1281, 1282, 1283, 1286, 1345, 1346, 1354, 1362, 1373, 1395, 1398], "computecontext": [914, 970], "computeerror": [609, 739, 841, 1331], "concat": [57, 98, 100, 108, 153, 260, 356, 897, 941, 970, 1052, 1146, 1229, 1247, 1373, 1394], "concat_list": [561, 796], "concat_w": [303, 356, 830, 928, 970, 1394, 1401], "concaten": [57, 66, 98, 100, 238, 279, 356, 643, 696, 712, 778, 779, 780, 851, 911, 970, 1052, 1229, 1288, 1304, 1373, 1396], "concatmethod": 66, "conclus": [137, 139, 356, 970], "concret": [183, 187], "condit": [41, 228, 236, 261, 284, 289, 356, 429, 433, 513, 534, 535, 702, 728, 775, 799, 841, 851, 888, 898, 915, 970, 1157, 1158, 1373, 1389, 1394, 1400], "conditional_format": [41, 356], "conditionalformatdict": [41, 356], "config": [0, 58, 223, 294, 313, 330, 356, 698, 708, 710, 722, 790, 791, 793, 794, 795, 863, 873, 878, 920, 939, 970, 1290, 1302, 1314], "configur": [5, 33, 40, 56, 156, 164, 166, 168, 169, 172, 207, 356, 359, 864, 873, 884, 912, 925, 945, 970, 1373, 1378], "configure_axisx": [356, 359, 1373, 1378], "configure_point": [356, 359, 1373, 1378], "conflat": [534, 851], "conform": [152, 1404], "confus": [107, 369, 542, 543, 722, 851], "conjunct": [41, 98, 154, 157, 163, 181, 356, 805, 808, 970], "conn": 154, "connect": [38, 39, 43, 47, 49, 50, 51, 52, 76, 152, 154, 155, 158, 160, 162, 164, 167, 170, 171, 172, 173, 197, 356, 864, 970], "connectionorcursor": [39, 154, 356], "connector": 155, "connectorx": [154, 155, 175], "consecut": [235, 356, 409, 512, 518, 696, 712, 720, 851, 887, 970, 1022, 1137, 1142, 1288, 1304, 1313, 1373], "consid": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 98, 99, 100, 132, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 215, 227, 228, 230, 256, 261, 264, 265, 271, 290, 303, 313, 318, 319, 321, 323, 325, 356, 359, 360, 361, 427, 436, 446, 447, 454, 466, 517, 528, 535, 597, 598, 605, 621, 622, 625, 627, 629, 630, 646, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 757, 776, 778, 785, 799, 809, 810, 847, 851, 868, 873, 874, 881, 882, 884, 898, 903, 907, 912, 925, 928, 932, 933, 935, 936, 944, 953, 970, 976, 1040, 1049, 1054, 1065, 1066, 1072, 1084, 1126, 1152, 1158, 1223, 1244, 1257, 1258, 1261, 1263, 1264, 1271, 1273, 1351, 1356, 1358, 1373, 1378, 1383], "consider": 148, "consist": [244, 278, 314, 356, 734, 790, 791, 809, 841, 891, 970, 976, 985, 1134, 1326, 1353, 1373], "consola": [41, 356], "const": 11, "constant": [231, 288, 356, 455, 504, 510, 810, 851, 918, 970, 1073, 1127, 1129, 1135, 1373], "constrain": [58, 167, 227, 228, 356, 881, 882, 970, 976], "constraint": [236, 284, 356, 513, 622, 623, 625, 627, 629, 630, 841, 851, 888, 915, 970, 976, 1403], "construct": [57, 98, 100, 107, 133, 135, 136, 137, 138, 139, 140, 148, 154, 356, 519, 823, 826, 842, 847, 851, 879, 970, 1373, 1388], "construct_categor": 57, "constructor": [148, 157, 187], "consumpt": [53, 54, 55], "contain": [5, 38, 39, 40, 41, 49, 53, 54, 55, 58, 63, 103, 135, 138, 140, 149, 154, 155, 156, 164, 168, 169, 172, 182, 183, 185, 187, 215, 220, 227, 228, 229, 245, 253, 258, 276, 313, 314, 318, 319, 325, 337, 356, 369, 371, 394, 413, 416, 429, 433, 449, 525, 539, 568, 598, 696, 698, 702, 705, 707, 709, 712, 714, 727, 728, 744, 766, 767, 768, 769, 780, 813, 841, 851, 868, 876, 879, 881, 882, 883, 892, 912, 932, 936, 948, 970, 976, 983, 984, 1007, 1042, 1047, 1148, 1149, 1194, 1229, 1288, 1290, 1294, 1297, 1299, 1301, 1304, 1306, 1319, 1320, 1336, 1347, 1353, 1373, 1391], "contains_with_expr": 410, "contains_with_lit": 410, "content": [14, 49, 50, 51, 52, 686, 851, 970, 974, 1279, 1373], "context": [57, 98, 100, 144, 146, 189, 276, 303, 356, 361, 367, 513, 561, 598, 609, 692, 693, 762, 782, 798, 801, 807, 808, 813, 822, 826, 829, 850, 851, 862, 863, 914, 928, 941, 970, 1187, 1362, 1373, 1388, 1401, 1403], "contigu": [66, 133, 134, 138, 152, 153, 156, 158, 160, 162, 164, 167, 168, 170, 171, 172, 283, 314, 356], "continu": [447, 646, 690, 851, 1066, 1244, 1283, 1373, 1390], "contrast": 795, "control": [11, 12, 41, 52, 65, 66, 157, 181, 183, 302, 303, 313, 356, 654, 693, 830, 851, 873, 874, 884, 912, 925, 927, 928, 945, 967, 970, 1252, 1351, 1373, 1385, 1388, 1401], "conveni": [233, 318, 356, 962, 985, 1134, 1373, 1383], "convers": [134, 211, 257, 258, 290, 291, 310, 314, 315, 356, 459, 734, 736, 737, 741, 863, 1077, 1326, 1328, 1329, 1333, 1353, 1354, 1373, 1399, 1401], "convert": [40, 56, 103, 134, 138, 149, 156, 157, 163, 168, 211, 291, 309, 310, 311, 312, 313, 314, 315, 317, 318, 356, 405, 406, 448, 459, 484, 487, 588, 589, 597, 623, 648, 707, 734, 736, 737, 738, 739, 741, 746, 851, 970, 1018, 1019, 1077, 1106, 1109, 1214, 1215, 1299, 1326, 1328, 1329, 1330, 1331, 1333, 1339, 1342, 1350, 1351, 1352, 1353, 1354, 1356, 1373, 1396, 1398, 1399, 1401], "convert_time_zon": [481, 1103], "coo": [285, 356, 916, 970], "coord": 749, "coordin": [41, 356, 1156, 1373], "copi": [37, 133, 134, 151, 209, 211, 217, 218, 258, 308, 314, 315, 330, 356, 510, 851, 871, 872, 939, 970, 978, 1053, 1055, 1135, 1347, 1352, 1353, 1354, 1373, 1401], "corasick": [698, 708, 710, 722, 1290, 1300, 1302, 1314], "core": [1, 261, 356, 898, 970, 1401, 1404], "cores_right": [261, 356, 898, 970], "corner": [21, 41, 140, 356], "corr": [356, 1394], "corrcoef": [221, 356], "correct": [97, 149, 157, 163, 505, 506, 547, 589, 660, 672, 690, 851, 902, 970, 1130, 1131, 1173, 1257, 1264, 1283, 1373], "correctli": [41, 356, 799], "correl": [221, 356, 781, 827, 1390], "correlationmethod": 781, "correspond": [245, 260, 288, 314, 326, 356, 427, 468, 477, 482, 495, 649, 659, 663, 665, 667, 669, 671, 674, 676, 678, 757, 790, 791, 793, 794, 838, 839, 851, 873, 892, 897, 918, 970, 1086, 1099, 1104, 1117, 1246, 1373, 1390], "cosd": 1394, "cosh": [851, 1373], "cosin": [374, 375, 437, 438, 597, 851, 987, 988, 1056, 1057, 1373, 1398], "cost": [261, 291, 356, 720, 898, 970, 1313], "cost_usd": [720, 1313], "cot": [851, 1373, 1394], "cotang": [439, 851, 1058, 1373, 1398], "cotd": 1394, "could": [40, 95, 105, 356, 687, 785, 795, 799, 841, 851, 870, 878, 970, 1280, 1373], "count": [41, 173, 214, 223, 245, 276, 277, 288, 320, 326, 332, 347, 356, 373, 390, 399, 441, 454, 466, 504, 528, 550, 558, 570, 575, 598, 621, 637, 645, 649, 659, 663, 665, 667, 669, 671, 674, 676, 678, 699, 751, 760, 762, 770, 776, 784, 808, 821, 834, 851, 867, 878, 892, 910, 918, 942, 958, 970, 976, 986, 1003, 1012, 1060, 1067, 1072, 1084, 1129, 1152, 1176, 1184, 1196, 1201, 1230, 1238, 1243, 1291, 1343, 1360, 1362, 1373, 1378, 1382, 1394], "count_digit": 699, "count_num": [41, 356], "counterpart": 148, "countri": [260, 356, 455, 897, 970, 1073], "country_holidai": [454, 466, 776, 1072, 1084], "covar": 1390, "covar_samp": 1390, "covari": [149, 783, 828, 851, 1390], "cover": 11, "cow": [718, 719, 1310, 1311], "cpu": [152, 153, 175, 313, 356, 945, 1351, 1373], "crab": [697, 709, 1289, 1301], "crate": [38, 49, 103, 356, 697, 699, 705, 706, 707, 709, 720, 721, 734, 736, 737, 741, 970, 976, 1289, 1291, 1297, 1298, 1299, 1301, 1312, 1313, 1326, 1328, 1329, 1333], "creat": [39, 41, 49, 50, 51, 52, 53, 55, 57, 100, 133, 137, 139, 152, 153, 154, 155, 158, 160, 164, 168, 169, 181, 182, 183, 184, 185, 186, 187, 188, 207, 217, 218, 245, 277, 280, 288, 313, 314, 326, 330, 333, 356, 359, 360, 458, 482, 495, 504, 528, 589, 597, 650, 659, 663, 665, 667, 669, 671, 674, 676, 678, 779, 789, 790, 791, 792, 793, 794, 795, 809, 837, 838, 839, 841, 847, 851, 871, 872, 878, 884, 892, 918, 939, 943, 970, 974, 975, 1053, 1055, 1066, 1076, 1104, 1117, 1129, 1152, 1236, 1244, 1247, 1351, 1353, 1373, 1378, 1400, 1401, 1404], "create_async_engin": 154, "create_engin": [39, 356], "created_at": [198, 201, 202], "created_bi": [198, 201, 202], "creation": [144, 146, 153], "credenti": [32, 33, 34, 35, 38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 863, 970], "credential_provid": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 970], "credentialproviderfunct": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 970], "cross": [259, 356, 896, 970, 1389], "crustacean": [709, 1301], "cst": [482, 495, 1104, 1117], "csv": [37, 38, 49, 50, 51, 52, 53, 54, 55, 151, 152, 153, 157, 158, 167, 200, 356, 863, 970], "csvencod": [152, 153, 167], "csvquotestyl": [38, 49, 356, 970], "ctx": [53, 54, 55, 1382, 1384, 1385, 1386, 1387, 1388, 1401], "cube": [1, 62, 434, 644, 851, 1050, 1373, 1395], "cuda": 945, "cum_count": [851, 1373], "cum_count_revers": [441, 851], "cum_max": [851, 1373], "cum_max_all_fil": [442, 851], "cum_max_revers": [442, 851], "cum_min": [851, 1373], "cum_min_revers": [443, 851], "cum_prod": [366, 851, 1373], "cum_prod_revers": [444, 851], "cum_reduc": 785, "cum_sum": [531, 639, 750, 788, 851, 894, 970, 1172, 1373], "cum_sum_revers": [445, 851], "cumsum_horizont": 787, "cumul": [441, 442, 443, 444, 445, 784, 785, 786, 787, 788, 851, 1060, 1061, 1062, 1063, 1064, 1373], "cumulative_ev": [851, 1373], "cumulative_sal": [639, 851], "current": [2, 3, 5, 6, 31, 38, 39, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 140, 144, 145, 146, 154, 155, 162, 164, 167, 170, 171, 172, 180, 181, 183, 184, 185, 186, 187, 188, 197, 217, 218, 225, 259, 260, 285, 303, 313, 318, 356, 359, 360, 463, 589, 640, 851, 866, 871, 872, 880, 896, 897, 916, 925, 928, 945, 970, 976, 1053, 1055, 1073, 1081, 1239, 1351, 1356, 1373, 1378, 1385, 1401], "cursor": [39, 154, 356], "custom": [1, 28, 40, 41, 59, 60, 61, 62, 106, 148, 165, 186, 188, 223, 264, 280, 342, 356, 406, 454, 466, 484, 487, 589, 597, 598, 661, 762, 776, 812, 813, 851, 878, 902, 953, 970, 1019, 1072, 1084, 1106, 1109, 1215, 1223, 1258, 1362, 1373, 1404], "customis": [41, 356], "cut": [646, 851, 1244, 1373], "cxx": 1396, "cypher": 154, "d": [29, 36, 38, 40, 41, 43, 44, 47, 136, 173, 212, 236, 243, 245, 246, 247, 259, 263, 284, 307, 308, 318, 324, 328, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 366, 368, 441, 464, 484, 487, 534, 604, 643, 679, 685, 699, 706, 720, 721, 726, 734, 736, 737, 777, 778, 795, 801, 830, 851, 888, 892, 896, 915, 928, 949, 951, 954, 955, 956, 957, 958, 959, 960, 970, 976, 1060, 1082, 1106, 1109, 1157, 1182, 1291, 1298, 1312, 1313, 1318, 1326, 1328, 1329, 1340, 1373, 1389, 1391, 1393, 1396, 1397], "d1": [41, 356, 458], "d2": 458, "d3": 458, "d789": [41, 356], "d_4": [726, 1318], "d_awai": [679, 851], "d_to_even": [679, 851], "dai": [72, 73, 90, 245, 258, 260, 288, 326, 356, 359, 454, 466, 474, 475, 477, 478, 480, 482, 484, 487, 488, 495, 497, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 776, 789, 790, 791, 792, 793, 794, 795, 838, 839, 851, 892, 897, 918, 970, 976, 1072, 1084, 1096, 1097, 1099, 1100, 1102, 1104, 1106, 1109, 1110, 1117, 1119, 1129, 1373, 1397], "dark": 1382, "data": [0, 1, 11, 19, 20, 22, 25, 29, 36, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 66, 71, 72, 73, 75, 86, 87, 89, 90, 100, 103, 107, 109, 112, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 205, 209, 211, 218, 219, 229, 231, 232, 233, 243, 244, 245, 257, 258, 259, 262, 264, 278, 279, 280, 283, 289, 290, 291, 293, 297, 300, 308, 313, 314, 315, 318, 320, 330, 334, 354, 356, 360, 361, 369, 370, 371, 374, 375, 376, 377, 378, 379, 382, 385, 386, 387, 388, 389, 391, 394, 396, 397, 398, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 428, 430, 431, 432, 436, 437, 438, 439, 440, 447, 448, 449, 454, 455, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 504, 509, 520, 522, 523, 524, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 549, 550, 554, 555, 557, 562, 568, 570, 577, 588, 590, 596, 598, 633, 634, 638, 639, 646, 648, 649, 652, 653, 654, 655, 657, 658, 663, 665, 667, 669, 671, 674, 676, 678, 679, 681, 683, 688, 689, 690, 696, 699, 700, 701, 704, 705, 706, 707, 711, 712, 713, 714, 715, 716, 724, 725, 726, 727, 734, 735, 736, 737, 739, 741, 744, 753, 754, 755, 758, 759, 765, 771, 779, 782, 789, 790, 791, 792, 793, 794, 795, 805, 806, 808, 809, 810, 811, 812, 813, 823, 826, 837, 838, 839, 842, 847, 851, 863, 871, 872, 879, 883, 885, 891, 892, 919, 923, 939, 970, 975, 978, 983, 984, 996, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1018, 1020, 1023, 1024, 1025, 1027, 1028, 1041, 1043, 1045, 1046, 1053, 1054, 1055, 1066, 1067, 1072, 1073, 1074, 1075, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1126, 1127, 1129, 1133, 1134, 1152, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1178, 1179, 1180, 1181, 1183, 1188, 1194, 1196, 1203, 1214, 1216, 1223, 1237, 1244, 1246, 1250, 1251, 1252, 1253, 1255, 1256, 1268, 1270, 1278, 1283, 1288, 1289, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1303, 1304, 1305, 1306, 1307, 1308, 1316, 1317, 1318, 1319, 1326, 1327, 1328, 1329, 1331, 1333, 1336, 1347, 1352, 1353, 1354, 1355, 1359, 1372, 1373, 1382, 1389, 1396, 1401, 1403], "data_bar": [41, 356], "data_bar_2010": [41, 356], "data_label": [41, 356], "data_page_s": [47, 52, 356, 970], "data_source_format": 202, "databas": [39, 131, 154, 155, 356, 863], "databrick": 192, "databricks_format": 200, "datafram": [0, 1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 85, 97, 104, 107, 108, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 176, 177, 180, 181, 207, 354, 355, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 847, 851, 863, 866, 873, 874, 876, 878, 880, 883, 885, 889, 892, 896, 897, 898, 899, 900, 902, 907, 908, 912, 917, 919, 926, 928, 933, 934, 935, 936, 938, 941, 946, 947, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 970, 975, 976, 1066, 1067, 1103, 1129, 1152, 1223, 1244, 1302, 1306, 1318, 1319, 1342, 1348, 1349, 1362, 1373, 1382, 1383, 1384, 1385, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1401, 1404], "dataframeplot": [356, 359], "dataload": [318, 356], "datapoint": [245, 356, 892, 970], "dataset": [15, 47, 76, 152, 153, 156, 157, 163, 167, 168, 172, 173, 259, 318, 356, 547, 851, 863, 896, 902, 970, 1173, 1373, 1402], "datasourceformat": [202, 205], "datat": [41, 356], "datatyp": [0, 38, 49, 99, 133, 135, 136, 137, 139, 141, 159, 161, 162, 164, 166, 171, 172, 184, 185, 187, 229, 238, 356, 428, 507, 685, 755, 778, 797, 799, 811, 847, 851, 863, 883, 970, 975, 976, 1041, 1067, 1122, 1223, 1277, 1355, 1373, 1399], "datatypeexpr": [48, 99, 361, 414, 428, 597, 654, 713, 771, 805, 806, 851, 870, 970], "date": [17, 41, 58, 73, 152, 153, 155, 157, 163, 164, 167, 170, 172, 173, 216, 223, 243, 245, 258, 260, 288, 303, 356, 359, 454, 456, 457, 458, 459, 462, 464, 466, 467, 468, 470, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 639, 659, 663, 665, 667, 669, 671, 674, 676, 678, 734, 736, 755, 776, 790, 791, 793, 794, 801, 809, 811, 837, 851, 870, 878, 892, 897, 918, 970, 976, 1072, 1074, 1075, 1076, 1077, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1129, 1232, 1233, 1326, 1328, 1355, 1373, 1394, 1397, 1399], "date32": [258, 356], "date_format": [38, 49, 356, 970], "date_min": 477, "date_minus_1y_2mon": 1099, "date_part": 1394, "date_plus_1i": [477, 1099], "date_rang": [260, 326, 356, 462, 464, 478, 486, 497, 793, 794, 897, 970, 1080, 1095, 1100, 1101, 1118, 1119], "date_right": [260, 356, 897, 970], "datetim": [17, 38, 41, 49, 56, 58, 103, 140, 156, 164, 168, 170, 172, 183, 184, 185, 187, 197, 198, 201, 202, 216, 223, 243, 245, 258, 260, 288, 303, 326, 356, 359, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 606, 639, 659, 663, 665, 667, 669, 671, 674, 676, 678, 734, 737, 755, 776, 789, 790, 791, 793, 794, 795, 801, 809, 811, 838, 839, 851, 870, 878, 892, 897, 918, 970, 975, 976, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1129, 1232, 1233, 1326, 1329, 1353, 1355, 1373, 1396, 1397], "datetime_cast": 56, "datetime_format": [38, 49, 356, 970], "datetime_rang": [245, 356, 456, 459, 474, 475, 477, 481, 482, 488, 489, 490, 491, 492, 493, 494, 495, 498, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 851, 892, 970, 1073, 1074, 1077, 1081, 1082, 1083, 1089, 1090, 1092, 1094, 1096, 1097, 1098, 1099, 1103, 1104, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117], "datetime_str": 484, "datetimecastopt": 56, "datetimeindex": 138, "david": 1402, "day_nam": [484, 487], "day_of_month": [462, 478, 497], "day_of_year": [462, 478, 497], "daylight": [245, 260, 288, 326, 356, 455, 463, 477, 482, 495, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 795, 838, 839, 851, 892, 897, 918, 970, 1081, 1099, 1104, 1117], "dayofweek": 1397, "dayofyear": 1397, "days_diff": 488, "db": [39, 154, 155, 356], "dbapi2": 154, "dbc": [699, 1291], "dbreadengin": 155, "dbwriteengin": [39, 356], "dbwritemod": [39, 356], "dd": [41, 356, 1396], "ddd": [1, 41, 356, 745, 747, 748], "dddd": 1396, "ddof": [304, 327, 356, 403, 408, 585, 591, 673, 674, 677, 678, 695, 763, 781, 783, 827, 828, 832, 840, 851, 929, 937, 970, 1016, 1021, 1211, 1217, 1265, 1267, 1287, 1363, 1373], "ddww": 1396, "de": 1396, "deal": [47, 52, 257, 356, 369, 371, 480, 481, 649, 734, 737, 766, 767, 768, 769, 792, 851, 970, 983, 984, 1102, 1103, 1246, 1326, 1329, 1373], "debug": [30, 902, 970, 1404], "decad": [1382, 1397], "decai": [503, 504, 505, 506, 851, 1128, 1129, 1130, 1131, 1373], "decemb": [487, 1109], "decim": [9, 11, 12, 28, 29, 38, 41, 49, 152, 153, 167, 356, 360, 679, 738, 851, 970, 976, 1268, 1330, 1373, 1395], "decimal_comma": [38, 49, 152, 153, 167, 356, 970], "decimal_separ": [9, 28], "declar": [133, 135, 136, 137, 139, 154, 161, 162, 171, 313, 318, 356, 841, 970, 976, 1382], "decod": [152, 153, 713], "decompos": [322, 356, 934, 970], "decompress": [47, 50, 52, 356, 970], "decor": [57, 59, 60, 61, 62, 183, 187, 264, 356, 598, 851, 862, 863, 1223, 1373], "dedic": [1, 134, 257, 290, 356, 976, 1401], "deem": [223, 356, 878, 970], "deepcopi": [217, 356, 871, 970, 1053, 1373], "def": [1, 57, 59, 60, 61, 62, 154, 181, 183, 187, 207, 279, 320, 356, 366, 643, 703, 706, 731, 765, 812, 851, 874, 911, 970, 976, 1295, 1298, 1404], "default": [4, 5, 9, 10, 11, 15, 28, 31, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 64, 65, 66, 70, 73, 74, 75, 133, 134, 135, 136, 137, 138, 139, 140, 149, 152, 153, 155, 157, 158, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 207, 223, 224, 227, 228, 231, 240, 244, 245, 246, 257, 259, 260, 265, 269, 271, 278, 280, 288, 289, 290, 291, 292, 296, 299, 303, 304, 306, 311, 313, 314, 318, 321, 323, 324, 325, 327, 332, 341, 356, 368, 369, 371, 389, 394, 401, 406, 414, 447, 449, 454, 466, 480, 481, 487, 500, 502, 503, 505, 506, 526, 539, 557, 564, 568, 577, 582, 583, 585, 589, 591, 592, 597, 605, 606, 609, 612, 631, 632, 634, 639, 640, 646, 649, 653, 654, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 684, 686, 695, 696, 705, 712, 724, 729, 730, 731, 734, 736, 737, 739, 741, 762, 763, 766, 768, 771, 775, 776, 777, 780, 781, 783, 790, 791, 792, 793, 794, 795, 798, 801, 805, 806, 807, 809, 810, 811, 817, 823, 826, 829, 832, 833, 835, 838, 839, 840, 841, 842, 851, 873, 874, 878, 879, 881, 882, 884, 891, 892, 896, 897, 903, 907, 912, 914, 918, 922, 924, 925, 928, 929, 933, 935, 936, 937, 942, 945, 952, 970, 974, 976, 983, 984, 1002, 1007, 1014, 1019, 1027, 1054, 1066, 1067, 1072, 1084, 1102, 1103, 1109, 1123, 1127, 1128, 1130, 1131, 1150, 1163, 1183, 1190, 1194, 1203, 1208, 1209, 1215, 1232, 1233, 1239, 1244, 1246, 1251, 1252, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1276, 1279, 1287, 1288, 1289, 1297, 1301, 1304, 1316, 1321, 1322, 1323, 1326, 1328, 1329, 1331, 1333, 1351, 1353, 1362, 1363, 1373, 1395, 1396, 1404], "default_match": [697, 709], "default_scop": 35, "defaultazurecredenti": 34, "defaultdict": [291, 356], "defer": [207, 356, 359, 360, 1373, 1378], "defin": [38, 41, 49, 56, 73, 76, 154, 161, 164, 172, 180, 181, 183, 216, 227, 228, 232, 245, 264, 276, 279, 288, 325, 342, 356, 432, 534, 564, 598, 643, 646, 658, 659, 663, 665, 667, 669, 671, 674, 676, 678, 711, 716, 724, 735, 742, 790, 791, 793, 794, 809, 810, 813, 833, 838, 839, 851, 870, 881, 882, 885, 892, 911, 918, 936, 953, 970, 974, 975, 976, 1046, 1157, 1190, 1223, 1244, 1256, 1303, 1308, 1316, 1327, 1334, 1373], "definit": [41, 77, 356, 547, 660, 851, 975, 976, 1173, 1257, 1373], "deflat": [36, 356], "deg": 1398, "degre": [304, 327, 356, 585, 591, 648, 673, 674, 677, 678, 695, 763, 773, 783, 827, 828, 832, 840, 851, 929, 937, 970, 1265, 1267, 1287, 1363, 1373, 1394], "delai": 97, "delet": [76, 1389, 1400], "deletionfil": 172, "delimit": [46, 49, 162, 171, 280, 311, 356, 696, 712, 970, 1288, 1304, 1348, 1373, 1396], "delta": [40, 156, 168, 200, 304, 327, 356, 585, 591, 673, 674, 677, 678, 695, 763, 783, 827, 828, 832, 840, 851, 863, 929, 937, 970, 1265, 1267, 1287, 1363, 1373], "delta_merge_opt": [40, 356], "delta_table_opt": [156, 168, 197], "delta_table_vers": 197, "delta_write_opt": [40, 356], "deltalak": [40, 156, 168, 175, 197, 356], "deltashar": 200, "deltat": [40, 156, 168, 356], "demo": [41, 356], "demonstr": [152, 517, 851, 976], "dens": [21, 243, 356, 649, 851, 1246, 1373], "densiti": [1373, 1378], "depend": [47, 53, 57, 63, 100, 154, 157, 163, 175, 212, 213, 356, 387, 388, 554, 555, 609, 646, 649, 795, 798, 801, 807, 851, 980, 1000, 1001, 1180, 1181, 1244, 1246, 1373, 1404], "deploi": [183, 187], "deprec": [40, 64, 67, 152, 153, 164, 172, 180, 181, 182, 183, 187, 190, 214, 271, 314, 332, 337, 356, 461, 498, 519, 597, 598, 616, 653, 696, 704, 764, 773, 781, 782, 851, 867, 873, 884, 907, 912, 922, 925, 935, 941, 942, 948, 970, 1048, 1079, 1088, 1089, 1120, 1149, 1251, 1288, 1296, 1353, 1373], "depth": 148, "desc": [976, 1382, 1385, 1389, 1391], "descend": [58, 215, 297, 302, 319, 356, 382, 402, 427, 584, 639, 649, 682, 683, 692, 693, 757, 762, 774, 851, 868, 923, 927, 932, 970, 995, 1015, 1170, 1210, 1246, 1272, 1274, 1285, 1362, 1373], "describ": [183, 243, 356, 717, 970, 1309, 1373], "descript": [245, 356, 892, 970, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1399, 1402, 1403], "deseri": [148, 296, 356, 519, 612, 851, 922, 970], "deserializ": [224, 296, 356, 449, 612, 851, 879, 922, 970], "design": [313, 318, 356, 866], "desir": [183, 259, 356, 406, 498, 589, 896, 970, 1019, 1120, 1215], "destin": 155, "detail": [63, 134, 154, 155, 176, 178, 211, 245, 325, 356, 487, 755, 851, 892, 936, 945, 970, 1109, 1355, 1373, 1404], "determin": [15, 38, 41, 49, 58, 66, 95, 148, 152, 153, 154, 157, 163, 164, 167, 172, 174, 215, 219, 238, 245, 257, 258, 264, 288, 319, 320, 326, 356, 361, 427, 466, 467, 480, 481, 528, 589, 609, 646, 652, 654, 690, 698, 711, 734, 735, 737, 738, 757, 792, 810, 823, 826, 842, 851, 868, 875, 876, 883, 892, 918, 932, 938, 970, 1040, 1084, 1085, 1102, 1103, 1152, 1215, 1244, 1250, 1251, 1252, 1283, 1290, 1326, 1329, 1330, 1358, 1373], "determinist": [762, 851, 1362, 1373], "dev": [210, 979, 1265, 1373], "develop": [155, 183, 187], "deviat": [304, 356, 505, 673, 674, 695, 832, 851, 929, 970, 1130, 1287, 1373, 1390], "devic": [313, 356, 873, 884, 912, 925, 945, 970, 1351, 1373], "devicememoryresourc": 945, "df": [1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 59, 60, 85, 104, 108, 134, 135, 136, 137, 138, 139, 140, 153, 154, 155, 167, 180, 181, 183, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 414, 415, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 738, 739, 740, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 847, 851, 892, 918, 934, 936, 950, 953, 961, 970, 976, 1103, 1129, 1302, 1306, 1318, 1319, 1349, 1373, 1378, 1382, 1383, 1384, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1401, 1404], "df0": [272, 356, 908, 970, 1388], "df1": [58, 66, 176, 177, 230, 233, 272, 303, 328, 356, 908, 970, 1385, 1387, 1388, 1389, 1401], "df2": [58, 66, 176, 177, 230, 233, 328, 356, 1385, 1387, 1388, 1389, 1401], "df3": [58, 356], "df4": 356, "df5": 356, "df6": 356, "df_a": 1401, "df_a1": 66, "df_a2": 66, "df_a3": 66, "df_agg_nuniqu": [276, 356], "df_b": 1401, "df_count": [762, 851], "df_current_batch": 153, "df_d1": 66, "df_d2": 66, "df_from_str_repr": [312, 356], "df_h1": 66, "df_h2": 66, "df_new_grid": [532, 851], "df_nuniqu": [276, 356], "df_original_grid": [532, 851], "df_panda": 1383, "df_pd": 134, "df_tempor": [663, 665, 667, 669, 671, 674, 676, 678, 851], "dfi": 211, "diagon": [66, 320, 356], "diagonal_relax": 66, "diagram": [914, 970], "dict": [31, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 59, 61, 63, 133, 135, 136, 137, 138, 139, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 183, 197, 198, 201, 202, 237, 257, 278, 289, 290, 291, 309, 310, 313, 318, 320, 356, 851, 970, 975, 976, 1140, 1373, 1386], "dictat": [149, 477, 851, 1099], "dictionari": [31, 38, 40, 41, 43, 47, 49, 50, 51, 52, 63, 89, 133, 135, 136, 137, 139, 148, 152, 153, 154, 155, 156, 159, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 197, 257, 278, 289, 290, 291, 309, 310, 313, 318, 356, 970, 975], "did": [455, 1073], "diff": [330, 356, 488, 489, 490, 491, 492, 493, 494, 578, 851, 939, 970, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1204, 1373], "differ": [41, 47, 56, 103, 106, 127, 152, 157, 172, 173, 176, 178, 207, 227, 233, 245, 246, 257, 259, 280, 288, 290, 291, 310, 313, 314, 320, 356, 450, 462, 477, 478, 481, 487, 496, 502, 517, 526, 535, 559, 578, 580, 589, 631, 632, 634, 639, 653, 654, 734, 760, 798, 801, 807, 851, 864, 881, 882, 884, 892, 896, 918, 970, 974, 976, 1068, 1080, 1099, 1100, 1103, 1109, 1118, 1125, 1134, 1150, 1158, 1185, 1204, 1206, 1223, 1232, 1233, 1235, 1251, 1252, 1326, 1373, 1397, 1399, 1401], "digit": [74, 643, 679, 680, 706, 851, 976, 1268, 1269, 1291, 1298, 1373, 1404], "dimens": [133, 135, 137, 139, 161, 162, 171, 356, 655, 851, 970, 1253, 1353, 1373], "dimension": [135, 137, 139, 314, 356, 970, 1373], "direct": [41, 155, 164, 169, 172, 299, 313, 324, 356, 401, 582, 684, 851, 924, 970, 1014, 1208, 1276, 1373], "directli": [6, 31, 41, 65, 66, 154, 183, 187, 207, 213, 291, 313, 356, 503, 505, 506, 654, 826, 851, 874, 970, 1128, 1130, 1131, 1252, 1351, 1373, 1385, 1401, 1404], "directori": [41, 47, 49, 50, 51, 52, 53, 55, 149, 164, 167, 170, 172, 356, 970], "dirpath": [36, 38, 43, 44, 47, 167, 356], "disabl": [47, 52, 57, 98, 100, 164, 170, 184, 257, 356, 873, 970], "disable_string_cach": 100, "disallow": 183, "discard": [236, 284, 356, 513, 851, 888, 915, 970, 1138, 1373], "disco": [708, 710, 1300, 1302], "discont": [708, 710, 1300, 1302], "discourag": [598, 851], "discoveri": [280, 356], "discret": [447, 450, 500, 559, 578, 646, 851, 1066, 1068, 1123, 1185, 1204, 1244, 1373], "disk": [47, 49, 50, 51, 52, 158, 356, 613, 864, 925, 970], "dispatch": 976, "displai": [7, 11, 12, 13, 14, 18, 19, 20, 24, 25, 26, 27, 41, 223, 243, 356, 878, 884, 925, 970], "distanc": [260, 356, 897, 970], "distinct": [41, 187, 278, 280, 334, 356, 389, 407, 538, 539, 541, 557, 590, 649, 658, 795, 851, 1002, 1020, 1162, 1163, 1165, 1183, 1216, 1246, 1256, 1373, 1390, 1400, 1402, 1404], "distinct_count": [47, 52, 356, 970], "distinguish": [487, 1109], "distribut": [547, 690, 851, 914, 970, 1173, 1283, 1373], "div": 1394, "diverg": [64, 132], "divid": [21, 447, 482, 495, 503, 505, 506, 517, 547, 646, 649, 851, 1066, 1104, 1117, 1128, 1130, 1131, 1173, 1244, 1373, 1390, 1395], "divis": [517, 758, 851, 1395], "divisor": [304, 327, 356, 585, 591, 673, 674, 677, 678, 695, 763, 783, 827, 828, 832, 840, 851, 929, 937, 970, 1265, 1267, 1287, 1363, 1373], "dl": [318, 356], "do": [1, 41, 56, 58, 64, 135, 136, 139, 152, 164, 167, 172, 176, 177, 178, 179, 212, 223, 225, 233, 256, 259, 260, 280, 285, 308, 320, 324, 356, 359, 454, 561, 597, 720, 721, 729, 730, 731, 781, 823, 826, 842, 851, 869, 873, 878, 880, 884, 896, 897, 902, 912, 914, 916, 925, 945, 970, 976, 1065, 1072, 1134, 1187, 1312, 1313, 1321, 1322, 1323, 1356, 1373, 1378], "do_polars_oper": 30, "do_someth": 154, "do_various_th": 207, "doc": [40, 43, 44, 134, 155, 158, 160, 176, 178, 209, 210, 221, 356, 978, 979], "document": [33, 103, 152, 155, 209, 356, 360, 484, 487, 714, 734, 736, 737, 741, 847, 945, 978, 1106, 1109, 1306, 1326, 1328, 1329, 1333], "doe": [11, 38, 40, 49, 50, 51, 52, 58, 64, 65, 121, 133, 135, 136, 137, 139, 140, 152, 153, 154, 155, 156, 157, 161, 162, 167, 168, 171, 173, 213, 218, 233, 240, 245, 246, 258, 259, 265, 284, 289, 290, 291, 321, 330, 333, 356, 359, 360, 498, 513, 517, 526, 589, 698, 708, 710, 722, 730, 731, 760, 847, 851, 866, 872, 873, 874, 878, 884, 888, 892, 896, 902, 903, 912, 915, 925, 933, 939, 943, 970, 1055, 1120, 1134, 1138, 1150, 1278, 1290, 1300, 1302, 1314, 1373, 1378, 1396], "doesn": [40, 152, 167, 245, 260, 356, 500, 851, 892, 897, 970, 1123, 1373], "dog": [697, 740, 743, 780, 1289, 1332, 1335], "doi": 1397, "dollar": [720, 721, 1312, 1313], "domain": [1, 706, 1298], "don": [66, 245, 260, 264, 321, 324, 356, 446, 561, 598, 639, 851, 892, 897, 933, 970, 976, 1065, 1187, 1223, 1373], "done": [49, 50, 51, 52, 64, 65, 132, 153, 173, 207, 214, 260, 356, 372, 373, 639, 851, 867, 870, 873, 874, 884, 897, 912, 970, 986, 1373], "dot": [58, 613, 847, 851, 914, 925, 970, 1373], "doubl": [315, 356, 720, 721, 1312, 1313], "dow": 1397, "down": [167, 170, 171, 172, 173, 216, 356, 428, 516, 851, 1141, 1373], "downcast": 56, "download": [162, 167, 170, 171, 613, 925, 970], "downstream": [314, 356, 683, 851, 1274, 1373], "dr": 169, "drago": [711, 1303], "dragon": 711, "dragonfr": 1303, "dragonfruit": [711, 724, 735, 1303, 1316, 1327], "dramat": 157, "draw": [21, 26, 183, 187, 1404], "drawback": 847, "drawfn": 1404, "drawing_charact": 21, "dremio": 154, "driver": [39, 154, 155, 356], "drop": [1, 136, 226, 227, 228, 264, 284, 321, 330, 356, 450, 452, 453, 559, 560, 646, 851, 881, 882, 915, 933, 939, 970, 1068, 1070, 1071, 1185, 1186, 1244, 1373, 1400], "drop_dupl": [321, 356, 933, 970], "drop_empty_col": [157, 163], "drop_empty_row": [157, 163], "drop_first": [311, 356, 1348, 1373], "drop_in_plac": 356, "drop_nan": [228, 356, 453, 851, 882, 970, 1071, 1373], "drop_nul": [227, 311, 356, 452, 851, 881, 970, 1070, 1348, 1373], "dset": 173, "dst": [482, 495, 1104, 1117], "dst_offset": [455, 1073], "dt": [1, 41, 58, 157, 163, 288, 356, 659, 795, 851, 860, 918, 970, 976, 1381, 1396, 1397], "dt1": 1396, "dt2": 1396, "dtm": [41, 356, 458, 487, 976, 1076, 1109, 1396], "dtm_iso": 487, "dtm_iso_strict": 487, "dtype": [11, 41, 56, 57, 61, 67, 73, 77, 89, 98, 100, 110, 133, 135, 137, 139, 140, 152, 153, 154, 155, 157, 161, 162, 163, 167, 171, 180, 181, 182, 183, 187, 209, 211, 216, 219, 231, 245, 260, 288, 312, 313, 314, 315, 318, 324, 333, 356, 414, 428, 429, 430, 431, 432, 433, 444, 445, 487, 498, 507, 520, 556, 564, 595, 597, 598, 605, 644, 651, 652, 659, 685, 687, 713, 734, 739, 751, 755, 761, 771, 778, 797, 799, 801, 805, 806, 808, 809, 810, 811, 812, 813, 823, 826, 833, 842, 851, 870, 875, 892, 897, 918, 943, 970, 975, 976, 978, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1027, 1041, 1042, 1043, 1045, 1046, 1047, 1053, 1063, 1064, 1067, 1068, 1109, 1120, 1127, 1160, 1178, 1179, 1182, 1190, 1214, 1221, 1223, 1242, 1250, 1254, 1277, 1280, 1305, 1326, 1331, 1343, 1350, 1351, 1353, 1354, 1355, 1356, 1361, 1373, 1401, 1404], "dtype_format": [41, 356], "dtype_of": 361, "dtypekind": 211, "dtypelik": [209, 978], "dtypeoper": [1, 61], "dubiou": 103, "duckdb": 140, "due": [245, 260, 288, 291, 326, 356, 368, 463, 477, 482, 495, 622, 623, 625, 627, 629, 630, 659, 663, 665, 667, 669, 671, 674, 676, 678, 776, 790, 791, 793, 794, 838, 839, 851, 870, 892, 897, 918, 970, 1081, 1099, 1104, 1117], "dummi": [311, 356, 1348, 1373], "dump": 148, "duplic": [58, 108, 252, 259, 260, 261, 321, 325, 356, 368, 536, 622, 646, 841, 851, 896, 897, 898, 933, 936, 970, 1159, 1244, 1373, 1402], "duplicateerror": [646, 851, 1244, 1373], "dur": [261, 356, 898, 970], "durat": [207, 260, 326, 356, 455, 463, 487, 488, 489, 490, 491, 492, 493, 494, 498, 504, 755, 790, 791, 793, 794, 838, 839, 851, 897, 970, 975, 976, 1073, 1081, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1120, 1129, 1353, 1355, 1373], "dure": [49, 50, 51, 52, 57, 64, 65, 107, 132, 152, 153, 167, 172, 207, 233, 356, 864, 873, 874, 884, 912, 944, 970, 1134, 1373], "dutch": [454, 466, 776, 1072, 1084], "dynam": [149, 245, 356, 406, 589, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 851, 892, 970, 974, 1019, 1215], "dynamicgroupbi": [245, 356], "e": [11, 34, 36, 38, 40, 43, 44, 47, 49, 148, 152, 158, 160, 164, 166, 170, 172, 173, 185, 224, 236, 243, 247, 256, 260, 263, 307, 308, 314, 324, 356, 366, 449, 500, 504, 507, 534, 535, 592, 598, 603, 604, 605, 606, 607, 609, 610, 611, 613, 614, 615, 685, 690, 709, 730, 731, 742, 797, 813, 830, 841, 851, 879, 888, 897, 900, 916, 970, 974, 976, 1123, 1129, 1157, 1283, 1301, 1334, 1373, 1391, 1396, 1404], "e101": [41, 356], "e_filt": [609, 611], "e_sum_ov": [609, 611], "e_sum_slic": [609, 611], "each": [38, 41, 49, 53, 54, 55, 58, 67, 74, 85, 153, 154, 157, 162, 171, 176, 177, 178, 179, 181, 220, 222, 229, 236, 243, 244, 245, 258, 260, 264, 278, 280, 284, 288, 290, 292, 313, 318, 322, 325, 326, 334, 335, 337, 339, 341, 342, 350, 356, 382, 427, 431, 432, 447, 466, 482, 495, 513, 538, 541, 567, 570, 577, 587, 594, 598, 646, 649, 657, 658, 666, 670, 681, 686, 693, 706, 710, 711, 715, 716, 724, 726, 727, 735, 742, 757, 771, 774, 780, 805, 806, 810, 833, 841, 851, 873, 876, 877, 883, 888, 892, 897, 912, 915, 918, 934, 936, 946, 948, 950, 952, 953, 961, 970, 995, 1045, 1046, 1052, 1066, 1084, 1104, 1117, 1162, 1165, 1193, 1196, 1203, 1213, 1244, 1246, 1255, 1256, 1270, 1279, 1298, 1302, 1303, 1307, 1308, 1316, 1318, 1319, 1327, 1334, 1342, 1373, 1390, 1396, 1401, 1402, 1404], "eager": [97, 245, 260, 280, 324, 356, 456, 459, 462, 464, 474, 475, 477, 478, 481, 482, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 663, 665, 667, 669, 671, 674, 676, 678, 771, 775, 777, 781, 783, 790, 791, 793, 794, 801, 805, 806, 809, 810, 823, 826, 829, 830, 833, 838, 839, 842, 850, 851, 892, 897, 902, 970, 975, 1073, 1074, 1077, 1080, 1081, 1082, 1083, 1089, 1090, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1401], "eager_execut": 1401, "eagerli": [589, 1382], "ear": [724, 735, 1316], "earlier": [260, 356, 897, 970], "earliest": [245, 356, 480, 481, 734, 737, 792, 892, 962, 970, 1102, 1103, 1326, 1329], "easi": 207, "easiest": 212, "easili": [58, 294, 318, 330, 335, 356, 833, 847, 920, 939, 946, 970], "east": [76, 172, 261, 356, 898, 970], "ebf1d": [41, 356], "ed": [261, 356, 898, 970], "edg": [528, 851, 1152, 1373], "eee": [1, 41, 356, 976], "ef": 721, "effect": [41, 49, 50, 51, 52, 56, 238, 245, 356, 463, 517, 598, 624, 626, 628, 781, 851, 892, 942, 943, 970, 1073, 1081], "effici": [134, 154, 256, 258, 356, 866], "efgh": 1396, "eg": [18, 26, 27, 41, 66, 155, 207, 313, 356, 734, 737, 758, 851, 976, 1326, 1329], "egnaro": 1396, "either": [64, 65, 89, 149, 183, 255, 259, 260, 261, 278, 288, 289, 313, 314, 356, 504, 597, 644, 646, 659, 682, 734, 766, 774, 778, 833, 851, 873, 874, 896, 897, 898, 900, 918, 970, 974, 976, 1129, 1242, 1244, 1272, 1326, 1373, 1386, 1404], "element": [14, 15, 26, 178, 179, 182, 183, 185, 187, 212, 213, 215, 222, 255, 280, 289, 302, 304, 319, 327, 356, 374, 375, 376, 377, 378, 379, 390, 391, 426, 427, 434, 437, 438, 439, 440, 442, 443, 444, 445, 446, 452, 453, 508, 509, 513, 526, 530, 539, 550, 552, 553, 558, 560, 561, 562, 565, 570, 578, 579, 580, 581, 585, 586, 591, 593, 594, 598, 639, 640, 649, 652, 660, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 682, 687, 688, 689, 693, 694, 695, 726, 727, 738, 753, 754, 756, 757, 763, 774, 783, 809, 827, 828, 832, 840, 851, 868, 877, 927, 929, 932, 937, 970, 987, 988, 989, 990, 991, 992, 998, 999, 1003, 1004, 1017, 1039, 1040, 1050, 1053, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1070, 1071, 1132, 1133, 1138, 1139, 1151, 1154, 1163, 1172, 1174, 1176, 1177, 1178, 1179, 1184, 1186, 1187, 1188, 1191, 1196, 1204, 1205, 1206, 1207, 1212, 1219, 1220, 1223, 1239, 1246, 1250, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1272, 1280, 1281, 1282, 1286, 1287, 1318, 1319, 1330, 1344, 1345, 1346, 1350, 1357, 1358, 1359, 1363, 1373, 1390, 1391], "elementwis": [597, 639, 661, 662, 664, 666, 668, 670, 673, 675, 677, 851, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1373], "elig": [902, 970], "elimin": [64, 132, 547, 851, 1173, 1373], "elis": [272, 356, 908, 970], "ellips": 21, "ellipsi": [243, 356], "elppa": 1396, "els": [153, 1243, 1343, 1373], "email": [706, 1298], "email_part": [706, 1298], "emphas": [356, 360], "emploi": 976, "empti": [14, 36, 38, 49, 112, 136, 152, 153, 157, 163, 165, 167, 217, 218, 245, 271, 323, 356, 645, 696, 704, 751, 811, 829, 834, 851, 871, 872, 892, 907, 935, 970, 975, 976, 1053, 1055, 1139, 1160, 1174, 1243, 1288, 1296, 1343, 1373], "en": [21, 41, 356], "enabl": [29, 30, 47, 52, 57, 64, 65, 98, 100, 156, 164, 168, 170, 176, 177, 178, 179, 191, 209, 294, 315, 330, 356, 369, 371, 653, 654, 683, 698, 708, 710, 722, 762, 847, 851, 873, 874, 884, 912, 920, 925, 939, 970, 978, 983, 984, 1251, 1252, 1274, 1290, 1300, 1302, 1314, 1354, 1362, 1373], "enable_string_cach": 98, "encapsul": [38, 49, 356, 970], "enclos": [519, 851], "encod": [70, 76, 88, 148, 152, 153, 167, 311, 356, 359, 411, 519, 657, 700, 746, 851, 1024, 1255, 1292, 1348, 1373, 1378], "encompass": [528, 851, 1152, 1373], "encount": [56, 123, 152, 153, 167, 172, 245, 356, 631, 632, 713, 714, 781, 785, 799, 851, 892, 970, 1232, 1233, 1305, 1306, 1373], "end": [38, 41, 49, 152, 153, 167, 245, 251, 280, 356, 410, 413, 416, 429, 433, 455, 482, 507, 532, 533, 583, 697, 702, 706, 711, 718, 724, 728, 729, 730, 733, 771, 776, 789, 790, 791, 792, 793, 794, 797, 805, 806, 809, 810, 838, 839, 841, 847, 851, 892, 895, 912, 970, 976, 1026, 1042, 1047, 1073, 1104, 1155, 1156, 1170, 1209, 1294, 1298, 1303, 1310, 1316, 1320, 1321, 1322, 1327, 1373, 1396], "endian": [414, 1027], "endpoint": [192, 447, 646, 809, 851, 1066, 1244, 1373], "ends_a": 1396, "ends_in_digit": 1396, "ends_with": [410, 416, 433, 697, 728, 976, 1047, 1320, 1394], "ends_with_expr": 413, "ends_with_lit": 413, "engin": [10, 15, 39, 49, 50, 51, 52, 64, 65, 97, 147, 154, 155, 157, 163, 189, 244, 259, 264, 314, 321, 342, 356, 597, 830, 851, 873, 874, 884, 891, 896, 902, 907, 912, 925, 933, 945, 953, 967, 970, 974, 1223, 1353, 1373, 1385, 1401], "engine_opt": [39, 157, 356], "enginetyp": [49, 50, 51, 52, 64, 65, 873, 874, 884, 912, 925, 970], "enough": [561, 690, 851, 1187, 1283, 1373], "ensur": [11, 41, 53, 55, 97, 149, 155, 182, 185, 209, 236, 244, 265, 278, 280, 284, 289, 314, 356, 534, 597, 851, 888, 891, 902, 903, 915, 945, 970, 976, 978, 1353, 1373], "enter": 207, "entir": [41, 157, 163, 356], "entri": [207, 356, 970, 975, 1401], "entropi": [851, 1373], "enumer": [76, 138, 152, 153, 157, 163, 167, 258, 356], "env": [4, 188], "env_onli": 31, "environ": [4, 31, 38, 43, 47, 49, 50, 51, 52, 64, 65, 149, 162, 164, 167, 170, 171, 172, 186, 189, 192, 197, 313, 356, 873, 874, 884, 912, 925, 970], "eol_char": [152, 153, 167], "eparg": 1396, "epoch": [72, 73, 495, 801, 1117, 1397], "epoch_": [464, 1082], "epoch_n": [464, 1082], "epochtimeunit": [464, 801, 1082], "eq": [236, 284, 356, 502, 513, 851, 888, 915, 970, 1125, 1373], "eq_miss": [851, 1235, 1373], "equal": [57, 100, 152, 153, 167, 176, 177, 178, 179, 245, 260, 261, 272, 302, 356, 447, 495, 501, 502, 522, 535, 549, 589, 634, 646, 652, 660, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 693, 718, 719, 722, 744, 774, 809, 827, 828, 841, 847, 851, 888, 892, 897, 898, 908, 915, 927, 970, 1066, 1104, 1125, 1158, 1215, 1235, 1244, 1250, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1310, 1311, 1314, 1336, 1373, 1390, 1393, 1404], "equiprob": [223, 282, 348, 356, 647, 670, 671, 824, 851, 878, 913, 959, 970, 1067, 1245, 1263, 1373], "equival": [41, 66, 133, 135, 136, 137, 139, 161, 162, 171, 245, 255, 276, 356, 366, 370, 432, 501, 502, 504, 517, 522, 524, 549, 596, 618, 620, 633, 634, 635, 638, 644, 716, 740, 742, 743, 750, 758, 765, 851, 892, 970, 1046, 1124, 1125, 1129, 1145, 1147, 1172, 1175, 1222, 1234, 1235, 1308, 1332, 1334, 1335, 1373, 1383, 1391, 1403], "err": 707, "error": [15, 40, 56, 65, 66, 97, 118, 122, 124, 135, 136, 139, 147, 152, 153, 157, 164, 167, 172, 260, 265, 280, 289, 314, 356, 368, 393, 394, 411, 454, 564, 566, 568, 589, 622, 654, 697, 700, 705, 707, 709, 713, 714, 734, 736, 737, 741, 851, 870, 874, 897, 903, 945, 953, 970, 1006, 1007, 1024, 1072, 1190, 1192, 1194, 1252, 1289, 1292, 1297, 1299, 1301, 1305, 1306, 1326, 1328, 1329, 1333, 1353, 1373, 1399], "escap": [101, 152, 153, 155, 167, 703, 720, 721, 1295, 1312, 1313], "esp": 15, "especi": [181, 658, 851, 970, 1256, 1373], "espresso": 976, "est": 793, "establish": [154, 207], "estim": [152, 153, 214, 231, 356, 373, 505, 506, 547, 770, 851, 867, 970, 986, 1127, 1130, 1131, 1173, 1373], "estimated_s": [356, 1373], "etc": [22, 40, 41, 149, 152, 156, 157, 158, 160, 168, 169, 356, 851, 976, 1271, 1273, 1373, 1397], "eu": [168, 169], "eur": [243, 356, 1404], "europ": [459, 463, 481, 1077, 1081, 1103], "eval": [312, 356, 598, 796, 851, 1223, 1350, 1373], "evalu": [49, 50, 51, 52, 99, 172, 234, 236, 260, 284, 356, 370, 383, 385, 386, 418, 419, 420, 421, 423, 424, 446, 513, 531, 552, 553, 589, 638, 639, 766, 768, 771, 775, 777, 781, 783, 790, 791, 793, 794, 796, 805, 806, 809, 810, 823, 826, 829, 833, 838, 839, 841, 842, 851, 873, 888, 894, 896, 897, 915, 970, 996, 998, 999, 1031, 1032, 1033, 1034, 1036, 1037, 1065, 1138, 1178, 1179, 1364, 1373, 1393], "even": [38, 49, 152, 259, 356, 504, 643, 646, 679, 796, 851, 896, 970, 976, 1129, 1244, 1268, 1373], "evenli": [245, 356, 809, 810, 892, 970], "event": [65, 874, 970], "eventu": [39, 356], "ever": [639, 851], "everi": [15, 38, 49, 152, 153, 157, 163, 167, 239, 245, 310, 326, 356, 385, 386, 387, 388, 391, 393, 399, 442, 443, 444, 445, 446, 482, 495, 509, 521, 554, 555, 559, 562, 565, 566, 567, 575, 578, 583, 587, 658, 704, 785, 786, 851, 890, 892, 970, 998, 999, 1000, 1001, 1004, 1006, 1012, 1061, 1062, 1063, 1064, 1065, 1104, 1117, 1133, 1144, 1180, 1181, 1185, 1188, 1191, 1192, 1193, 1201, 1204, 1209, 1213, 1256, 1296, 1373], "everybodi": [698, 722, 1290, 1314], "everyth": 976, "evolv": [265, 356, 903, 970], "ew": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "ewm_mean": [851, 1373], "ewm_mean_bi": [851, 1373], "ewm_std": [851, 1373], "ewm_var": [851, 1373], "ewma": [504, 851, 1129, 1373], "exact": [178, 181, 183, 187, 260, 300, 356, 373, 517, 704, 732, 733, 734, 736, 737, 758, 851, 897, 970, 1296, 1326, 1328, 1329], "exactli": [135, 136, 139, 176, 177, 178, 179, 182, 183, 187, 265, 356, 726, 727, 732, 733, 795, 903, 970, 1278, 1318, 1319, 1324, 1325, 1373], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 66, 67, 76, 85, 89, 97, 98, 100, 104, 107, 108, 109, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 152, 153, 154, 155, 156, 157, 161, 162, 163, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 851, 863, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 970, 975, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1143, 1144, 1146, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1373, 1378, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1393, 1395, 1396, 1397, 1398, 1399, 1401, 1402, 1403], "exc_tb": 1401, "exc_typ": 1401, "exc_val": 1401, "exce": [243, 356], "excel": [37, 41, 151, 157, 356, 863], "excelspreadsheetengin": 157, "except": [0, 225, 240, 245, 247, 260, 263, 265, 285, 307, 356, 654, 711, 735, 797, 851, 863, 880, 892, 897, 903, 916, 970, 976, 1041, 1151, 1177, 1252, 1303, 1327, 1344, 1353, 1373, 1400], "exclud": [183, 187, 245, 356, 427, 442, 445, 454, 466, 534, 605, 757, 776, 847, 851, 892, 970, 976, 1072, 1084, 1157, 1373], "excluded_dtyp": [183, 184, 187], "exclus": [289, 356, 765, 771, 805, 806, 851], "execut": [10, 40, 49, 50, 51, 52, 57, 64, 65, 66, 97, 149, 154, 155, 262, 303, 356, 449, 561, 762, 830, 841, 851, 869, 873, 874, 879, 884, 902, 912, 914, 925, 928, 945, 970, 1187, 1362, 1373, 1383, 1384, 1385, 1387, 1401, 1403], "execute_glob": 1401, "execute_opt": [154, 155], "exist": [1, 39, 40, 41, 42, 58, 76, 108, 156, 164, 168, 172, 183, 225, 240, 280, 285, 320, 325, 330, 331, 356, 368, 410, 413, 416, 458, 481, 720, 721, 779, 851, 876, 880, 883, 916, 919, 936, 938, 939, 940, 970, 976, 1076, 1103, 1312, 1313, 1403], "existing_t": 1403, "existing_table_path": [40, 356], "exit": [57, 98, 207, 1388, 1401], "exp": [503, 504, 505, 506, 851, 1128, 1129, 1130, 1131, 1373, 1394], "exp_a": 1395, "expand": [149, 152, 164, 167, 172, 509, 603, 607, 652, 748, 851, 976, 1133, 1250, 1373], "expand_selector": 976, "expans": 745, "expect": [38, 40, 43, 47, 49, 50, 51, 52, 55, 74, 80, 113, 121, 129, 152, 154, 156, 162, 164, 167, 168, 170, 171, 172, 177, 179, 197, 213, 356, 589, 811, 900, 902, 970], "expens": [152, 153, 162, 164, 167, 171, 172, 186, 188, 257, 264, 289, 290, 291, 320, 321, 356, 598, 851, 876, 878, 883, 919, 933, 938, 970, 1134, 1223, 1373, 1404], "experiment": [47, 52, 165, 261, 318, 356, 809, 810, 898, 939, 970], "expiri": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 197, 356, 970], "explain": [132, 212, 262, 356, 873, 970, 1400], "explainformat": [884, 970], "explicit": [41, 107, 154, 167, 181, 303, 325, 356, 487, 825, 928, 936, 970, 1109], "explicitli": [76, 107, 155, 181, 183, 207, 240, 259, 356, 653, 833, 851, 862, 896, 970, 1401], "explod": [149, 356, 427, 515, 598, 639, 655, 757, 851, 970, 1253, 1373, 1391], "explor": [223, 356, 878, 970], "expon": [644, 851, 1242, 1373, 1395], "exponenti": [503, 504, 505, 506, 508, 644, 851, 1128, 1129, 1130, 1131, 1132, 1373, 1395], "export": [41, 43, 44, 50, 210, 257, 258, 290, 291, 308, 310, 313, 356, 847, 970, 976, 979, 1347, 1373], "expos": 863, "expr": [1, 53, 54, 55, 58, 59, 60, 61, 62, 99, 147, 149, 232, 234, 235, 250, 259, 260, 261, 265, 276, 280, 289, 294, 295, 313, 318, 330, 331, 356, 361, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 846, 847, 851, 852, 853, 856, 857, 858, 859, 860, 885, 886, 887, 896, 897, 898, 903, 913, 920, 921, 939, 940, 970, 976, 1065, 1124, 1125, 1129, 1136, 1137, 1143, 1145, 1147, 1175, 1187, 1193, 1209, 1213, 1222, 1234, 1235, 1250, 1289, 1294, 1301, 1320, 1373, 1399], "expr1": [1393, 1401], "expr2": [1393, 1401], "expr_unique_subset": [276, 356], "express": [0, 8, 53, 54, 55, 64, 99, 147, 149, 180, 183, 187, 215, 232, 234, 236, 244, 250, 259, 260, 261, 264, 265, 276, 280, 284, 289, 294, 295, 299, 302, 313, 318, 319, 330, 331, 333, 335, 342, 356, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 383, 387, 388, 389, 390, 391, 394, 405, 410, 411, 412, 413, 414, 415, 416, 427, 429, 431, 432, 433, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 504, 507, 509, 510, 512, 513, 517, 519, 520, 522, 523, 524, 525, 531, 534, 535, 536, 537, 538, 539, 540, 541, 549, 550, 554, 555, 557, 558, 561, 562, 568, 570, 588, 589, 595, 596, 597, 598, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 618, 620, 622, 623, 625, 627, 629, 630, 633, 634, 636, 638, 639, 643, 644, 645, 646, 648, 652, 653, 654, 655, 657, 658, 681, 682, 683, 686, 688, 689, 691, 693, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 718, 720, 721, 722, 724, 725, 726, 727, 735, 739, 749, 750, 753, 754, 757, 758, 759, 761, 762, 764, 765, 766, 767, 769, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 820, 823, 825, 826, 827, 828, 829, 831, 833, 835, 837, 838, 839, 841, 842, 847, 850, 863, 868, 873, 884, 885, 888, 891, 896, 897, 898, 903, 912, 915, 920, 921, 924, 925, 927, 932, 939, 940, 941, 943, 946, 953, 970, 976, 1003, 1040, 1054, 1065, 1072, 1076, 1109, 1124, 1125, 1129, 1135, 1145, 1147, 1157, 1175, 1184, 1187, 1222, 1223, 1234, 1235, 1250, 1251, 1252, 1272, 1276, 1289, 1290, 1291, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1305, 1306, 1312, 1313, 1314, 1327, 1331, 1358, 1373, 1391, 1393, 1395, 1396, 1400], "exprmetanamespac": [602, 608], "ext": [53, 54, 55, 154], "extend": [0, 136, 328, 356, 510, 851, 863, 974, 985, 1135, 1373], "extend_const": [851, 1373], "extens": [315, 356, 1354, 1373], "extern": [204, 941, 970], "external_shallow_clon": 204, "extra": [40, 56, 149, 152, 153, 156, 158, 160, 164, 167, 168, 169, 172, 233, 245, 265, 356, 851, 892, 903, 970, 1134, 1373], "extra_column": [172, 265, 356, 903, 970], "extra_struct_field": [56, 265, 356, 903, 970], "extract": [140, 212, 303, 356, 457, 460, 462, 465, 468, 469, 470, 471, 472, 473, 476, 478, 479, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 643, 706, 707, 708, 713, 714, 724, 726, 851, 1075, 1078, 1079, 1080, 1083, 1086, 1090, 1091, 1092, 1094, 1095, 1098, 1100, 1101, 1105, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1121, 1298, 1299, 1300, 1305, 1306, 1316, 1394], "extract_mani": [710, 1302], "extract_numb": [643, 851], "extracted_nr": 706, "extrem": [510, 661, 851, 1135, 1258, 1373], "extrema": [685, 851, 1277, 1373], "f": [53, 59, 153, 154, 236, 243, 258, 308, 314, 320, 324, 356, 366, 406, 415, 589, 685, 704, 734, 737, 779, 851, 888, 970, 976, 1019, 1215, 1296, 1326, 1329, 1373, 1378, 1391], "f32": [1, 61, 216, 303, 312, 318, 356, 685, 830, 851, 870, 928, 970, 976, 1221, 1373, 1399], "f4": [314, 356], "f5ed2452": [41, 356], "f64": [7, 9, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 58, 60, 62, 66, 85, 97, 134, 136, 161, 173, 180, 183, 216, 217, 218, 221, 223, 224, 225, 227, 229, 234, 235, 238, 242, 243, 244, 245, 250, 251, 259, 260, 265, 267, 268, 269, 270, 274, 280, 281, 282, 301, 302, 304, 306, 318, 327, 330, 335, 338, 340, 343, 344, 345, 346, 348, 349, 356, 365, 368, 374, 375, 376, 377, 378, 379, 397, 403, 408, 415, 428, 434, 435, 437, 438, 439, 447, 448, 452, 453, 483, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 516, 517, 522, 524, 532, 533, 535, 542, 543, 544, 545, 547, 549, 561, 572, 573, 585, 591, 592, 593, 594, 596, 599, 600, 601, 617, 620, 622, 631, 632, 633, 634, 640, 644, 646, 647, 648, 649, 653, 654, 660, 661, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 687, 688, 689, 690, 694, 695, 749, 753, 754, 758, 762, 763, 772, 773, 777, 779, 781, 783, 796, 797, 809, 810, 813, 816, 817, 818, 830, 832, 840, 847, 851, 870, 871, 878, 880, 881, 886, 887, 891, 892, 895, 896, 897, 903, 905, 906, 913, 927, 929, 937, 939, 941, 946, 949, 951, 954, 955, 956, 957, 959, 960, 970, 976, 987, 988, 989, 990, 991, 992, 1010, 1016, 1021, 1028, 1050, 1051, 1056, 1057, 1058, 1066, 1067, 1070, 1071, 1105, 1128, 1129, 1130, 1131, 1132, 1136, 1141, 1152, 1155, 1156, 1187, 1198, 1199, 1211, 1217, 1218, 1219, 1220, 1239, 1242, 1244, 1246, 1252, 1257, 1258, 1260, 1261, 1263, 1264, 1265, 1267, 1268, 1269, 1280, 1281, 1282, 1286, 1345, 1346, 1361, 1362, 1373, 1382, 1390, 1391, 1395, 1398, 1401, 1404], "f64_awai": [679, 851], "f64_to_even": [679, 851], "f_string": 800, "fa1e": [739, 1331], "face": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 197, 356, 970], "facil": 154, "facilit": [219, 356], "factor": [503, 505, 506, 755, 851, 1128, 1130, 1131, 1355, 1373], "fail": [38, 39, 40, 43, 47, 49, 50, 51, 52, 134, 156, 158, 162, 164, 167, 168, 170, 171, 172, 197, 211, 314, 321, 356, 383, 485, 589, 734, 736, 737, 741, 851, 933, 970, 1223, 1326, 1328, 1329, 1333, 1353, 1373, 1399], "fall": [172, 447, 646, 851, 873, 884, 912, 925, 945, 970, 1066, 1244, 1373, 1390], "fallback": [134, 157], "fals": [5, 7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 33, 38, 40, 41, 47, 49, 50, 51, 52, 53, 56, 58, 64, 65, 66, 134, 135, 136, 138, 139, 140, 147, 149, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 211, 215, 216, 217, 218, 223, 230, 236, 238, 242, 243, 244, 245, 249, 252, 253, 254, 257, 259, 260, 262, 268, 269, 275, 276, 278, 280, 281, 284, 289, 290, 291, 292, 294, 297, 300, 302, 303, 306, 309, 311, 314, 315, 319, 320, 321, 325, 326, 328, 330, 338, 340, 343, 344, 346, 349, 356, 369, 370, 371, 382, 385, 386, 389, 393, 394, 402, 407, 410, 413, 416, 427, 428, 429, 433, 441, 442, 443, 444, 445, 447, 454, 466, 467, 483, 500, 501, 502, 503, 505, 506, 524, 525, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 553, 557, 561, 564, 566, 568, 577, 584, 589, 590, 596, 597, 598, 602, 604, 605, 606, 608, 610, 613, 614, 633, 634, 636, 638, 639, 641, 642, 646, 649, 660, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 681, 682, 683, 685, 690, 692, 693, 696, 697, 698, 699, 702, 708, 709, 710, 712, 713, 720, 721, 722, 725, 726, 728, 734, 736, 737, 739, 757, 759, 762, 765, 766, 767, 768, 769, 771, 774, 775, 776, 777, 780, 781, 783, 784, 785, 790, 791, 793, 794, 799, 805, 806, 809, 810, 811, 813, 817, 823, 826, 829, 830, 833, 835, 838, 839, 841, 842, 851, 868, 870, 871, 872, 873, 874, 878, 884, 888, 891, 892, 896, 897, 900, 902, 912, 915, 920, 923, 925, 927, 928, 932, 933, 936, 939, 945, 949, 951, 954, 955, 957, 960, 970, 975, 976, 983, 984, 995, 998, 999, 1002, 1006, 1007, 1015, 1020, 1023, 1024, 1026, 1029, 1040, 1041, 1042, 1044, 1047, 1052, 1053, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1072, 1084, 1085, 1105, 1125, 1126, 1128, 1130, 1131, 1138, 1140, 1146, 1148, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1178, 1179, 1183, 1187, 1190, 1192, 1194, 1203, 1210, 1216, 1229, 1235, 1237, 1240, 1241, 1244, 1246, 1247, 1248, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1270, 1272, 1274, 1278, 1283, 1285, 1288, 1289, 1290, 1291, 1294, 1300, 1301, 1302, 1304, 1305, 1312, 1313, 1314, 1317, 1318, 1320, 1326, 1328, 1329, 1331, 1348, 1353, 1354, 1358, 1359, 1362, 1364, 1373, 1383, 1385, 1391, 1396, 1401], "far": [41, 356], "fashion": [259, 356], "fast": [47, 50, 52, 149, 186, 188, 356, 510, 683, 851, 970, 974, 1135, 1274, 1373, 1404], "fast_executemani": [39, 356], "fast_project": 944, "faster": [49, 50, 51, 52, 64, 154, 157, 233, 314, 324, 356, 598, 760, 851, 873, 884, 912, 925, 970, 1134, 1223, 1373], "fastexcel": [157, 175], "favor": [39, 172, 356], "fay": 148, "feat1": [313, 318, 356], "feat2": [313, 318, 356], "feather": [43, 158, 170, 356, 863], "featur": [1, 47, 63, 74, 80, 169, 313, 318, 356], "feature_0": [941, 970], "feature_0_train": [941, 970], "feature_1": [941, 970], "feature_nam": [318, 356], "feb": [175, 1396], "februari": 1396, "fed": 730, "feel": [698, 722, 1290, 1314], "fetch": [142, 873, 970], "fetch_california_h": [318, 356], "few": [243, 356], "fewer": [711, 735, 970, 1303, 1327], "ff": 1390, "ff00": [739, 1331], "fff": 1, "ffff00": [411, 412, 700, 1024, 1025, 1292], "ffffff": [41, 356], "ffi": [231, 356, 1127, 1373], "fgg": 976, "fghi": 1396, "fh": 153, "fiction": 1382, "field": [37, 38, 40, 49, 52, 56, 89, 125, 128, 136, 143, 265, 322, 356, 406, 589, 597, 598, 624, 626, 628, 657, 706, 707, 713, 726, 727, 747, 748, 749, 755, 762, 785, 786, 812, 833, 841, 851, 903, 934, 970, 1019, 1215, 1223, 1255, 1299, 1318, 1319, 1340, 1342, 1355, 1373, 1397], "field_0": [406, 589, 1019, 1215], "field_1": [406, 589, 1019, 1215], "field_2": [1019, 1215], "field_id": 143, "field_n": [406, 589, 1019, 1215], "field_nam": [598, 851, 1223, 1373], "field_overwrit": [52, 143, 970], "fiftyf": [530, 851], "figsiz": [613, 912, 925, 970], "figur": [613, 680, 851, 925, 970, 1269, 1373], "file": [2, 3, 5, 6, 33, 36, 37, 38, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 224, 233, 296, 356, 449, 519, 612, 616, 851, 879, 922, 970, 974, 1134, 1373], "file_cache_ttl": [162, 167, 170, 171], "file_idx": [54, 144, 146], "file_path": [53, 54, 55, 144, 146], "filenam": 158, "filesourc": [157, 163, 164, 172], "filesystem": [40, 156, 168, 169, 356], "fill": [58, 66, 217, 234, 235, 299, 324, 356, 360, 409, 442, 445, 511, 512, 518, 532, 533, 662, 664, 666, 668, 670, 673, 675, 677, 684, 800, 823, 826, 842, 851, 886, 887, 924, 941, 970, 1022, 1136, 1137, 1142, 1156, 1236, 1259, 1260, 1262, 1265, 1266, 1267, 1276, 1373], "fill_char": [718, 719, 1310, 1311], "fill_nan": [235, 356, 512, 851, 887, 970, 1137, 1373], "fill_nul": [58, 234, 326, 356, 409, 442, 445, 511, 518, 684, 851, 886, 941, 970, 1022, 1136, 1142, 1373], "fill_valu": [299, 324, 356, 684, 851, 924, 970, 1276, 1373], "fillnullstrategi": [235, 356, 512, 851, 887, 970, 1137, 1373], "film": 1382, "filter": [1, 59, 64, 97, 147, 167, 168, 172, 173, 227, 228, 252, 253, 254, 280, 284, 342, 356, 429, 433, 609, 611, 702, 728, 764, 789, 792, 796, 799, 829, 830, 841, 851, 866, 873, 881, 882, 884, 894, 912, 915, 925, 928, 953, 970, 976, 1273, 1373, 1389], "final": [14, 41, 58, 149, 172, 260, 262, 356, 503, 505, 506, 851, 878, 897, 970, 1128, 1130, 1131, 1373, 1402], "find": [66, 241, 356, 530, 682, 697, 698, 710, 851, 1154, 1272, 1290, 1302, 1312, 1373], "find_pat": 709, "fine": [873, 884, 912, 925, 967, 970], "finish": [53, 54, 55, 233, 356, 1134, 1373], "finish_callback": [53, 54, 55], "finit": [537, 758, 781, 851, 1161, 1373], "first": [47, 58, 152, 153, 157, 158, 160, 163, 164, 167, 172, 176, 177, 178, 179, 212, 243, 245, 247, 259, 260, 263, 264, 275, 279, 280, 288, 307, 311, 312, 320, 321, 326, 333, 339, 356, 382, 384, 393, 446, 450, 475, 477, 482, 498, 517, 527, 530, 538, 551, 559, 561, 566, 567, 589, 597, 598, 610, 619, 643, 644, 659, 682, 693, 697, 704, 705, 709, 711, 713, 714, 720, 721, 735, 742, 777, 778, 785, 799, 803, 841, 847, 851, 892, 893, 896, 897, 901, 911, 918, 933, 941, 943, 950, 970, 976, 995, 1006, 1065, 1067, 1068, 1097, 1099, 1104, 1120, 1151, 1154, 1162, 1177, 1185, 1187, 1192, 1193, 1215, 1223, 1272, 1285, 1296, 1297, 1299, 1301, 1303, 1305, 1306, 1312, 1313, 1327, 1334, 1344, 1348, 1350, 1353, 1373, 1393, 1394, 1396, 1402, 1404], "first_column": [41, 356], "first_non_nul": [589, 1215], "first_part": [726, 727, 1318, 1319], "fisher": [547, 660, 690, 851, 1173, 1257, 1283, 1373], "fit": [148, 257, 300, 324, 356, 685, 826, 851, 1277, 1278, 1373], "five": [317, 356, 1404], "fix": [11, 67, 76, 181, 498, 795, 810, 1120], "flag": [63, 156, 168, 180, 297, 314, 356, 683, 697, 705, 706, 709, 720, 721, 851, 884, 902, 923, 970, 976, 1274, 1289, 1297, 1298, 1301, 1312, 1313, 1353, 1373, 1396], "flat": [148, 291, 356, 562, 655, 851, 1188, 1253, 1373], "flat_from_polar": 143, "flatten": 851, "flavour": [41, 154, 356], "flight": 154, "flight_sql": 154, "flightsql": 154, "float": [11, 12, 38, 41, 49, 56, 78, 79, 152, 153, 167, 173, 176, 177, 178, 179, 180, 183, 187, 211, 223, 227, 231, 234, 260, 265, 282, 292, 313, 314, 348, 356, 435, 447, 452, 453, 483, 500, 501, 502, 503, 505, 506, 511, 516, 517, 522, 524, 532, 535, 537, 540, 542, 543, 544, 545, 549, 577, 592, 596, 599, 613, 617, 631, 632, 633, 634, 644, 646, 647, 661, 662, 664, 666, 668, 670, 671, 673, 675, 677, 679, 681, 687, 758, 824, 826, 851, 878, 881, 886, 897, 903, 913, 925, 959, 970, 976, 1041, 1051, 1066, 1067, 1069, 1070, 1071, 1105, 1123, 1127, 1128, 1130, 1131, 1136, 1141, 1152, 1158, 1173, 1203, 1218, 1232, 1233, 1242, 1243, 1244, 1245, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1270, 1273, 1280, 1283, 1287, 1343, 1353, 1363, 1373, 1401, 1404], "float16": [318, 356], "float32": [1, 11, 38, 49, 61, 216, 238, 265, 312, 313, 314, 318, 356, 504, 851, 870, 903, 970, 976, 1129, 1160, 1221, 1351, 1353, 1356, 1373], "float4": [303, 356, 830, 928, 970, 1399], "float64": [11, 38, 41, 49, 97, 136, 152, 161, 180, 183, 219, 229, 231, 238, 265, 293, 318, 330, 356, 374, 375, 376, 377, 378, 379, 415, 428, 437, 438, 439, 448, 483, 504, 507, 542, 543, 648, 688, 689, 753, 754, 797, 813, 823, 826, 842, 847, 851, 875, 883, 903, 919, 939, 970, 975, 976, 1105, 1129, 1354, 1361, 1373], "float_cast": [56, 265, 356, 903, 970], "float_list": 85, "float_precis": [9, 11, 28, 38, 41, 49, 356, 970], "float_scientif": [38, 49, 356, 970], "floatcastopt": 56, "floatfmt": 12, "floor": [60, 517, 851, 1373, 1394], "floor_a": 1395, "floordiv": [758, 851], "fmt": [12, 260, 356, 531, 800, 851, 894, 897, 970], "fmt_number": [356, 360], "fmt_str_length": [13, 790, 791, 793, 794], "fmt_table_cell_list_len": 14, "fmt_titl": [41, 356], "fn": [785, 786, 799, 825], "foggi": [720, 721, 1312, 1313], "fold": [356, 610, 777, 785, 786, 825, 841], "folder": 173, "follow": [41, 47, 63, 147, 152, 153, 154, 156, 157, 163, 167, 168, 169, 245, 260, 264, 279, 288, 314, 326, 356, 477, 482, 495, 504, 535, 643, 644, 649, 659, 663, 665, 667, 669, 671, 672, 674, 676, 678, 687, 747, 758, 773, 790, 791, 793, 794, 813, 838, 839, 841, 843, 844, 846, 851, 852, 853, 856, 858, 859, 860, 892, 897, 911, 918, 970, 976, 1099, 1104, 1117, 1129, 1158, 1242, 1246, 1271, 1273, 1280, 1353, 1365, 1367, 1369, 1373, 1374, 1379, 1380, 1381, 1399, 1404], "font": [41, 356], "font_color": [41, 356], "font_siz": [41, 356], "foo": [36, 38, 40, 43, 44, 45, 46, 47, 148, 161, 162, 216, 219, 220, 221, 225, 226, 227, 228, 229, 230, 233, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 253, 259, 263, 264, 266, 267, 268, 269, 270, 273, 274, 277, 280, 282, 284, 285, 286, 289, 292, 293, 294, 296, 298, 301, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 320, 321, 322, 327, 328, 329, 334, 356, 430, 447, 449, 477, 521, 527, 531, 551, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 646, 655, 696, 699, 701, 704, 706, 707, 712, 723, 725, 727, 729, 730, 731, 732, 733, 740, 743, 752, 770, 781, 782, 783, 798, 802, 803, 804, 807, 808, 814, 816, 818, 819, 821, 822, 824, 829, 832, 836, 840, 841, 847, 851, 870, 875, 876, 880, 881, 882, 883, 888, 894, 895, 896, 910, 915, 916, 919, 920, 933, 934, 938, 941, 970, 975, 976, 1043, 1066, 1099, 1194, 1242, 1244, 1253, 1291, 1293, 1296, 1298, 1299, 1315, 1319, 1324, 1325, 1332, 1335, 1373, 1387, 1389, 1390, 1391, 1393, 1396, 1399], "foo1": 1396, "foo11": [238, 356], "foo_": [607, 725, 800], "foo_1": [311, 356], "foo_2": [311, 356], "foo_3_4": 1396, "foo_a": [280, 356], "foo_a_bar_1": 800, "foo_at_1": 1391, "foo_b": [280, 356], "foo_b_bar_2": 800, "foo_bar": [602, 608, 725, 811, 1387], "foo_bar2": [602, 608], "foo_bar_baz": 725, "foo_c_bar_3": 800, "foo_low": [740, 1396], "foo_mean": 1391, "foo_q25": 1390, "foo_q50": 1390, "foo_q75": 1390, "foo_std": 1390, "foo_strip": 729, "foo_strip_end": 730, "foo_strip_start": 731, "foo_sum": [1390, 1391], "foo_uniqu": 1391, "foo_upp": [743, 1396], "foo_var": 1390, "foobar": [732, 733, 1324, 1325, 1396], "foobarbar": [733, 1325], "foofoobar": [732, 1324], "foral": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "forbid": [56, 265, 356, 903, 970], "forc": [152, 158, 162, 164, 260, 264, 314, 342, 356, 589, 896, 897, 953, 970, 1223, 1353, 1373], "force_parallel": [260, 356, 896, 897, 970], "foreign": 204, "form": [38, 49, 133, 135, 136, 137, 139, 161, 162, 171, 213, 257, 290, 324, 356, 487, 640, 717, 742, 851, 866, 970, 1109, 1239, 1309, 1334, 1373, 1396], "format": [7, 12, 16, 17, 21, 37, 38, 41, 43, 44, 47, 49, 103, 134, 150, 152, 153, 154, 157, 158, 160, 163, 167, 173, 210, 224, 232, 243, 257, 271, 280, 290, 291, 296, 310, 323, 354, 356, 360, 449, 482, 484, 487, 612, 613, 614, 734, 736, 737, 741, 795, 851, 879, 884, 885, 907, 922, 935, 970, 974, 979, 1106, 1109, 1326, 1328, 1329, 1333, 1372, 1396, 1397], "formul": [227, 356, 881, 882, 970], "formula": [41, 356, 500, 851, 1123, 1373], "fortran": [313, 314, 356], "forward": [235, 260, 299, 326, 356, 401, 442, 445, 454, 474, 512, 518, 582, 684, 851, 887, 897, 924, 970, 1014, 1072, 1096, 1137, 1142, 1208, 1276, 1373], "forward_fil": [409, 512, 851, 1022, 1137, 1373], "found": [21, 38, 41, 49, 104, 125, 128, 136, 140, 157, 164, 172, 229, 303, 356, 530, 682, 709, 714, 732, 733, 734, 737, 851, 928, 970, 1154, 1272, 1301, 1306, 1324, 1325, 1326, 1329, 1373, 1385, 1396, 1401], "four": [317, 356, 1401], "fourth": [547, 851, 1173, 1373], "frac": [503, 504, 505, 506, 690, 851, 1128, 1129, 1130, 1131, 1283, 1373], "fraction": [38, 49, 176, 177, 178, 179, 292, 356, 483, 577, 640, 681, 734, 737, 762, 851, 970, 1105, 1203, 1239, 1270, 1326, 1329, 1362, 1373], "fragment": 1401, "frame": [38, 39, 41, 49, 58, 65, 66, 136, 153, 157, 163, 176, 177, 216, 217, 223, 257, 258, 262, 264, 272, 276, 279, 289, 290, 291, 303, 318, 324, 325, 356, 487, 830, 870, 871, 878, 908, 911, 928, 936, 970, 976, 1053, 1109, 1373, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1400, 1404], "frame_data": [1384, 1387], "frameinittyp": [356, 970], "frametyp": [58, 1401], "framework": [280, 323, 356, 935, 970], "freedom": [304, 327, 356, 585, 591, 673, 674, 677, 678, 695, 763, 783, 827, 828, 832, 840, 851, 929, 937, 970, 1265, 1267, 1287, 1363, 1373], "freeli": [265, 356, 830, 903, 928, 970, 976], "freez": [41, 356], "freeze_pan": [41, 356], "frequenc": [326, 356, 762, 851, 1362, 1373], "frequent": [1271, 1273, 1373], "fri": [356, 359], "fridai": [245, 356, 454, 466, 484, 776, 892, 970, 1072, 1084, 1106, 1109], "friendship": 13, "from": [2, 3, 4, 5, 6, 11, 17, 29, 33, 37, 38, 40, 41, 43, 47, 49, 50, 51, 52, 56, 58, 66, 76, 89, 97, 103, 107, 123, 127, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 192, 197, 212, 216, 223, 224, 225, 231, 233, 236, 237, 243, 245, 257, 258, 259, 260, 261, 262, 265, 271, 280, 284, 285, 288, 289, 291, 292, 294, 295, 303, 311, 318, 320, 321, 323, 324, 325, 326, 332, 356, 359, 360, 406, 415, 447, 448, 449, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 504, 507, 517, 519, 532, 547, 565, 577, 589, 606, 631, 632, 634, 639, 640, 643, 646, 648, 659, 661, 663, 665, 667, 669, 671, 674, 676, 678, 679, 681, 693, 705, 706, 711, 713, 714, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 760, 772, 773, 776, 777, 789, 790, 791, 792, 793, 794, 795, 809, 811, 826, 830, 837, 838, 839, 841, 847, 850, 851, 870, 878, 879, 880, 888, 892, 896, 897, 898, 903, 907, 915, 916, 918, 920, 921, 928, 933, 935, 936, 941, 942, 970, 974, 975, 976, 1019, 1028, 1066, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1125, 1127, 1129, 1134, 1173, 1191, 1203, 1215, 1232, 1233, 1235, 1236, 1239, 1244, 1258, 1270, 1297, 1298, 1303, 1305, 1316, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1333, 1348, 1364, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404], "from_arrai": 830, "from_arrow": 134, "from_json": 851, "from_panda": 134, "from_repr": [312, 356, 1350, 1373], "fromkei": [59, 61], "front": [245, 356, 892, 970], "fruit": [309, 356, 429, 433, 656, 702, 728, 735, 851, 1042, 1047, 1294, 1320, 1327], "fruits_revers": [656, 851], "fsspec": [152, 153, 158, 160, 168, 169, 175], "fsspecfileio": 169, "full": [12, 27, 47, 52, 58, 73, 103, 136, 139, 152, 153, 154, 156, 158, 161, 162, 164, 167, 168, 169, 171, 172, 173, 259, 325, 356, 711, 713, 720, 721, 734, 735, 736, 737, 741, 790, 791, 896, 902, 936, 970, 974, 976, 1303, 1305, 1312, 1313, 1326, 1327, 1328, 1329, 1333, 1373, 1389, 1404], "full_path": [144, 146], "full_sent": 780, "fulli": [185, 279, 292, 314, 356, 528, 851, 1152, 1373], "funcnam": [41, 356], "function": [0, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 74, 80, 97, 98, 99, 100, 130, 132, 134, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 203, 207, 209, 211, 215, 221, 224, 231, 238, 261, 264, 265, 271, 279, 280, 285, 303, 313, 314, 315, 318, 319, 320, 323, 325, 342, 356, 359, 360, 369, 406, 426, 427, 446, 447, 449, 454, 466, 503, 505, 506, 528, 589, 597, 598, 623, 624, 639, 643, 646, 658, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 678, 687, 690, 710, 755, 756, 757, 766, 770, 776, 778, 782, 784, 785, 786, 798, 799, 801, 803, 804, 807, 809, 810, 812, 813, 816, 818, 821, 823, 825, 832, 836, 840, 842, 847, 851, 863, 868, 873, 874, 879, 884, 898, 902, 903, 907, 911, 912, 916, 928, 932, 935, 936, 943, 944, 953, 970, 974, 978, 1019, 1039, 1040, 1049, 1065, 1066, 1072, 1084, 1127, 1128, 1130, 1131, 1152, 1215, 1223, 1244, 1256, 1257, 1258, 1261, 1263, 1264, 1271, 1273, 1278, 1280, 1283, 1302, 1351, 1354, 1356, 1357, 1358, 1373, 1378, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1399, 1400, 1401, 1402, 1403, 1404], "function_nam": 149, "further": 847, "futur": [43, 44, 65, 211, 223, 259, 297, 308, 356, 597, 851, 874, 878, 896, 923, 970, 1347, 1373], "g": [34, 38, 49, 148, 152, 156, 158, 160, 166, 168, 173, 185, 211, 224, 256, 314, 324, 356, 366, 449, 504, 507, 598, 685, 797, 841, 851, 879, 916, 970, 974, 1129, 1373, 1404], "g1": [513, 764, 851], "g2": [513, 764, 851], "g_1": [690, 851, 1283, 1373], "gag": 27, "gamma": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "gantt": [912, 970], "gather": [153, 239, 356, 382, 521, 565, 774, 851, 890, 970, 995, 1144, 1191, 1373], "gather_everi": [356, 851, 970, 1373], "gb": [231, 356, 415, 1127, 1373], "gbp": 1404, "gc": [40, 156, 168, 169, 356], "gca": 27, "gcaacgcatata": 27, "gcp": [35, 38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 169, 170, 171, 172, 197, 356, 970], "gdp": [260, 356, 897, 970], "gdp2": [260, 356, 897, 970], "gdp_date": [260, 356, 897, 970], "ge": [851, 1373], "gener": [1, 53, 54, 97, 147, 148, 154, 155, 174, 180, 181, 182, 183, 184, 185, 187, 211, 219, 221, 280, 292, 311, 314, 320, 356, 577, 681, 686, 771, 790, 793, 805, 806, 808, 809, 810, 826, 838, 839, 851, 970, 1041, 1203, 1270, 1279, 1348, 1373, 1404], "geq": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "germani": [260, 356, 897, 970], "get": [53, 54, 55, 58, 65, 76, 99, 149, 159, 165, 166, 173, 203, 212, 215, 219, 220, 229, 237, 240, 242, 245, 247, 248, 252, 254, 255, 261, 263, 267, 274, 275, 280, 288, 289, 293, 298, 301, 307, 315, 319, 329, 339, 350, 356, 367, 380, 381, 382, 384, 392, 395, 407, 415, 427, 430, 442, 443, 444, 445, 454, 464, 466, 514, 520, 527, 530, 546, 548, 551, 563, 569, 590, 599, 600, 601, 609, 611, 617, 631, 632, 641, 642, 647, 658, 659, 691, 695, 704, 751, 752, 756, 757, 759, 763, 774, 776, 798, 803, 807, 813, 814, 815, 816, 818, 819, 820, 822, 832, 836, 840, 851, 868, 873, 874, 876, 883, 888, 889, 892, 893, 898, 899, 901, 918, 919, 926, 931, 932, 938, 950, 961, 970, 975, 980, 993, 994, 995, 996, 997, 1005, 1008, 1020, 1028, 1043, 1052, 1061, 1062, 1063, 1064, 1072, 1082, 1084, 1122, 1139, 1140, 1146, 1151, 1154, 1157, 1158, 1159, 1171, 1174, 1177, 1189, 1195, 1216, 1224, 1226, 1227, 1229, 1231, 1232, 1233, 1240, 1241, 1245, 1256, 1284, 1287, 1296, 1344, 1348, 1354, 1359, 1363, 1373], "get_chunk": 1373, "get_column": [211, 316, 356], "get_column_index": 356, "get_polars_schema": 205, "get_table_info": 205, "get_token": 34, "get_worksheet_by_nam": [41, 356], "gevent": [65, 175, 874, 970], "gh": 721, "gh45": 721, "gh45ij67kl": 721, "ghi": [366, 706, 851, 976, 1298], "gil": [598, 851, 974], "git": 63, "github": [155, 356], "give": [162, 170, 171, 260, 271, 321, 323, 356, 464, 517, 547, 652, 758, 762, 841, 851, 863, 897, 907, 914, 933, 935, 970, 1082, 1173, 1250, 1362, 1373, 1400], "given": [41, 53, 54, 55, 58, 97, 109, 114, 131, 133, 135, 136, 137, 139, 147, 148, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 178, 179, 180, 181, 183, 185, 186, 187, 188, 209, 231, 232, 234, 236, 245, 250, 255, 264, 272, 278, 279, 284, 289, 290, 291, 299, 302, 318, 325, 356, 389, 401, 406, 415, 427, 436, 455, 459, 484, 486, 487, 500, 504, 528, 534, 557, 582, 589, 592, 598, 639, 643, 649, 652, 653, 655, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 684, 706, 707, 718, 719, 734, 737, 744, 747, 757, 775, 777, 781, 783, 797, 798, 807, 812, 813, 826, 827, 828, 841, 851, 885, 892, 902, 908, 911, 914, 915, 924, 927, 936, 953, 970, 975, 976, 978, 1002, 1014, 1019, 1028, 1054, 1073, 1077, 1106, 1108, 1109, 1123, 1127, 1129, 1152, 1157, 1172, 1183, 1208, 1215, 1218, 1221, 1223, 1236, 1242, 1246, 1250, 1253, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1272, 1276, 1298, 1299, 1310, 1311, 1326, 1329, 1336, 1361, 1364, 1373, 1382, 1384, 1389, 1391, 1392, 1395, 1396, 1401, 1403, 1404], "glimps": [223, 247, 356], "glob": [152, 153, 157, 158, 162, 164, 167, 170, 171, 172], "global": [57, 98, 100, 157, 174, 183, 191, 303, 356, 653, 654, 830, 851, 928, 970, 1251, 1252, 1373, 1383, 1385, 1400], "gmt": [459, 463, 481, 1077, 1081, 1103], "go": [13, 152, 153, 167, 429, 702, 1042, 1294], "godfath": 1382, "goe": 13, "gonfruit": 1327, "good": [47, 50, 52, 257, 356, 970, 1395], "goodby": 1, "googl": [35, 156, 168, 169], "gpu": [10, 50, 64, 65, 313, 356, 873, 874, 884, 912, 925, 945, 967, 970, 1351, 1373], "gpu_devic": [313, 356], "gpudevic": [313, 356], "gpuengin": [10, 873, 884, 912, 925, 970], "grade": [1173, 1373], "grain": [873, 884, 912, 925, 967, 970], "granular": [52, 970, 1401], "grape": 1396, "graph": [64, 154, 262, 356, 613, 873, 894, 941, 970], "graphviz": [262, 356, 613, 925, 970], "great": [356, 360], "great_tabl": [356, 360], "greater": [217, 260, 356, 522, 524, 534, 690, 718, 719, 727, 744, 841, 851, 897, 970, 1157, 1283, 1310, 1311, 1319, 1336, 1373], "greatest": [1390, 1394], "greatli": [158, 170], "green": [57, 98, 100, 342, 762, 851, 953, 1362, 1373], "greenlet": [65, 874, 970], "greet": 1, "grid": [532, 851], "grid_point": [532, 851], "gridlin": [41, 356], "gross": 1382, "group": [9, 28, 47, 52, 55, 149, 153, 172, 216, 244, 245, 258, 260, 276, 278, 280, 288, 291, 324, 326, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 367, 427, 509, 515, 520, 523, 561, 597, 598, 609, 611, 639, 649, 658, 659, 692, 693, 697, 705, 706, 707, 709, 720, 721, 757, 762, 813, 851, 870, 891, 892, 897, 918, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 970, 976, 1065, 1187, 1256, 1289, 1297, 1298, 1299, 1301, 1312, 1313, 1362, 1373, 1382, 1390, 1400, 1401], "group_bi": [245, 276, 280, 288, 326, 355, 356, 367, 417, 422, 425, 427, 513, 515, 520, 523, 597, 598, 639, 692, 693, 757, 762, 764, 790, 793, 813, 851, 873, 874, 884, 892, 912, 914, 918, 925, 968, 970, 976, 1362, 1373], "group_by_dynam": [288, 356, 918, 970], "group_by_partit": [912, 970], "group_col": [513, 764, 851], "group_df": [342, 953], "group_dtyp": [639, 851], "group_index": [705, 1297], "group_to_row": [639, 851], "groupbi": [244, 356, 598, 813, 851], "grouper": [417, 422, 425, 851], "grow": [328, 356], "grown": [249, 356], "gt": [356, 360, 851, 1373], "gte": [513, 764, 851], "guarante": [10, 47, 52, 152, 153, 215, 223, 246, 272, 319, 321, 356, 426, 427, 526, 755, 756, 757, 851, 868, 878, 908, 932, 933, 970, 1039, 1040, 1150, 1355, 1357, 1358, 1373], "guid": [147, 149, 851, 974, 1404], "gzip": [47, 52, 356, 970], "h": [324, 356, 366, 484, 487, 685, 720, 721, 734, 737, 741, 851, 1312, 1313, 1326, 1329, 1333, 1396, 1397], "ha": [40, 41, 49, 50, 51, 52, 56, 58, 65, 138, 154, 167, 190, 211, 326, 332, 337, 356, 426, 427, 519, 610, 616, 711, 735, 745, 756, 757, 781, 798, 807, 847, 851, 874, 925, 942, 948, 953, 970, 1039, 1040, 1053, 1065, 1067, 1303, 1327, 1357, 1358, 1373], "half": [318, 356, 482, 503, 504, 505, 506, 679, 851, 1104, 1128, 1129, 1130, 1131, 1268, 1373], "half_away_from_zero": [679, 851, 1268, 1373], "half_lif": [503, 504, 505, 506, 851, 1128, 1129, 1130, 1131, 1373], "half_to_even": [679, 851, 1268, 1373], "ham": [36, 38, 40, 43, 44, 47, 216, 219, 220, 221, 225, 226, 227, 228, 229, 230, 236, 241, 246, 247, 249, 259, 263, 266, 268, 270, 273, 277, 282, 284, 285, 286, 289, 292, 293, 294, 301, 304, 305, 307, 311, 312, 314, 315, 316, 321, 327, 328, 356, 430, 613, 614, 847, 870, 875, 876, 880, 881, 882, 883, 888, 896, 910, 915, 916, 919, 920, 933, 941, 970, 1043, 1389, 1390], "ham_a": [311, 356], "ham_b": [311, 356], "ham_right": [259, 356, 896, 970], "hamburg": 847, "hand": [41, 152, 153, 167, 356, 578, 579, 580, 581, 1204, 1205, 1206, 1207], "handi": [454, 466, 776, 1072, 1084], "handl": [40, 42, 106, 140, 149, 152, 153, 167, 173, 236, 240, 284, 356, 450, 559, 704, 744, 851, 873, 888, 915, 970, 1068, 1185, 1296, 1336, 1373], "handler": [150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 224, 356, 449, 851, 879, 970], "happen": [154, 459, 646, 851, 1077, 1244, 1373], "hard": [97, 147, 167, 902, 970], "harder": [245, 356, 892, 970], "hardwar": 1404, "has_head": [152, 153, 157, 163, 167], "has_nul": [851, 1149, 1373], "has_prefix": [433, 728], "has_suffix": [429, 702], "has_two": 1391, "has_valid": 1373, "hash": [246, 356, 851, 1373], "hash_row": 356, "hat": [720, 721, 1312, 1313], "have": [5, 15, 31, 34, 41, 54, 57, 58, 66, 73, 100, 149, 150, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 212, 224, 233, 257, 259, 260, 280, 283, 288, 290, 291, 310, 318, 333, 356, 446, 449, 503, 505, 506, 610, 649, 653, 654, 659, 707, 722, 778, 851, 879, 896, 897, 907, 918, 942, 943, 970, 976, 1065, 1067, 1128, 1130, 1131, 1134, 1246, 1251, 1252, 1312, 1314, 1373, 1400, 1402, 1404], "haystack": [706, 1298], "he": 730, "head": [76, 167, 243, 263, 307, 356, 372, 551, 851, 901, 970, 1177, 1344, 1373], "header": [38, 41, 47, 49, 52, 140, 152, 153, 157, 163, 167, 229, 320, 356, 970], "header_format": [41, 356], "header_nam": [320, 356], "headerless": 167, "heap": [149, 231, 356, 851, 1127, 1373], "heatmap": [41, 356], "heavili": 172, "height": [41, 148, 183, 228, 356, 359, 1373, 1378], "hell": [729, 1321], "hello": [1, 21, 729, 730, 731, 976, 1194, 1321, 1322, 1323, 1384, 1387, 1396], "hello_": 800, "hello_data": 1387, "hello_world": 1387, "help": [41, 176, 177, 178, 179, 356, 970], "helper": [356, 360, 847], "henc": [720, 1313], "here": [38, 40, 41, 43, 47, 49, 50, 51, 52, 133, 135, 136, 137, 139, 154, 155, 156, 161, 162, 164, 167, 168, 169, 170, 171, 172, 181, 183, 187, 197, 212, 280, 356, 454, 466, 597, 598, 613, 707, 714, 776, 841, 851, 866, 925, 970, 976, 1072, 1084, 1306], "hex": [411, 412, 700, 701, 739, 1024, 1025, 1292, 1293, 1331], "hexadecim": [1024, 1025], "hf": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 197, 356, 970], "hf_token": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 197, 356, 970], "hi": [1, 1396], "hidden": [41, 356], "hidden_column": [41, 356], "hide": [22, 23, 24, 25], "hide_gridlin": [41, 356], "hide_password": 154, "high": [291, 356, 360, 646, 851, 863, 1244, 1373], "higher": [47, 52, 56, 223, 282, 348, 356, 647, 670, 671, 824, 851, 878, 913, 959, 970, 1067, 1245, 1263, 1373], "highest": [356, 360, 649, 761, 781, 851, 970, 1246, 1373], "highli": [149, 851], "hint": 147, "hippopotamu": [718, 719, 1310, 1311], "hist": [851, 1373, 1378], "histogram": [1373, 1378], "hit": [869, 970], "hive": [53, 164, 170, 172], "hive_custom": 200, "hive_dir": [53, 55], "hive_partit": [164, 170, 172], "hive_schema": [164, 170, 172], "hive_serd": 200, "hmm": [976, 1396], "hold": [300, 314, 356, 535, 851, 1158, 1353, 1373], "holidai": [454, 466, 776, 1072, 1084], "home": [742, 1334], "horizont": [21, 66, 108, 238, 249, 267, 269, 274, 306, 324, 356, 767, 769, 778, 779, 780, 785, 786, 788, 796, 799, 815, 817, 820, 825, 835, 941, 970], "host": [63, 152, 158, 160, 172], "hour": [162, 167, 170, 171, 245, 260, 288, 326, 356, 469, 471, 472, 476, 477, 480, 482, 483, 487, 489, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 792, 793, 794, 795, 809, 837, 838, 839, 851, 892, 897, 918, 970, 976, 1099, 1102, 1104, 1111, 1117, 1129, 1373, 1397], "hours_diff": 489, "hous": [318, 356], "how": [12, 38, 40, 41, 42, 43, 47, 49, 50, 51, 52, 58, 66, 108, 149, 155, 162, 164, 167, 170, 171, 172, 197, 228, 236, 259, 260, 280, 324, 325, 356, 390, 450, 480, 481, 532, 558, 559, 639, 652, 672, 734, 737, 776, 792, 851, 888, 896, 897, 936, 941, 970, 1003, 1068, 1102, 1103, 1184, 1185, 1250, 1264, 1326, 1329, 1373], "howev": [1, 10, 53, 136, 154, 164, 172, 207, 231, 264, 314, 356, 639, 851, 873, 884, 912, 925, 970, 1127, 1373], "hstack": [108, 356], "html": [33, 41, 43, 44, 134, 154, 158, 160, 209, 210, 211, 221, 356, 978, 979], "http": [21, 33, 41, 43, 44, 76, 134, 154, 155, 158, 160, 192, 209, 210, 211, 221, 356, 613, 705, 707, 717, 925, 970, 978, 979, 1297, 1299, 1309], "httpmethod": 76, "hug": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 197, 356, 970], "huge": [231, 356, 1127, 1373], "hut": [720, 721, 1312, 1313], "hvplot": [356, 359, 1373, 1378], "hyperbol": [375, 377, 379, 438, 689, 754, 851, 988, 990, 992, 1057, 1282, 1346, 1373], "hyperloglog": [214, 356, 373, 770, 851, 867, 970, 986, 1373], "hyphen": [696, 1288], "hypothesi": [181, 183, 186, 187, 1404], "i": [1, 10, 13, 15, 18, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 72, 73, 74, 75, 80, 90, 97, 99, 100, 104, 106, 107, 108, 109, 110, 111, 113, 114, 119, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 201, 203, 207, 212, 213, 214, 215, 216, 218, 219, 223, 224, 227, 228, 230, 231, 233, 234, 235, 236, 240, 244, 245, 246, 247, 250, 251, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 272, 276, 278, 279, 280, 284, 285, 286, 288, 289, 290, 291, 292, 295, 296, 297, 299, 301, 302, 303, 304, 307, 308, 311, 313, 314, 315, 318, 319, 320, 321, 323, 325, 326, 327, 331, 333, 334, 342, 356, 359, 360, 361, 366, 369, 371, 372, 373, 383, 386, 393, 394, 401, 406, 409, 414, 426, 427, 428, 431, 432, 446, 447, 449, 452, 453, 454, 455, 458, 466, 467, 474, 475, 477, 482, 484, 487, 495, 503, 504, 505, 506, 509, 511, 512, 513, 517, 518, 526, 528, 531, 534, 535, 547, 552, 553, 560, 561, 564, 566, 568, 577, 582, 583, 585, 586, 589, 591, 594, 597, 598, 602, 604, 605, 606, 608, 609, 610, 612, 621, 639, 644, 645, 646, 649, 651, 652, 653, 654, 655, 658, 659, 660, 661, 663, 665, 667, 669, 671, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 690, 691, 692, 693, 695, 696, 697, 698, 699, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 724, 727, 729, 730, 731, 734, 735, 736, 737, 739, 741, 742, 744, 749, 751, 756, 757, 762, 763, 766, 767, 768, 769, 770, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 790, 791, 793, 794, 799, 803, 804, 805, 806, 808, 809, 810, 811, 813, 816, 818, 821, 823, 826, 827, 828, 829, 830, 832, 834, 836, 838, 839, 840, 841, 842, 847, 851, 866, 867, 868, 869, 872, 873, 874, 876, 878, 879, 881, 882, 883, 884, 886, 887, 888, 891, 892, 895, 896, 897, 898, 900, 902, 903, 907, 908, 912, 915, 916, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 932, 933, 935, 936, 937, 938, 940, 943, 944, 945, 953, 963, 970, 974, 976, 983, 984, 985, 986, 998, 999, 1006, 1007, 1014, 1017, 1019, 1022, 1027, 1039, 1040, 1044, 1045, 1046, 1048, 1049, 1054, 1055, 1065, 1066, 1067, 1070, 1071, 1072, 1073, 1076, 1084, 1085, 1099, 1104, 1106, 1109, 1117, 1126, 1127, 1128, 1129, 1130, 1131, 1133, 1134, 1136, 1137, 1138, 1139, 1142, 1150, 1151, 1152, 1154, 1157, 1158, 1160, 1163, 1170, 1172, 1173, 1174, 1177, 1178, 1179, 1186, 1187, 1190, 1192, 1194, 1203, 1208, 1209, 1212, 1215, 1223, 1242, 1243, 1244, 1246, 1248, 1250, 1251, 1252, 1253, 1256, 1257, 1258, 1261, 1263, 1264, 1265, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1276, 1279, 1280, 1283, 1284, 1287, 1288, 1289, 1290, 1291, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1316, 1319, 1321, 1322, 1323, 1326, 1327, 1328, 1329, 1331, 1333, 1334, 1336, 1343, 1344, 1347, 1348, 1351, 1353, 1354, 1356, 1357, 1358, 1362, 1363, 1373, 1378, 1382, 1383, 1388, 1392, 1393, 1396, 1399, 1401, 1402, 1404], "i0e0": 1404, "i16": [1, 61, 462, 478, 497, 685, 851, 976, 1100, 1350, 1373, 1404], "i32": [1, 61, 133, 136, 140, 180, 182, 183, 294, 303, 356, 392, 393, 395, 414, 428, 457, 465, 468, 469, 470, 471, 472, 476, 499, 685, 739, 776, 841, 851, 920, 970, 975, 1005, 1006, 1008, 1027, 1075, 1086, 1090, 1091, 1092, 1098, 1121, 1221, 1331, 1373, 1393, 1397, 1404], "i64": [1, 10, 11, 14, 17, 18, 22, 28, 59, 60, 61, 62, 66, 67, 85, 107, 133, 134, 135, 136, 137, 138, 139, 140, 148, 152, 154, 161, 162, 167, 176, 178, 212, 213, 215, 216, 217, 218, 220, 224, 225, 228, 229, 232, 233, 235, 236, 239, 240, 242, 243, 244, 245, 247, 249, 250, 252, 254, 256, 259, 260, 261, 263, 264, 265, 266, 272, 273, 278, 279, 280, 281, 284, 285, 286, 287, 288, 292, 294, 296, 299, 301, 302, 303, 305, 307, 309, 316, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 346, 349, 350, 356, 361, 366, 368, 372, 382, 387, 388, 390, 391, 396, 398, 399, 400, 401, 402, 404, 407, 417, 422, 425, 426, 427, 436, 442, 443, 444, 445, 446, 447, 450, 451, 464, 480, 486, 488, 489, 490, 491, 492, 493, 494, 504, 507, 509, 510, 512, 513, 514, 515, 517, 520, 521, 523, 527, 529, 531, 532, 533, 534, 538, 539, 541, 542, 543, 544, 545, 548, 551, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 595, 597, 598, 618, 619, 620, 622, 623, 625, 627, 629, 630, 635, 639, 640, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 681, 683, 684, 685, 686, 691, 692, 693, 711, 720, 721, 735, 739, 744, 745, 747, 748, 749, 750, 751, 752, 756, 757, 758, 759, 761, 764, 771, 774, 777, 778, 779, 780, 784, 785, 786, 787, 788, 789, 792, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 822, 825, 829, 830, 831, 834, 835, 836, 837, 841, 847, 851, 866, 868, 870, 871, 873, 874, 879, 880, 882, 885, 887, 888, 889, 890, 891, 892, 893, 896, 897, 898, 899, 901, 902, 903, 904, 908, 909, 911, 912, 914, 915, 916, 917, 918, 920, 922, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 939, 942, 943, 946, 947, 949, 950, 951, 953, 954, 957, 960, 961, 970, 976, 980, 981, 982, 985, 1004, 1009, 1011, 1013, 1014, 1015, 1017, 1020, 1039, 1040, 1054, 1055, 1061, 1062, 1063, 1064, 1065, 1066, 1082, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1133, 1134, 1135, 1137, 1138, 1143, 1144, 1146, 1151, 1153, 1163, 1177, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1197, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1215, 1216, 1223, 1228, 1236, 1242, 1244, 1247, 1248, 1249, 1251, 1252, 1253, 1255, 1259, 1262, 1266, 1270, 1271, 1273, 1276, 1277, 1279, 1284, 1285, 1331, 1337, 1342, 1344, 1349, 1357, 1358, 1359, 1364, 1373, 1382, 1383, 1385, 1389, 1390, 1391, 1392, 1393, 1395, 1398, 1399, 1401, 1402, 1404], "i8": [405, 406, 462, 465, 469, 471, 472, 473, 476, 478, 479, 483, 496, 497, 588, 685, 823, 826, 842, 851, 1018, 1019, 1068, 1080, 1083, 1094, 1095, 1101, 1105, 1118, 1119, 1214, 1254, 1277, 1361, 1373, 1397], "i_bitand_j": 1392, "i_bitand_op_j": 1392, "i_bitcount": 1392, "i_bitor_j": 1392, "i_bitor_op_j": 1392, "i_bitxor_j": 1392, "i_bitxor_op_j": 1392, "iceberg": [42, 169, 356, 863], "icon": [41, 356], "id": [27, 34, 41, 66, 148, 152, 157, 169, 261, 313, 320, 333, 342, 356, 658, 720, 721, 760, 851, 898, 943, 953, 970, 976, 1256, 1360, 1373, 1401, 1402, 1404], "id_char": 1404, "id_var": [271, 323, 356, 907, 935, 970], "ideal": [142, 147], "ident": [34, 140, 217, 218, 356, 484, 657, 658, 851, 871, 872, 970, 1053, 1055, 1106, 1255, 1256, 1373], "identif": [157, 163], "identifi": [140, 154, 271, 278, 321, 323, 334, 356, 907, 933, 935, 970], "idiograph": 976, "idiom": 841, "idiomat": [847, 876, 883, 919, 938, 953, 970], "idx": [167, 245, 258, 333, 356, 393, 406, 589, 892, 943, 970, 1019, 1215, 1301], "idx_lit": 1301, "idx_rx": 1301, "ieee": [758, 851], "if_set": [5, 31], "if_table_exist": [39, 356], "ifnul": 1394, "ignor": [40, 56, 154, 172, 182, 183, 187, 265, 269, 306, 325, 356, 369, 371, 394, 414, 450, 481, 503, 505, 506, 559, 568, 598, 631, 632, 696, 712, 766, 768, 780, 817, 835, 851, 903, 936, 970, 976, 983, 984, 1007, 1027, 1068, 1103, 1128, 1130, 1131, 1185, 1194, 1232, 1233, 1288, 1304, 1373], "ignore_error": [152, 153, 162, 167, 171], "ignore_nul": [269, 306, 356, 369, 371, 394, 503, 505, 506, 568, 696, 712, 766, 768, 780, 817, 835, 851, 983, 984, 1007, 1128, 1130, 1131, 1194, 1288, 1304, 1373], "ignore_spac": 976, "ij": 721, "ij67": 721, "ijkl": 1396, "ilmsuxu": [697, 705, 706, 709, 720, 721, 1289, 1297, 1298, 1301, 1312, 1313], "imbal": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "imdb_scor": 1382, "immedi": [207, 649, 771, 775, 777, 781, 783, 790, 791, 793, 794, 805, 806, 809, 810, 823, 826, 829, 833, 838, 839, 842, 851, 1246, 1373, 1383], "immut": [314, 356, 1353, 1373], "impact": [245, 356, 892, 970, 1382, 1401], "impl": 169, "implement": [47, 97, 147, 154, 211, 246, 264, 342, 356, 359, 360, 526, 535, 598, 622, 623, 625, 627, 629, 630, 745, 755, 813, 851, 953, 1150, 1158, 1223, 1271, 1273, 1355, 1373, 1378], "implic": [449, 851, 879, 970], "implicit": [325, 356, 841, 936, 970], "implicitli": [236, 284, 356, 513, 841, 851, 888, 915, 970, 1401], "implod": [597, 598, 851, 1373, 1391], "import": [11, 17, 29, 36, 38, 40, 41, 43, 44, 47, 58, 73, 76, 97, 133, 134, 137, 138, 148, 152, 154, 155, 161, 162, 167, 173, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 213, 216, 223, 224, 225, 228, 243, 245, 258, 260, 278, 280, 296, 303, 311, 313, 318, 323, 324, 326, 356, 359, 360, 415, 448, 449, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 605, 606, 612, 639, 661, 663, 665, 667, 669, 671, 674, 676, 678, 776, 789, 790, 791, 792, 793, 794, 795, 796, 809, 830, 838, 839, 847, 851, 863, 870, 874, 878, 879, 880, 882, 892, 897, 902, 922, 935, 970, 974, 1028, 1056, 1058, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1129, 1161, 1164, 1166, 1167, 1258, 1281, 1345, 1373, 1378, 1383, 1398, 1401, 1404], "improv": [39, 52, 158, 169, 170, 259, 356, 896, 970], "in_part_idx": [53, 55, 146], "in_plac": [249, 300, 328, 356, 1247, 1278, 1285, 1373], "in_progress": [914, 970], "includ": [7, 21, 31, 38, 40, 41, 49, 53, 55, 63, 138, 154, 156, 157, 162, 163, 164, 167, 168, 169, 170, 171, 172, 183, 184, 207, 219, 223, 231, 261, 278, 280, 284, 291, 302, 318, 320, 324, 325, 356, 447, 483, 513, 517, 528, 534, 605, 646, 660, 662, 664, 666, 668, 670, 672, 673, 675, 677, 720, 721, 725, 726, 729, 730, 776, 785, 827, 828, 851, 878, 888, 898, 915, 927, 936, 970, 976, 1066, 1067, 1105, 1127, 1138, 1152, 1157, 1244, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1312, 1313, 1317, 1318, 1321, 1373, 1401], "include_bom": [38, 49, 356, 970], "include_boundari": [245, 356, 892, 970], "include_break": [447, 646, 851, 1066, 1244, 1373], "include_breakpoint": [528, 851, 1152, 1373], "include_categor": 976, "include_categori": [528, 851, 1152, 1373], "include_col": 183, "include_file_path": [157, 162, 163, 164, 167, 170, 171, 172], "include_head": [38, 41, 49, 153, 320, 356, 970], "include_index": 138, "include_init": 785, "include_kei": [53, 55, 278, 291, 356], "include_nul": [325, 356, 936, 970], "inclus": [212, 245, 288, 356, 487, 534, 659, 663, 665, 667, 669, 671, 674, 676, 678, 725, 726, 771, 790, 791, 793, 794, 805, 806, 809, 810, 838, 839, 851, 892, 918, 970, 1109, 1157, 1317, 1318, 1373], "incom": 154, "incompat": 126, "incomplet": [654, 851, 1252, 1373], "incorpor": 1401, "incorrect": [297, 356, 498, 597, 683, 851, 923, 953, 970, 1120, 1274, 1373], "incorrectli": [152, 589], "increas": [41, 53, 54, 55, 58, 152, 157, 163, 164, 172, 356, 446, 658, 851, 1065, 1256, 1373], "independ": [64, 180, 183, 187, 318, 356, 686, 851, 873, 884, 912, 925, 970], "index": [41, 114, 134, 138, 141, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 175, 211, 213, 239, 241, 245, 250, 255, 257, 280, 286, 288, 289, 290, 299, 301, 313, 314, 316, 323, 325, 326, 332, 333, 356, 367, 380, 381, 382, 384, 387, 388, 393, 401, 406, 504, 520, 521, 523, 530, 554, 555, 564, 565, 566, 582, 583, 589, 659, 663, 665, 667, 669, 671, 674, 676, 678, 682, 684, 691, 697, 705, 709, 711, 724, 735, 745, 774, 805, 808, 851, 890, 892, 918, 924, 926, 935, 936, 942, 943, 970, 976, 993, 994, 995, 996, 997, 1000, 1001, 1006, 1014, 1019, 1129, 1143, 1144, 1154, 1172, 1180, 1181, 1190, 1191, 1192, 1208, 1209, 1215, 1236, 1271, 1272, 1276, 1284, 1297, 1301, 1303, 1316, 1327, 1373, 1378, 1391, 1396], "index_column": [245, 288, 356, 659, 851, 892, 918, 970], "index_of": [851, 1373], "indexord": [313, 314, 356], "indic": [38, 41, 43, 47, 49, 50, 51, 52, 72, 73, 75, 90, 107, 117, 149, 150, 152, 153, 154, 157, 158, 160, 162, 163, 164, 167, 170, 171, 172, 180, 181, 187, 197, 245, 288, 291, 299, 311, 356, 383, 401, 520, 528, 536, 537, 538, 540, 541, 542, 543, 544, 545, 564, 582, 602, 603, 604, 605, 606, 607, 608, 639, 659, 663, 665, 667, 669, 671, 674, 676, 678, 682, 684, 774, 775, 822, 851, 892, 918, 924, 970, 976, 1014, 1049, 1143, 1152, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1190, 1208, 1271, 1272, 1276, 1348, 1373, 1396, 1404], "indistinguish": [38, 49, 356, 970], "individu": [41, 52, 143, 207, 288, 313, 314, 318, 356, 598, 706, 748, 851, 873, 918, 970, 976, 1052, 1298, 1373], "inequ": [633, 851], "inexact": [176, 177, 178, 179], "inf": [180, 183, 187, 379, 447, 537, 540, 646, 758, 851, 992, 1058, 1066, 1161, 1164, 1221, 1239, 1244, 1361, 1373, 1398], "infer": [38, 43, 47, 49, 50, 51, 52, 74, 89, 107, 133, 135, 136, 137, 138, 139, 152, 153, 154, 157, 161, 162, 163, 164, 167, 170, 171, 172, 197, 264, 356, 597, 598, 655, 713, 734, 736, 737, 738, 741, 795, 799, 811, 826, 851, 970, 1223, 1253, 1305, 1326, 1328, 1329, 1330, 1333, 1373], "infer_schema": [152, 167], "infer_schema_length": [136, 139, 148, 152, 153, 154, 157, 161, 162, 163, 167, 171, 356, 713, 970, 1305], "inference_length": [738, 1330], "inference_s": [264, 356], "infin": [742, 758, 851, 1334], "infinit": [540, 758, 851, 1164, 1373], "influenc": [157, 902, 970], "influxdb": 154, "info": [156, 168, 169, 175], "inform": [20, 24, 38, 39, 43, 47, 49, 50, 51, 52, 53, 54, 55, 63, 147, 149, 156, 162, 164, 167, 168, 169, 170, 171, 172, 176, 178, 197, 198, 199, 201, 202, 209, 221, 223, 356, 360, 547, 690, 697, 705, 706, 709, 720, 721, 851, 873, 878, 884, 912, 925, 970, 974, 978, 1173, 1283, 1289, 1297, 1298, 1301, 1312, 1313, 1373], "inherit": [289, 356, 449, 851, 879, 970], "init": [207, 1382], "initcap": 1394, "initi": [33, 34, 35, 41, 89, 147, 192, 207, 356, 785, 799, 841, 1401], "initialis": [76, 154, 207, 970], "inject": [41, 58, 356], "inlin": [25, 291, 356, 697, 705, 706, 709, 720, 721, 1289, 1297, 1298, 1301, 1312, 1313, 1391], "inner": [67, 85, 182, 259, 261, 325, 356, 394, 405, 451, 568, 588, 598, 652, 755, 830, 851, 896, 898, 936, 970, 1007, 1018, 1069, 1194, 1214, 1223, 1250, 1355, 1373, 1389, 1401], "inner_dtyp": [182, 185], "innermost": [182, 185], "innter": 1006, "inprocessqueri": [873, 970], "input": [0, 55, 58, 64, 107, 136, 138, 149, 152, 153, 215, 225, 244, 261, 264, 265, 269, 278, 280, 285, 294, 295, 299, 302, 306, 319, 325, 330, 331, 335, 356, 366, 427, 429, 433, 436, 504, 507, 519, 534, 593, 598, 610, 639, 653, 654, 687, 693, 711, 722, 724, 730, 731, 732, 733, 735, 737, 749, 757, 765, 767, 769, 771, 774, 777, 778, 779, 780, 788, 795, 797, 805, 806, 811, 812, 813, 815, 817, 820, 829, 833, 835, 841, 847, 851, 863, 868, 880, 891, 898, 903, 916, 920, 921, 924, 927, 932, 936, 939, 940, 946, 970, 1040, 1054, 1129, 1157, 1219, 1220, 1223, 1242, 1251, 1252, 1276, 1280, 1303, 1316, 1327, 1329, 1358, 1373, 1395, 1396, 1398], "input_wildcard_expans": [149, 851], "insensit": [698, 706, 708, 710, 720, 721, 722, 976, 1289, 1290, 1298, 1300, 1301, 1302, 1312, 1313, 1314], "insensitive_match": [697, 709], "insert": [39, 56, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 250, 265, 320, 322, 356, 682, 696, 712, 744, 851, 903, 934, 970, 1272, 1288, 1304, 1336, 1373], "insert_aft": [41, 356], "insert_befor": [41, 356], "insert_chart": [41, 356], "insert_column": 356, "insid": [65, 597, 841, 851, 874, 970], "inspect": [851, 970], "instal": [33, 34, 35, 111, 138, 152, 153, 155, 158, 160, 221, 315, 356, 454, 466, 613, 776, 925, 970, 1072, 1084, 1354, 1373], "instanc": [38, 43, 47, 49, 50, 51, 52, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 183, 187, 197, 233, 238, 356, 610, 785, 799, 847, 863, 870, 902, 914, 942, 943, 970, 1134, 1373], "instanti": [34, 39, 41, 154, 185, 294, 312, 313, 330, 356, 361, 920, 939, 970, 975, 1350, 1351, 1373], "instantli": [65, 874, 970], "instead": [38, 40, 45, 46, 49, 58, 65, 67, 134, 135, 136, 139, 152, 153, 154, 157, 163, 164, 167, 172, 173, 180, 181, 182, 183, 187, 214, 215, 243, 256, 257, 260, 264, 271, 276, 278, 289, 290, 291, 294, 295, 296, 299, 313, 314, 315, 319, 331, 332, 356, 359, 360, 382, 401, 427, 428, 431, 432, 447, 461, 487, 504, 507, 517, 582, 597, 612, 645, 646, 653, 684, 696, 704, 715, 716, 729, 730, 731, 732, 733, 744, 751, 757, 764, 771, 773, 775, 777, 781, 782, 783, 790, 791, 793, 794, 795, 805, 806, 809, 810, 823, 826, 829, 830, 833, 834, 838, 839, 842, 851, 866, 867, 868, 874, 884, 897, 907, 920, 921, 922, 924, 932, 940, 941, 942, 945, 970, 976, 995, 1014, 1024, 1040, 1041, 1045, 1046, 1066, 1079, 1088, 1089, 1109, 1129, 1149, 1208, 1243, 1244, 1251, 1271, 1273, 1276, 1285, 1288, 1296, 1307, 1308, 1321, 1322, 1323, 1336, 1343, 1353, 1354, 1358, 1373, 1378, 1382, 1383, 1387, 1401, 1402], "int": [11, 13, 14, 15, 18, 26, 27, 38, 39, 41, 43, 47, 49, 50, 51, 52, 54, 60, 67, 74, 136, 139, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 197, 199, 213, 215, 217, 223, 231, 234, 235, 239, 241, 243, 246, 247, 248, 250, 255, 257, 258, 260, 263, 264, 275, 276, 286, 288, 289, 292, 298, 299, 301, 304, 307, 312, 316, 319, 324, 327, 329, 332, 333, 339, 350, 356, 366, 393, 401, 403, 406, 408, 409, 426, 427, 446, 450, 454, 480, 503, 505, 506, 510, 511, 512, 518, 520, 521, 523, 526, 527, 528, 551, 559, 564, 565, 566, 567, 577, 582, 583, 585, 587, 588, 589, 591, 638, 640, 643, 644, 646, 649, 652, 655, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 686, 691, 695, 705, 711, 713, 718, 719, 720, 724, 726, 727, 735, 738, 739, 744, 752, 756, 757, 763, 765, 771, 781, 783, 789, 792, 795, 801, 803, 805, 806, 809, 810, 822, 823, 826, 827, 828, 832, 833, 836, 837, 840, 842, 851, 868, 871, 878, 886, 887, 890, 893, 897, 901, 912, 924, 926, 929, 931, 932, 937, 938, 942, 943, 945, 950, 961, 970, 975, 976, 993, 994, 1006, 1014, 1016, 1019, 1021, 1022, 1039, 1040, 1041, 1052, 1053, 1059, 1065, 1068, 1069, 1072, 1102, 1127, 1128, 1130, 1131, 1135, 1136, 1137, 1142, 1143, 1144, 1150, 1151, 1152, 1154, 1172, 1176, 1177, 1185, 1190, 1191, 1192, 1193, 1203, 1208, 1209, 1211, 1213, 1214, 1215, 1217, 1229, 1230, 1232, 1233, 1236, 1238, 1239, 1242, 1243, 1244, 1246, 1250, 1253, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1279, 1284, 1287, 1297, 1303, 1305, 1310, 1311, 1312, 1316, 1318, 1319, 1327, 1330, 1331, 1336, 1343, 1344, 1350, 1357, 1358, 1363, 1373, 1385, 1388, 1401, 1404], "int16": [1, 48, 61, 318, 356, 444, 445, 478, 751, 851, 976, 1063, 1064, 1100, 1343, 1350, 1373], "int32": [1, 41, 61, 66, 133, 136, 180, 182, 183, 245, 258, 265, 288, 313, 356, 392, 393, 395, 414, 428, 457, 468, 469, 470, 471, 476, 499, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 739, 755, 826, 851, 892, 903, 918, 970, 975, 976, 1002, 1005, 1006, 1008, 1027, 1075, 1086, 1090, 1091, 1092, 1098, 1121, 1129, 1221, 1331, 1355, 1356, 1373], "int64": [1, 40, 41, 60, 61, 66, 67, 89, 109, 152, 161, 219, 229, 238, 245, 265, 279, 288, 293, 294, 308, 315, 356, 387, 388, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 444, 445, 488, 489, 490, 491, 492, 493, 494, 498, 504, 507, 598, 624, 626, 628, 643, 651, 659, 663, 665, 667, 669, 671, 674, 676, 678, 713, 739, 751, 755, 771, 778, 797, 805, 806, 811, 826, 833, 847, 851, 875, 883, 892, 903, 911, 918, 919, 920, 970, 976, 1000, 1001, 1003, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1063, 1064, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1120, 1122, 1129, 1223, 1248, 1331, 1343, 1353, 1354, 1355, 1356, 1373], "int64arrai": [1347, 1373], "int8": [1, 61, 89, 238, 356, 405, 406, 444, 445, 462, 465, 472, 473, 479, 483, 496, 497, 588, 751, 823, 826, 842, 851, 975, 1018, 1019, 1063, 1064, 1068, 1080, 1083, 1094, 1095, 1101, 1105, 1118, 1119, 1214, 1254, 1343, 1353, 1361, 1373], "int_rang": [245, 324, 333, 342, 356, 771, 808, 829, 892, 902, 943, 953, 970], "integ": [38, 41, 49, 56, 72, 73, 75, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 174, 181, 183, 186, 188, 213, 228, 245, 265, 288, 311, 314, 356, 370, 435, 483, 516, 517, 638, 644, 646, 651, 658, 659, 660, 672, 711, 735, 739, 765, 771, 801, 805, 806, 826, 851, 882, 892, 903, 918, 970, 976, 1051, 1105, 1141, 1242, 1244, 1248, 1256, 1257, 1264, 1271, 1303, 1327, 1331, 1353, 1373, 1395, 1401, 1404], "integer_cast": [56, 265, 356, 903, 970], "integer_list": 85, "integr": [41, 318, 356, 663, 665, 667, 669, 671, 674, 676, 678, 851, 1404], "intend": [1, 176, 177, 178, 179, 744, 1336], "intens": [264, 342, 356, 639, 851, 1223, 1373], "interact": [183, 187, 223, 356, 359, 878, 970, 1373, 1378], "interchang": [134, 211], "interest": [153, 484, 487, 1106, 1109], "interfac": [0, 122, 123, 133, 134, 205, 206, 210, 863, 979, 1401], "interfer": 974, "interleav": 1396, "intermedi": [251, 356, 532, 851, 895, 970, 1155, 1156, 1373, 1404], "intern": [43, 44, 50, 154, 174, 257, 308, 356, 517, 851, 970, 1347, 1373, 1383], "interoper": [209, 978], "interpol": [223, 282, 348, 356, 512, 533, 601, 647, 670, 671, 824, 851, 878, 913, 959, 970, 1067, 1156, 1245, 1263, 1373, 1390], "interpolate_bi": [851, 1373], "interpolationmethod": [532, 851, 1155, 1373], "interpret": [137, 139, 152, 153, 167, 356, 414, 970, 1027], "intersect": [41, 356, 579, 976, 1205, 1400], "interv": [245, 288, 326, 356, 447, 482, 528, 534, 646, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 809, 810, 838, 839, 851, 892, 918, 970, 1066, 1080, 1082, 1083, 1090, 1092, 1094, 1095, 1098, 1100, 1101, 1104, 1108, 1118, 1152, 1157, 1244, 1373, 1390], "intoexpr": [149, 215, 244, 245, 288, 294, 295, 299, 302, 319, 330, 331, 335, 356, 372, 389, 390, 410, 413, 416, 427, 450, 454, 480, 504, 510, 520, 528, 530, 533, 534, 535, 557, 558, 578, 579, 580, 581, 639, 653, 654, 663, 665, 667, 669, 671, 674, 676, 678, 682, 684, 693, 698, 708, 710, 722, 725, 726, 727, 729, 730, 731, 732, 733, 749, 757, 767, 769, 774, 777, 778, 779, 780, 781, 783, 785, 788, 792, 799, 809, 815, 817, 820, 826, 829, 833, 835, 851, 868, 891, 892, 918, 920, 921, 924, 927, 932, 939, 940, 946, 970, 1002, 1003, 1023, 1026, 1029, 1040, 1072, 1129, 1135, 1154, 1156, 1157, 1158, 1183, 1184, 1251, 1252, 1272, 1276, 1302, 1317, 1318, 1319, 1321, 1322, 1323, 1324, 1325, 1358, 1373], "intoexprcolumn": [236, 250, 284, 356, 393, 394, 401, 426, 427, 436, 482, 510, 513, 565, 568, 577, 582, 640, 644, 681, 684, 705, 711, 714, 718, 719, 724, 735, 739, 744, 756, 757, 771, 776, 790, 791, 793, 794, 805, 806, 810, 838, 839, 841, 851, 888, 915, 924, 970, 1006, 1007, 1014, 1054, 1099, 1104, 1117, 1135, 1191, 1194, 1203, 1208, 1239, 1250, 1297, 1303, 1306, 1310, 1311, 1316, 1327, 1331, 1336, 1373], "introduc": [57, 100, 734, 736, 737, 1326, 1328, 1329], "introduct": 1400, "intuit": [517, 851, 976], "invalid": [38, 49, 123, 152, 153, 167, 216, 356, 428, 713, 714, 739, 758, 851, 970, 1024, 1041, 1305, 1306, 1331, 1373], "invalid_valu": 1024, "invalidoperationerror": [654, 851, 1252, 1373, 1399], "invari": [902, 970], "invers": [374, 375, 376, 377, 378, 379, 851, 987, 988, 989, 990, 991, 992, 1353, 1373, 1398], "invert": 976, "invok": 207, "involv": [236, 284, 356, 888, 915, 970], "io": [36, 38, 41, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 150, 152, 158, 159, 160, 161, 162, 165, 166, 167, 169, 170, 171, 224, 296, 356, 449, 519, 612, 851, 879, 922, 970], "io_sourc": 147, "iobas": [45, 161, 224, 296, 356, 449, 612, 616, 851, 879, 922, 970], "ipc": [43, 44, 50, 158, 159, 160, 170, 173, 356, 863, 970], "ipccompress": [43, 44, 50, 356, 970], "ir": [925, 970], "is_between": [851, 1373], "is_clos": [851, 1373], "is_dupl": [356, 851, 1373], "is_elementwis": [149, 597, 851], "is_empti": [356, 1373], "is_finit": [851, 1373], "is_first_distinct": [851, 1373], "is_in": [109, 236, 356, 851, 1373], "is_infinit": [851, 1373], "is_last_distinct": [851, 1373], "is_nan": [227, 356, 851, 881, 970, 1373], "is_not_nan": [851, 1373], "is_not_nul": [284, 356, 851, 915, 970, 1373], "is_nul": [228, 356, 851, 882, 970, 1373], "is_numer": 1404, "is_odd": [294, 356, 920, 970, 976], "is_selector": 976, "is_sort": 1373, "is_uniqu": [356, 851, 1373], "isclos": [535, 851, 1158, 1373], "isn": [97, 147, 841], "iso": [468, 487, 496, 497, 1086, 1109, 1118, 1119, 1396], "iso8601": [152, 153, 167, 487, 1109], "iso_lang": 1396, "iso_year": 499, "isodow": 1397, "isoweek": 1397, "isoyear": 1397, "issu": [102, 103, 106, 107, 110, 117, 119, 130, 152, 153, 154, 167, 356, 444, 445, 751, 851, 1063, 1064, 1343, 1373, 1401], "ital": [41, 356], "item": [14, 66, 153, 243, 289, 292, 356, 389, 393, 394, 450, 509, 557, 559, 566, 568, 577, 681, 727, 851, 866, 1002, 1006, 1007, 1068, 1133, 1183, 1185, 1192, 1194, 1203, 1270, 1319, 1373], "iter": [53, 54, 55, 58, 64, 65, 66, 76, 132, 133, 136, 147, 149, 154, 186, 188, 215, 225, 236, 244, 245, 256, 257, 258, 261, 284, 288, 289, 290, 291, 294, 295, 302, 319, 320, 330, 331, 334, 335, 356, 427, 446, 454, 466, 513, 639, 693, 749, 757, 767, 769, 774, 776, 777, 778, 779, 780, 788, 815, 817, 820, 829, 833, 835, 841, 847, 851, 868, 880, 888, 891, 892, 898, 915, 918, 920, 921, 927, 932, 939, 940, 946, 970, 975, 976, 1040, 1065, 1072, 1084, 1138, 1271, 1358, 1373, 1404], "iter_batch": 154, "iter_column": 356, "iter_row": [258, 289, 290, 291, 356], "iter_slic": 356, "its": [77, 140, 175, 231, 314, 356, 458, 482, 495, 504, 597, 657, 693, 748, 762, 841, 851, 866, 876, 883, 938, 970, 974, 1076, 1104, 1117, 1127, 1129, 1255, 1353, 1373, 1403], "itself": [181, 356, 359, 360, 660, 662, 664, 666, 668, 670, 672, 673, 675, 677, 775, 827, 828, 851, 900, 970, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1373, 1378, 1382, 1383, 1401], "ix": [280, 356], "j": [320, 356, 1392], "jax": [313, 356, 1351, 1373], "jax_enable_x64": [313, 356], "jaxexporttyp": [313, 356], "jjk": 976, "jkl": [706, 1298], "jklmn": 1396, "job": [869, 970], "join": [57, 58, 64, 66, 100, 236, 260, 261, 284, 325, 356, 513, 532, 639, 696, 830, 851, 873, 884, 888, 897, 898, 912, 915, 925, 936, 941, 970, 1288, 1383, 1385, 1391, 1400, 1401], "join_asof": [259, 356, 896, 970], "join_nul": [259, 356, 896, 970], "join_wher": [356, 970], "joinstrategi": [58, 259, 356, 896, 970], "joinvalid": [259, 356, 896, 970], "jpy": 1404, "json": [2, 3, 5, 6, 45, 46, 148, 149, 161, 162, 169, 171, 200, 224, 296, 356, 449, 519, 612, 616, 713, 714, 746, 851, 863, 879, 922, 970, 1305, 1306, 1339], "json_path": [714, 1306], "json_path_match": [713, 1305], "json_stat": 5, "json_str": [161, 162], "json_val": [714, 1306], "jsonencod": 148, "jsonpath": [713, 714, 1305, 1306], "jst": [140, 976], "jul": [734, 1326, 1396], "juli": [1109, 1396, 1397], "just": [41, 138, 154, 167, 271, 323, 356, 907, 935, 970, 976], "k": [215, 291, 319, 320, 356, 426, 427, 441, 547, 756, 757, 851, 868, 932, 970, 1039, 1040, 1060, 1173, 1357, 1358, 1373], "k_2": [690, 851, 1283, 1373], "k_3": [690, 851, 1283, 1373], "kadokawa": [717, 1309], "kanji": 976, "karen": [280, 356], "kathmandu": [1078, 1079, 1107], "kb": [231, 356, 415, 1028, 1127, 1373], "kde": [1373, 1378], "keep": [58, 152, 153, 162, 167, 170, 171, 236, 321, 325, 326, 356, 519, 597, 615, 623, 653, 777, 841, 851, 933, 936, 970, 1251, 1373], "kei": [38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 55, 58, 63, 66, 145, 146, 156, 162, 164, 167, 168, 169, 170, 171, 172, 197, 212, 213, 245, 257, 259, 260, 272, 278, 285, 287, 290, 291, 325, 356, 513, 598, 653, 654, 722, 790, 793, 833, 851, 892, 896, 897, 908, 914, 916, 917, 936, 970, 976, 980, 1251, 1252, 1314, 1373, 1389], "kept": [321, 356, 933, 970], "keyedpartit": 146, "keyedpartitioncontext": [53, 55, 145], "keyerror": 17, "keystrok": 847, "keyword": [40, 156, 164, 168, 183, 187, 197, 221, 244, 279, 289, 294, 295, 315, 330, 331, 335, 356, 454, 513, 643, 738, 749, 776, 829, 833, 841, 851, 891, 911, 920, 921, 939, 940, 946, 970, 1072, 1330, 1354, 1373, 1386], "kl": 721, "kleen": [369, 371, 766, 767, 768, 769, 851, 983, 984, 1373], "klmnoopqrstuvwxyz": [258, 356], "knight": 1382, "know": [58, 154, 280, 323, 356, 589, 597, 851, 866, 935, 970], "known": [158, 201, 406, 589, 679, 851, 953, 1019, 1215, 1268, 1373], "kurtosi": [660, 851, 1257, 1373], "kuzu_db_conn": 154, "kwarg": [32, 33, 37, 57, 68, 69, 71, 72, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 149, 151, 154, 155, 183, 185, 187, 200, 204, 221, 236, 279, 284, 315, 356, 359, 643, 851, 888, 911, 915, 945, 970, 1354, 1373, 1378, 1386, 1401], "k\u00f9zudb": 154, "l": [809, 810], "l1": 66, "l2": 66, "label": [245, 313, 318, 356, 359, 360, 447, 646, 660, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 851, 892, 912, 970, 1066, 1244, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1373, 1378], "label_column": [318, 356], "labelangl": [356, 359, 1373, 1378], "lag": [299, 356, 401, 582, 684, 779, 851, 924, 970, 1014, 1208, 1276, 1373], "lake": [40, 156, 168, 356, 863], "lambda": [53, 97, 167, 238, 264, 279, 280, 285, 342, 356, 361, 406, 505, 506, 589, 597, 598, 623, 624, 785, 786, 799, 812, 813, 825, 851, 902, 911, 916, 953, 970, 1019, 1130, 1131, 1215, 1223, 1373], "land": [454, 466, 1072, 1084], "languag": [167, 245, 260, 288, 326, 356, 477, 482, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1099, 1104, 1117, 1129, 1373], "larg": [11, 12, 15, 58, 154, 157, 163, 172], "large_str": [258, 308, 315, 356], "larger": [11, 49, 50, 51, 52, 517, 535, 781, 851, 970, 1158, 1373], "largest": [215, 319, 356, 427, 756, 757, 851, 868, 932, 970, 1040, 1357, 1358, 1373], "last": [40, 162, 167, 170, 171, 176, 177, 178, 179, 247, 260, 263, 280, 291, 302, 307, 314, 321, 350, 356, 382, 393, 402, 446, 462, 474, 478, 496, 518, 541, 566, 584, 587, 589, 622, 623, 625, 627, 629, 630, 639, 654, 692, 693, 711, 727, 735, 752, 774, 836, 847, 851, 897, 927, 931, 933, 961, 970, 976, 995, 1006, 1015, 1065, 1080, 1096, 1100, 1118, 1142, 1151, 1165, 1177, 1192, 1210, 1213, 1252, 1285, 1303, 1319, 1327, 1344, 1353, 1373, 1394, 1396], "last_column": [41, 356], "later": [260, 296, 356, 612, 897, 922, 970], "latest": [33, 134, 156, 168, 211, 480, 481, 610, 734, 737, 792, 1102, 1103, 1326, 1329], "latt": 976, "latter": [41, 134, 233, 356, 1134, 1373], "lazi": [1, 49, 50, 51, 52, 53, 66, 152, 158, 162, 164, 167, 183, 260, 279, 280, 303, 356, 361, 597, 598, 801, 823, 826, 842, 851, 878, 896, 897, 941, 946, 947, 949, 951, 953, 954, 955, 956, 957, 958, 959, 960, 970, 976, 1382, 1383, 1384, 1385, 1386, 1388, 1401, 1404], "lazili": [99, 152, 153, 158, 162, 164, 167, 168, 169, 170, 171, 172, 361, 874, 970], "lazy_fram": [64, 65, 132], "lazyfram": [0, 1, 10, 58, 59, 60, 61, 62, 64, 65, 66, 97, 132, 143, 147, 152, 158, 162, 164, 167, 168, 169, 170, 171, 172, 173, 176, 177, 183, 197, 219, 224, 262, 265, 279, 280, 296, 303, 356, 361, 449, 513, 589, 612, 829, 830, 841, 851, 863, 967, 968, 969, 975, 976, 1382, 1383, 1386, 1388, 1401, 1402, 1404], "lazyframeext": [914, 970], "lazygroupbi": [891, 892, 918, 970], "lbl": [313, 318, 356], "ldf": [1, 946, 947, 949, 951, 954, 955, 956, 957, 958, 959, 960], "ldot": [504, 851, 1129, 1373], "le": [535, 702, 851, 1158, 1373], "lead": [15, 47, 97, 140, 147, 152, 173, 269, 297, 299, 306, 356, 401, 520, 523, 582, 589, 597, 598, 683, 684, 729, 731, 781, 817, 835, 851, 902, 923, 924, 953, 970, 1014, 1208, 1223, 1274, 1276, 1321, 1323, 1373], "leap": [467, 477, 1085, 1099], "leap_year": 467, "learn": [318, 356], "least": [66, 113, 280, 356, 423, 424, 640, 705, 707, 777, 781, 783, 851, 1036, 1037, 1239, 1297, 1299, 1373, 1394], "leav": [6, 271, 323, 356, 589, 907, 935, 970], "left": [16, 17, 41, 58, 176, 177, 178, 179, 245, 259, 260, 288, 325, 356, 447, 503, 504, 505, 506, 532, 534, 646, 659, 663, 665, 667, 669, 671, 674, 676, 678, 682, 755, 777, 785, 786, 790, 791, 793, 794, 799, 809, 810, 825, 838, 839, 841, 851, 892, 896, 897, 918, 936, 970, 1066, 1128, 1129, 1130, 1131, 1157, 1244, 1272, 1355, 1373, 1385, 1389, 1394], "left_clos": [447, 646, 851, 1066, 1244, 1373], "left_on": [259, 260, 325, 356, 896, 897, 936, 970], "left_right": [259, 325, 356, 896, 936, 970], "leftmost": [682, 851, 1272, 1373, 1396], "len": [13, 183, 187, 219, 258, 280, 333, 337, 342, 356, 440, 598, 609, 611, 649, 657, 782, 805, 809, 851, 875, 938, 943, 948, 953, 970, 975, 1059, 1255, 1373], "len_byt": [13, 432, 716, 717, 1046, 1308], "len_char": [431, 715, 1045, 1307], "length": [66, 67, 85, 149, 157, 163, 167, 181, 185, 243, 245, 288, 301, 356, 359, 431, 446, 482, 583, 589, 610, 649, 653, 654, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 691, 711, 715, 716, 718, 719, 722, 724, 735, 744, 778, 809, 810, 823, 826, 827, 828, 842, 851, 866, 892, 912, 918, 926, 970, 1045, 1052, 1065, 1076, 1104, 1209, 1215, 1236, 1251, 1252, 1255, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1284, 1303, 1307, 1308, 1310, 1311, 1314, 1316, 1327, 1336, 1373, 1390, 1391, 1394], "leq": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "less": [55, 167, 260, 356, 517, 549, 596, 727, 841, 851, 897, 970, 1319, 1404], "letter": [232, 339, 350, 356, 507, 698, 706, 708, 710, 722, 742, 797, 851, 885, 950, 961, 970, 976, 1290, 1298, 1300, 1302, 1314, 1334, 1396], "level": [11, 41, 43, 44, 47, 50, 52, 148, 165, 167, 170, 171, 172, 238, 264, 276, 303, 308, 356, 360, 513, 851, 863, 928, 970, 1347, 1373, 1401], "lexic": [70, 976, 1049], "lf": [10, 49, 50, 51, 52, 61, 97, 143, 361, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 922, 924, 925, 926, 927, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 941, 942, 943, 948, 952, 970, 1390, 1401, 1404], "lf1": [830, 928, 970, 1386, 1388, 1402], "lf2": [830, 928, 970, 1386, 1388, 1402], "lf3": [970, 1386], "lf4": [970, 1386], "lf5": 970, "lf6": 970, "lf_other": [941, 970], "lib": [851, 1347, 1373], "librari": [1, 115, 149, 154, 157, 597, 851, 974, 1404], "life": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "lifetim": [207, 862, 1388], "light": [41, 356], "like": [36, 38, 40, 43, 44, 45, 46, 47, 65, 134, 149, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 213, 224, 245, 252, 254, 259, 291, 296, 313, 314, 356, 359, 449, 455, 519, 561, 597, 615, 649, 705, 730, 731, 762, 847, 851, 869, 874, 879, 892, 970, 1073, 1187, 1246, 1297, 1362, 1373, 1378], "limit": [11, 12, 52, 53, 154, 155, 189, 235, 356, 409, 512, 518, 851, 887, 970, 1022, 1137, 1142, 1373, 1391, 1400], "line": [11, 21, 41, 152, 153, 157, 167, 243, 252, 254, 356, 359, 705, 1297, 1373, 1378], "line_termin": [38, 49, 356, 970], "linear": [223, 251, 282, 348, 356, 532, 533, 556, 601, 647, 670, 671, 779, 780, 824, 851, 878, 895, 913, 959, 970, 1067, 1155, 1156, 1182, 1245, 1263, 1373], "linearli": 810, "lineitem": [142, 153, 155], "link": 974, "list": [1, 14, 34, 40, 41, 58, 59, 61, 64, 65, 67, 73, 89, 107, 132, 133, 135, 136, 137, 139, 140, 142, 143, 146, 147, 150, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 181, 182, 183, 187, 194, 195, 196, 202, 213, 220, 225, 229, 231, 232, 236, 242, 244, 245, 249, 257, 275, 278, 284, 288, 289, 290, 291, 294, 302, 309, 310, 318, 320, 321, 322, 324, 330, 335, 336, 356, 367, 394, 405, 406, 407, 447, 454, 466, 509, 515, 520, 529, 539, 597, 598, 610, 611, 639, 646, 652, 655, 661, 662, 664, 666, 668, 670, 673, 675, 677, 692, 693, 704, 706, 708, 710, 725, 745, 747, 748, 755, 774, 776, 779, 790, 791, 793, 794, 796, 804, 806, 810, 811, 813, 831, 833, 839, 847, 851, 876, 883, 885, 888, 891, 892, 915, 920, 927, 933, 934, 939, 941, 946, 947, 970, 975, 976, 1007, 1018, 1019, 1020, 1052, 1066, 1072, 1084, 1127, 1133, 1143, 1146, 1152, 1153, 1163, 1223, 1244, 1250, 1253, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1290, 1296, 1298, 1300, 1302, 1314, 1317, 1352, 1355, 1373, 1382, 1387, 1391, 1393, 1396, 1403, 1404], "list_catalog": 205, "list_namespac": 205, "list_of_seri": 813, "list_tabl": 205, "listitem": 143, "listtostructwidthstrategi": [589, 1215], "lit": [1, 368, 410, 534, 606, 622, 709, 778, 779, 785, 799, 823, 826, 841, 842, 851, 1137, 1373], "liter": [10, 16, 17, 21, 38, 40, 42, 43, 47, 49, 50, 51, 52, 56, 154, 156, 162, 164, 167, 168, 169, 170, 171, 172, 186, 187, 188, 197, 200, 204, 265, 275, 294, 295, 299, 325, 330, 331, 356, 368, 410, 429, 433, 436, 458, 480, 501, 502, 510, 517, 522, 524, 534, 549, 596, 606, 618, 620, 633, 634, 644, 653, 654, 697, 698, 699, 708, 709, 710, 720, 721, 722, 749, 750, 758, 767, 769, 771, 777, 778, 779, 780, 788, 789, 792, 805, 809, 811, 815, 817, 820, 829, 833, 835, 837, 841, 851, 887, 903, 920, 921, 924, 936, 939, 940, 970, 976, 1023, 1054, 1076, 1102, 1125, 1135, 1157, 1235, 1251, 1252, 1271, 1273, 1276, 1289, 1290, 1291, 1300, 1301, 1302, 1312, 1313, 1314, 1373, 1396], "littl": [290, 356, 414, 1027], "lmn": 976, "ln": [503, 504, 505, 506, 851, 1128, 1129, 1130, 1131, 1373, 1394], "ln_a": 1395, "load": [3, 5, 6, 136, 138, 149, 154, 156, 157, 163, 168, 169, 186, 188, 356, 851, 863, 970, 1404], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 157, "load_tabl": 157, "load_workbook": 157, "loader": [318, 356], "lobster": [709, 1301], "loc": [356, 360], "local": [4, 40, 154, 156, 168, 169, 172, 356, 495, 641, 642, 851, 1044, 1048, 1078, 1079, 1104, 1107, 1117, 1240, 1241, 1373, 1383], "localhost": 154, "localis": [482, 495, 1117], "locat": [41, 164, 167, 170, 172, 213, 233, 286, 316, 322, 356, 682, 851, 934, 970, 1134, 1143, 1271, 1272, 1373], "lock": 189, "log": [30, 60, 427, 500, 594, 620, 644, 757, 851, 1040, 1123, 1358, 1373, 1394], "log10": [851, 1373, 1394], "log10_a": 1395, "log16_a": 1395, "log1p": [851, 1373, 1394], "log1p_a": 1395, "log2": 1394, "logarithm": [592, 593, 594, 851, 1218, 1219, 1220, 1373, 1395], "logic": [66, 264, 342, 356, 359, 360, 369, 371, 449, 598, 755, 766, 767, 768, 769, 813, 841, 851, 879, 884, 896, 914, 922, 953, 970, 983, 984, 1223, 1353, 1355, 1373, 1378], "london": [459, 463, 481, 1077, 1081, 1103], "london_timezon": [481, 1103], "london_to_amsterdam": [481, 1103], "long": [232, 271, 280, 323, 324, 356, 414, 885, 907, 935, 970, 1027], "longer": [152, 153, 167], "longest": 589, "look": [11, 245, 356, 410, 589, 892, 970, 1023], "lookup": 847, "loop": [154, 598, 851], "lose": [456, 1074], "lossi": [152, 153, 167], "lossless": 56, "lot": 55, "love": [698, 722, 1290, 1314], "low": [18, 154, 436, 646, 851, 1244, 1373], "low_memori": [152, 153, 162, 164, 167, 171, 172], "lower": [56, 167, 223, 245, 282, 348, 356, 436, 534, 595, 623, 647, 651, 670, 671, 771, 790, 791, 793, 794, 809, 810, 824, 838, 839, 851, 878, 892, 913, 959, 970, 1054, 1067, 1157, 1221, 1245, 1248, 1263, 1361, 1373, 1391, 1394], "lower_bound": [245, 356, 436, 534, 851, 892, 970, 1054, 1157, 1361, 1373], "lowercas": [629, 740, 742, 1332, 1334, 1396], "lowest": [595, 851], "lru_cach": [264, 356, 598, 851, 1223, 1373], "lst": 182, "lt": [175, 513, 764, 851, 1373], "ltrim": 1394, "lyric": [698, 722, 1290, 1314], "lz4": [43, 44, 47, 50, 52, 356, 970], "lzo": [47, 52, 356, 970], "m": [73, 75, 259, 356, 455, 456, 458, 463, 464, 484, 486, 487, 498, 705, 734, 736, 737, 741, 792, 793, 794, 795, 801, 809, 896, 970, 976, 1073, 1074, 1076, 1081, 1082, 1106, 1108, 1109, 1120, 1297, 1326, 1328, 1329, 1333, 1386, 1396, 1397], "m_2": [690, 851, 1283, 1373], "m_3": [690, 851, 1283, 1373], "m_i": [690, 851, 1283, 1373], "machin": 1404, "maco": 175, "made": [41, 154, 356, 361, 487, 1109], "mai": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 66, 74, 80, 99, 132, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 207, 223, 224, 231, 233, 245, 259, 260, 261, 264, 265, 288, 296, 303, 313, 315, 318, 325, 326, 356, 359, 360, 361, 431, 446, 447, 449, 454, 455, 456, 466, 468, 477, 482, 484, 495, 507, 528, 564, 589, 597, 598, 609, 612, 646, 659, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 678, 708, 710, 713, 715, 721, 776, 778, 785, 786, 790, 791, 793, 794, 799, 809, 810, 825, 838, 839, 851, 866, 873, 874, 878, 879, 884, 892, 896, 897, 898, 902, 903, 912, 918, 922, 928, 936, 942, 943, 944, 953, 970, 1045, 1049, 1065, 1066, 1067, 1072, 1073, 1074, 1084, 1086, 1099, 1104, 1106, 1117, 1127, 1134, 1152, 1190, 1223, 1244, 1257, 1258, 1261, 1263, 1264, 1300, 1302, 1305, 1307, 1351, 1354, 1356, 1373, 1378, 1404], "main": [175, 874, 970], "maintain": [49, 50, 51, 52, 302, 356, 407, 590, 682, 693, 759, 774, 851, 878, 927, 970, 1020, 1216, 1272, 1359, 1373], "maintain_ord": [49, 50, 51, 52, 244, 259, 278, 280, 302, 321, 325, 326, 336, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 367, 407, 417, 422, 425, 427, 520, 523, 590, 598, 693, 757, 759, 774, 851, 874, 884, 891, 896, 912, 925, 927, 933, 936, 947, 949, 951, 954, 955, 956, 957, 958, 959, 960, 970, 1020, 1216, 1359, 1373], "maintainorderjoin": [259, 325, 356, 896, 936, 970], "major": [157, 313, 356], "make": [41, 66, 89, 133, 134, 138, 149, 152, 153, 156, 157, 158, 160, 164, 168, 272, 276, 283, 314, 326, 356, 359, 505, 506, 629, 630, 639, 652, 726, 851, 908, 970, 1130, 1131, 1250, 1318, 1353, 1373], "malform": 152, "man": [723, 1315], "manag": [57, 98, 100, 204, 862, 863, 1388, 1401], "managed_shallow_clon": 204, "mandatori": [41, 356], "mango": [429, 433, 702, 728, 1042, 1047, 1294, 1320], "mani": [154, 155, 172, 233, 259, 356, 708, 710, 722, 896, 970, 1134, 1300, 1314, 1373, 1377], "manner": 154, "map": [52, 53, 55, 89, 135, 136, 143, 152, 153, 154, 155, 158, 159, 164, 166, 167, 170, 183, 216, 219, 237, 257, 264, 265, 285, 289, 290, 291, 293, 309, 356, 368, 482, 495, 597, 598, 622, 624, 625, 627, 629, 630, 653, 654, 722, 762, 812, 851, 870, 903, 916, 919, 970, 975, 976, 1067, 1104, 1117, 1223, 1251, 1252, 1314, 1362, 1373, 1383, 1385, 1386, 1401], "map_": 119, "map_batch": [361, 851, 970], "map_el": [110, 264, 356, 597, 765, 851, 1373], "map_field": [626, 628], "map_row": 356, "mapelementsstrategi": [598, 851], "mapping_strategi": [639, 851], "march": [484, 1106], "mariadb": 155, "mark": [41, 148, 356, 428, 851, 1041, 1373], "mark_area": [1373, 1378], "mark_attr": [356, 359, 1373, 1378], "mark_bar": [356, 359, 1373, 1378], "mark_lin": [356, 359], "mark_point": [356, 359], "markdown": [7, 21, 207], "marker": [41, 356], "mask": [172, 183, 187, 252, 254, 356, 411, 536, 538, 541, 546, 641, 642, 697, 700, 709, 851, 1024, 1138, 1157, 1158, 1159, 1162, 1165, 1171, 1240, 1241, 1273, 1289, 1292, 1301, 1364, 1373], "mass": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "massag": [271, 323, 356, 907, 935, 970], "match": [40, 41, 56, 66, 73, 97, 121, 133, 135, 136, 137, 139, 147, 152, 154, 161, 162, 164, 167, 171, 172, 176, 177, 178, 179, 213, 216, 235, 236, 259, 260, 265, 284, 289, 325, 356, 429, 433, 605, 606, 607, 653, 654, 672, 697, 698, 699, 702, 705, 706, 708, 709, 710, 713, 714, 720, 721, 722, 728, 734, 736, 737, 841, 847, 851, 870, 887, 896, 897, 903, 915, 936, 970, 976, 1042, 1047, 1126, 1251, 1252, 1264, 1289, 1290, 1291, 1294, 1297, 1298, 1300, 1301, 1302, 1305, 1306, 1312, 1313, 1314, 1320, 1326, 1328, 1329, 1373, 1396], "match_to_schema": [356, 970], "matches_overlap": [708, 710, 1302], "matches_supertyp": [235, 356, 887, 970], "materi": [147, 152, 158, 162, 164, 264, 291, 342, 356, 361, 873, 912, 953, 963, 970, 976, 1223, 1373], "materialis": [257, 258, 289, 290, 356], "materialized_view": 204, "math": [1, 11, 62, 280, 356, 448, 535, 851, 1056, 1058, 1158, 1281, 1345, 1373, 1394, 1398, 1400], "mathemat": [758, 796, 851, 1394], "mathshortcut": [1, 62], "matplotlib": [175, 613, 912, 925, 970], "matter": [245, 257, 288, 290, 291, 310, 356, 659, 730, 731, 851, 892, 918, 970], "max": [10, 26, 41, 47, 52, 148, 223, 235, 244, 267, 280, 288, 356, 360, 442, 512, 535, 589, 597, 639, 649, 653, 654, 659, 662, 663, 683, 727, 778, 790, 793, 815, 831, 851, 878, 887, 891, 918, 970, 1061, 1067, 1137, 1158, 1215, 1246, 1259, 1274, 1319, 1373, 1382, 1391, 1394], "max_a": [288, 356, 659, 851, 918, 970], "max_binary_s": 154, "max_col": [181, 183], "max_colname_length": [243, 356], "max_color": [41, 356], "max_data_s": 187, "max_elem": 1391, "max_horizont": [356, 814], "max_items_per_column": [243, 356], "max_level": 148, "max_siz": [54, 182, 183, 185, 187, 1404], "max_text_s": 154, "max_valu": 1404, "max_width": [589, 1215], "maxim": [343, 380, 851, 954, 993, 1373], "maximum": [11, 27, 38, 47, 49, 52, 54, 74, 136, 139, 152, 153, 154, 157, 161, 162, 163, 167, 171, 173, 181, 182, 183, 185, 187, 243, 245, 266, 267, 356, 387, 432, 535, 554, 599, 631, 641, 649, 711, 713, 716, 724, 735, 814, 815, 851, 892, 904, 970, 1000, 1046, 1087, 1158, 1180, 1224, 1232, 1240, 1246, 1303, 1305, 1308, 1316, 1327, 1373, 1390], "mb": [231, 356, 415, 1127, 1373], "md": 143, "md2": 143, "me": [698, 722, 742, 1290, 1314, 1334], "mean": [47, 52, 64, 132, 152, 153, 158, 164, 167, 170, 207, 223, 235, 244, 245, 260, 269, 280, 288, 326, 335, 356, 477, 482, 495, 509, 512, 517, 659, 663, 664, 665, 667, 669, 671, 674, 676, 678, 690, 696, 705, 712, 790, 791, 793, 794, 795, 817, 838, 839, 841, 851, 878, 887, 891, 892, 897, 902, 918, 946, 970, 1067, 1099, 1104, 1117, 1133, 1137, 1260, 1283, 1288, 1297, 1304, 1373, 1390, 1391], "mean_horizont": [356, 816], "measur": [271, 323, 356, 360, 907, 935, 970], "measure_a": [356, 360], "measure_b": [356, 360], "median": [223, 280, 356, 512, 666, 667, 851, 878, 941, 970, 1067, 1261, 1373, 1394], "mediat": 1401, "medium": [41, 356], "megan": [272, 356, 908, 970], "melt": [323, 356, 935, 970], "member": [245, 356, 892, 970, 1163, 1373], "membership": [389, 557, 1002, 1183], "memori": [10, 15, 47, 52, 53, 54, 55, 64, 65, 66, 133, 134, 137, 138, 139, 152, 153, 154, 156, 157, 158, 162, 164, 167, 168, 170, 171, 172, 211, 233, 264, 290, 291, 300, 314, 342, 356, 639, 650, 685, 851, 873, 874, 884, 912, 925, 945, 970, 1134, 1223, 1247, 1277, 1278, 1353, 1373], "memory_map": [158, 164, 170], "memory_resourc": 945, "merg": [40, 259, 260, 272, 356, 896, 897, 908, 970], "merge_sort": [356, 970], "messi": [705, 707, 1297, 1299], "met": 841, "meta": [101, 449, 703, 851, 1295], "metadata": [0, 47, 49, 50, 51, 52, 143, 165, 169, 193, 197, 356, 863, 970], "metastor": 198, "method": [4, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 131, 134, 143, 144, 145, 146, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 173, 180, 183, 187, 192, 198, 199, 201, 202, 207, 209, 214, 219, 223, 224, 227, 228, 233, 240, 244, 251, 257, 264, 271, 276, 282, 289, 290, 291, 299, 321, 330, 332, 337, 342, 348, 356, 361, 366, 369, 370, 401, 436, 449, 461, 484, 487, 501, 502, 510, 517, 519, 522, 524, 532, 535, 549, 582, 596, 598, 616, 618, 620, 622, 623, 625, 627, 629, 630, 633, 634, 635, 638, 644, 647, 649, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 684, 698, 704, 708, 710, 722, 730, 731, 732, 733, 738, 744, 750, 758, 760, 764, 765, 781, 813, 824, 843, 844, 846, 847, 851, 852, 853, 856, 857, 858, 859, 860, 863, 866, 874, 878, 879, 881, 882, 895, 907, 913, 924, 933, 939, 942, 944, 945, 948, 953, 959, 970, 975, 978, 985, 1014, 1054, 1067, 1088, 1089, 1106, 1109, 1124, 1125, 1134, 1135, 1145, 1147, 1149, 1155, 1158, 1175, 1208, 1222, 1223, 1234, 1235, 1245, 1246, 1263, 1276, 1290, 1296, 1300, 1302, 1314, 1330, 1336, 1355, 1365, 1367, 1369, 1373, 1374, 1377, 1379, 1380, 1381, 1383, 1387], "metric": [53, 54, 55, 154], "micro": [483, 1105], "microsecond": [73, 75, 245, 257, 260, 288, 290, 291, 310, 326, 356, 477, 480, 482, 487, 490, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 792, 793, 794, 795, 837, 838, 839, 851, 892, 897, 912, 918, 970, 976, 1099, 1102, 1104, 1112, 1117, 1129, 1373, 1397], "microsoft": [34, 41, 356], "mid_color": [41, 356], "midnight": 90, "midpoint": [223, 282, 348, 356, 647, 670, 671, 824, 851, 878, 913, 959, 970, 1067, 1245, 1263, 1373], "might": [53, 54, 55, 152, 153, 167, 189, 259, 280, 314, 323, 356, 598, 760, 851, 896, 927, 935, 970], "millennia": 1397, "millennium": 1397, "milli": [483, 1105], "millisecond": [245, 260, 288, 326, 356, 465, 472, 477, 482, 491, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 793, 794, 795, 809, 838, 839, 851, 892, 897, 918, 970, 976, 1099, 1104, 1113, 1117, 1129, 1373, 1397], "milliseconds_diff": [490, 491, 493], "mimic": 779, "min": [41, 47, 52, 149, 223, 235, 274, 280, 288, 356, 443, 512, 639, 649, 659, 668, 669, 790, 793, 820, 829, 851, 878, 887, 918, 970, 1062, 1067, 1137, 1246, 1262, 1373, 1391, 1394, 1397, 1404], "min_a": [288, 356, 659, 851, 918, 970], "min_col": [181, 183], "min_color": [41, 356], "min_elem": 1391, "min_horizont": [356, 819, 829], "min_period": [446, 503, 505, 506, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 827, 828, 851, 1065, 1128, 1130, 1131, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1373], "min_sampl": [446, 503, 505, 506, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 827, 828, 851, 1065, 1128, 1130, 1131, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1373], "min_siz": [182, 183, 185, 187, 1404], "min_valu": 1404, "mincol": 181, "minim": [346, 381, 388, 555, 685, 693, 851, 957, 994, 1001, 1181, 1227, 1277, 1373], "minimum": [47, 52, 181, 182, 183, 185, 187, 238, 273, 274, 356, 503, 505, 506, 617, 632, 642, 649, 819, 820, 851, 909, 970, 1093, 1128, 1130, 1131, 1233, 1241, 1246, 1373, 1390, 1404], "minu": [477, 635, 851, 1099], "minut": [245, 260, 288, 326, 356, 465, 469, 471, 476, 477, 480, 482, 483, 492, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 792, 793, 794, 795, 837, 838, 839, 851, 892, 897, 918, 970, 976, 1099, 1102, 1104, 1114, 1117, 1129, 1373, 1397], "minutes_diff": 492, "mirror": [535, 851, 1158, 1373], "misc": 1388, "miscellan": 863, "mismatch": [66, 124, 162, 171, 176, 178], "miss": [56, 66, 152, 153, 164, 167, 172, 240, 265, 356, 409, 503, 505, 506, 518, 542, 543, 589, 851, 903, 970, 1022, 1128, 1130, 1131, 1142, 1373], "missing_column": [164, 172, 265, 356, 903, 970], "missing_struct_field": [56, 265, 356, 903, 970], "missing_utf8_is_empty_str": [152, 153, 167], "mix": [12, 260, 314, 356, 778, 830, 897, 928, 970, 976, 1067, 1373], "mixin": 1, "mkdir": [49, 50, 51, 52, 53, 55, 970], "mlnm": 470, "mm": [41, 356], "mn": 1396, "mno": [17, 21], "mnop": 1396, "mo": 795, "mocha": 976, "mod": [851, 1394], "mode": [39, 40, 41, 42, 49, 50, 51, 52, 176, 178, 280, 303, 356, 679, 706, 823, 826, 842, 851, 873, 884, 912, 925, 970, 1268, 1298, 1373, 1382, 1383, 1401], "model": [318, 356], "modifi": [53, 54, 55, 152, 153, 167, 189, 207, 213, 233, 249, 256, 257, 328, 356, 383, 481, 498, 697, 705, 706, 709, 720, 721, 740, 742, 743, 851, 985, 1103, 1120, 1134, 1289, 1297, 1298, 1301, 1312, 1313, 1332, 1334, 1335, 1373], "modul": [103, 111, 157, 850, 974, 976, 1404], "modulu": [618, 851], "moment": [47, 49, 50, 51, 52, 64, 65, 221, 356, 547, 690, 851, 873, 874, 884, 912, 925, 970, 1173, 1283, 1373], "mon": [356, 359, 1397], "mondai": [245, 356, 454, 466, 495, 497, 776, 892, 970, 1072, 1084, 1117, 1119], "monkei": [718, 719, 1310, 1311], "month": [245, 260, 288, 326, 356, 462, 474, 475, 477, 480, 482, 484, 487, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 789, 790, 791, 792, 793, 794, 795, 838, 839, 851, 892, 897, 918, 970, 1080, 1096, 1097, 1099, 1102, 1104, 1106, 1109, 1117, 1129, 1373, 1397], "month_nam": [484, 487], "monthbegin": [475, 1097], "monthend": [474, 1096], "moos": 976, "more": [21, 41, 47, 52, 58, 66, 98, 100, 129, 133, 134, 135, 136, 137, 138, 139, 147, 149, 154, 155, 156, 157, 161, 162, 163, 164, 168, 169, 171, 176, 178, 183, 207, 209, 221, 223, 227, 228, 236, 256, 257, 264, 271, 276, 284, 289, 290, 292, 303, 313, 314, 318, 321, 323, 342, 356, 360, 370, 407, 431, 513, 517, 525, 547, 577, 590, 594, 598, 638, 639, 681, 690, 706, 715, 734, 736, 737, 759, 770, 782, 798, 804, 807, 816, 818, 821, 822, 831, 841, 847, 851, 878, 881, 882, 888, 907, 914, 915, 928, 933, 935, 945, 970, 974, 976, 978, 1020, 1045, 1067, 1148, 1149, 1173, 1203, 1216, 1223, 1270, 1283, 1298, 1307, 1326, 1328, 1329, 1351, 1353, 1359, 1373, 1388, 1389, 1399, 1402, 1403, 1404], "more_bi": [278, 302, 356, 693, 851, 927, 970], "more_column": [232, 322, 356, 507, 797, 851, 885, 934, 970, 976], "more_expr": [639, 774, 777, 778, 779, 780, 851], "more_nam": [745, 847], "most": [41, 133, 152, 153, 155, 167, 176, 177, 178, 179, 314, 356, 420, 421, 610, 619, 640, 654, 727, 851, 1033, 1034, 1228, 1239, 1252, 1319, 1353, 1373, 1385, 1401], "mostli": [308, 356, 513, 851], "move": [280, 291, 356, 454, 503, 504, 505, 506, 662, 664, 668, 675, 841, 851, 1072, 1128, 1129, 1130, 1131, 1259, 1260, 1262, 1266, 1373], "mr": 945, "mssql": [39, 356], "much": [264, 324, 342, 356, 431, 432, 564, 598, 715, 716, 813, 851, 953, 1045, 1046, 1065, 1190, 1223, 1307, 1308, 1373], "mul": 851, "multi": [8, 41, 152, 153, 318, 356, 507, 705, 851, 1297], "multi_fram": [41, 356], "multicolselector": 212, "multiindexselector": [212, 980], "multipl": [41, 55, 64, 65, 66, 116, 132, 152, 153, 157, 158, 162, 163, 164, 167, 170, 171, 172, 181, 183, 187, 213, 225, 231, 233, 236, 244, 245, 249, 258, 261, 278, 280, 284, 291, 294, 302, 325, 330, 335, 356, 427, 564, 597, 603, 610, 619, 620, 639, 653, 655, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 693, 745, 757, 774, 782, 799, 812, 814, 819, 825, 831, 834, 841, 847, 851, 863, 873, 874, 880, 884, 888, 891, 892, 898, 912, 915, 920, 925, 927, 936, 939, 946, 953, 970, 985, 1015, 1127, 1134, 1190, 1210, 1228, 1251, 1253, 1285, 1373, 1386, 1391], "multipli": [597, 661, 662, 664, 666, 668, 670, 673, 675, 677, 749, 851, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1373], "multithread": [302, 356, 693, 774, 851, 927, 970, 1015, 1210, 1285, 1373], "must": [34, 41, 76, 97, 135, 147, 149, 152, 156, 164, 167, 168, 169, 172, 173, 213, 223, 232, 245, 260, 261, 272, 280, 288, 289, 356, 447, 535, 589, 613, 646, 653, 654, 659, 722, 778, 790, 791, 799, 810, 841, 851, 878, 885, 892, 897, 898, 902, 908, 918, 925, 945, 970, 1066, 1067, 1158, 1244, 1251, 1252, 1314, 1373], "mutual": [289, 356], "my": [169, 173, 356, 359, 1373, 1378], "my_bucket": [914, 970], "my_column": 953, "my_column_": [320, 356], "my_column_0": [320, 356], "my_column_1": [320, 356], "my_column_2": [320, 356], "my_custom_aggreg": 813, "my_fil": 158, "my_holidai": [454, 466, 776, 1072, 1084], "my_larger_than_ram_fil": [49, 50, 51, 52, 970], "my_long_fil": 167, "my_struct": 833, "mydf": 167, "myrol": 155, "mysql": 155, "n": [1, 13, 14, 18, 26, 27, 38, 46, 49, 59, 60, 61, 62, 73, 75, 142, 147, 152, 153, 157, 162, 167, 183, 217, 233, 239, 245, 247, 257, 258, 263, 264, 290, 291, 292, 299, 304, 307, 310, 312, 327, 339, 341, 350, 356, 373, 401, 406, 415, 417, 422, 425, 426, 427, 431, 432, 446, 450, 454, 456, 458, 464, 486, 498, 504, 510, 513, 521, 527, 551, 559, 565, 567, 577, 578, 582, 585, 587, 589, 591, 640, 643, 652, 673, 674, 677, 678, 681, 684, 690, 695, 711, 715, 716, 720, 721, 726, 727, 729, 730, 735, 737, 752, 756, 757, 758, 763, 765, 783, 792, 793, 794, 795, 801, 803, 823, 826, 827, 828, 829, 832, 836, 840, 842, 851, 871, 890, 892, 893, 901, 924, 929, 931, 937, 950, 952, 961, 970, 976, 1014, 1019, 1028, 1039, 1040, 1045, 1046, 1053, 1065, 1068, 1072, 1074, 1076, 1082, 1108, 1120, 1129, 1134, 1135, 1144, 1151, 1177, 1185, 1191, 1193, 1203, 1204, 1208, 1213, 1215, 1239, 1265, 1267, 1270, 1276, 1283, 1287, 1303, 1307, 1308, 1312, 1313, 1318, 1319, 1327, 1329, 1344, 1350, 1357, 1358, 1362, 1363, 1373, 1385, 1386, 1393, 1396, 1397, 1399, 1401, 1404], "n0": [406, 589], "n00": [1019, 1215], "n01": [1019, 1215], "n02": [1019, 1215], "n1": [406, 589], "n2": [1, 406], "n3": 1, "n_1": [513, 851], "n_2": [513, 851], "n_3": [513, 851], "n_bar": 1390, "n_bit": 1396, "n_byte": [415, 431, 432, 715, 716, 1396], "n_char": [431, 432, 715, 716, 1396], "n_chunk": [356, 985, 1134, 1247, 1373], "n_column": 213, "n_elem": 1391, "n_even": 976, "n_field_strategi": [589, 1215], "n_film": 1382, "n_foo_uniqu": 1390, "n_kilobyt": 415, "n_row": [147, 150, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 213, 258, 356, 970], "n_thread": [152, 153], "n_uniqu": [356, 373, 851, 1373], "na": [315, 356, 728, 1354, 1373], "naiv": [458, 459, 737, 1076, 1077, 1329], "name": [1, 19, 23, 25, 33, 36, 38, 39, 41, 42, 49, 59, 60, 61, 62, 77, 89, 108, 133, 135, 136, 137, 138, 139, 143, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 178, 179, 180, 181, 183, 186, 187, 188, 193, 195, 196, 197, 198, 199, 201, 202, 213, 215, 216, 219, 220, 225, 226, 227, 228, 232, 236, 237, 240, 241, 243, 244, 255, 256, 257, 259, 260, 261, 264, 267, 269, 271, 272, 274, 278, 280, 284, 285, 289, 290, 291, 293, 294, 295, 302, 303, 306, 309, 311, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 330, 331, 332, 333, 334, 335, 341, 356, 360, 368, 406, 410, 411, 413, 416, 427, 436, 447, 484, 487, 507, 513, 534, 542, 543, 544, 545, 589, 598, 603, 607, 609, 611, 615, 639, 646, 656, 679, 693, 706, 707, 720, 721, 722, 745, 747, 749, 757, 762, 766, 767, 768, 769, 770, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 797, 798, 803, 804, 807, 814, 815, 816, 817, 818, 819, 820, 821, 824, 827, 828, 829, 830, 832, 833, 834, 835, 836, 840, 841, 847, 851, 868, 870, 875, 876, 880, 881, 882, 885, 888, 891, 896, 897, 898, 907, 908, 915, 916, 919, 920, 921, 927, 928, 932, 933, 934, 935, 936, 939, 940, 941, 942, 943, 946, 952, 970, 975, 976, 982, 1019, 1040, 1053, 1066, 1106, 1109, 1126, 1215, 1244, 1249, 1297, 1298, 1299, 1312, 1313, 1337, 1340, 1348, 1349, 1354, 1358, 1362, 1373, 1378, 1383, 1384, 1385, 1386, 1387, 1388, 1400, 1401, 1404], "name_gener": [320, 356], "named_agg": [335, 946], "named_bi": [244, 356, 891, 970], "named_expr": [294, 295, 330, 331, 356, 749, 829, 833, 920, 921, 939, 940, 970], "named_fram": [1386, 1401], "nameless": 138, "namespac": [1, 154, 193, 195, 196, 197, 201, 355, 356, 359, 745, 830, 850, 863, 968, 969, 974, 1373, 1378, 1404], "namespaceinfo": [195, 205], "nan": [138, 183, 211, 227, 228, 234, 235, 314, 315, 356, 452, 453, 501, 502, 511, 512, 522, 524, 532, 535, 542, 543, 544, 545, 549, 596, 599, 617, 631, 632, 633, 634, 661, 687, 758, 781, 851, 881, 882, 886, 887, 970, 988, 992, 1070, 1071, 1136, 1137, 1158, 1166, 1167, 1232, 1233, 1258, 1280, 1353, 1354, 1373, 1404], "nan_as_nul": 211, "nan_max": [851, 1373], "nan_min": [851, 1373], "nan_to_nul": [138, 356, 970, 1373], "nana": 1396, "nanmax": [631, 632, 851, 1232, 1233, 1373], "nanosecond": [56, 90, 245, 260, 288, 326, 356, 477, 482, 483, 493, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 793, 794, 795, 838, 839, 851, 892, 897, 918, 970, 1099, 1104, 1105, 1115, 1117, 1129, 1373, 1397], "nans_equ": [535, 851, 1158, 1373], "nansum": [661, 851, 1258, 1373], "nativ": [11, 39, 152, 154, 157, 158, 160, 164, 169, 203, 257, 264, 290, 291, 310, 314, 342, 356, 598, 813, 830, 851, 857, 928, 953, 970, 974, 1223, 1353, 1373, 1377, 1401, 1404], "natur": [594, 851, 1220, 1373, 1389, 1395], "ndarrai": [137, 209, 236, 284, 314, 356, 520, 682, 851, 888, 915, 970, 978, 1143, 1271, 1272, 1353, 1373], "ndjson": [51, 162, 970], "ne": [634, 851, 1235, 1373], "ne_miss": [236, 284, 356, 851, 888, 915, 970, 1125, 1373], "nearest": [60, 223, 260, 282, 348, 356, 435, 516, 532, 647, 670, 671, 679, 824, 851, 878, 897, 913, 959, 970, 1051, 1067, 1141, 1155, 1245, 1263, 1373, 1395], "nearest_pow2": 60, "necessari": [38, 39, 49, 57, 100, 157, 169, 314, 356, 970, 1353, 1373], "need": [53, 54, 55, 66, 102, 111, 140, 152, 153, 155, 164, 167, 170, 172, 207, 245, 288, 291, 300, 356, 359, 589, 659, 685, 720, 721, 722, 738, 795, 823, 826, 842, 851, 892, 918, 970, 1277, 1312, 1313, 1314, 1330, 1373, 1378, 1404], "neg": [14, 72, 73, 74, 75, 152, 153, 158, 160, 164, 174, 247, 263, 288, 299, 301, 307, 333, 356, 401, 535, 582, 583, 643, 644, 659, 684, 691, 711, 724, 735, 851, 866, 918, 924, 926, 942, 943, 970, 976, 1014, 1151, 1158, 1177, 1208, 1209, 1242, 1276, 1284, 1303, 1316, 1327, 1344, 1373], "negat": [636, 851, 1237, 1373], "neither": [140, 157, 163, 292, 356, 406, 589, 1019, 1215], "nest": [57, 140, 148, 184, 185, 231, 356, 863, 1127, 1373, 1401, 1404], "nesting_level": 184, "net": [706, 1298], "netherland": [260, 356, 897, 970], "netsuite_format": 200, "never": [38, 49, 154, 259, 260, 289, 356, 896, 897, 970], "new": [39, 40, 41, 42, 54, 55, 167, 207, 212, 213, 239, 249, 250, 264, 276, 277, 280, 285, 320, 322, 324, 325, 330, 331, 356, 368, 458, 509, 519, 521, 532, 623, 624, 639, 653, 654, 658, 717, 720, 721, 726, 727, 745, 747, 847, 851, 863, 866, 890, 916, 934, 936, 939, 940, 953, 970, 980, 982, 1076, 1133, 1144, 1236, 1249, 1251, 1252, 1256, 1312, 1313, 1318, 1319, 1337, 1340, 1349, 1373, 1401, 1403], "new_column": [152, 153, 157, 167], "new_dai": 480, "new_dat": 477, "new_df": [325, 356, 936, 970], "new_fil": [36, 38, 43, 44, 47, 356], "new_from_index": 1373, "new_id": [320, 356], "new_lf": [936, 970], "new_tabl": 1403, "new_valu": [785, 786, 799, 825], "new_york": 793, "newli": 58, "newlin": [46, 152, 162, 167, 171, 356], "next": [19, 60, 245, 260, 288, 326, 356, 409, 454, 477, 482, 495, 649, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1022, 1072, 1099, 1104, 1117, 1246, 1373], "next_batch": 153, "next_pow2": 60, "nfc": [717, 1309, 1396], "nfd": [717, 1309, 1396], "nfkc": [717, 1309, 1396], "nfkd": [717, 1309, 1396], "nfruit": 735, "nl": [454, 466, 776, 1072, 1084], "nnel_id": 140, "no1": 976, "no_default": [240, 356, 653, 654, 722, 851, 1251, 1252, 1314, 1373], "no_optim": [64, 873, 902, 912, 970], "nodataerror": [152, 153, 157, 163, 167], "nodd": [705, 1297], "node": [869, 873, 894, 902, 907, 912, 916, 970], "nodefault": [240, 356, 653, 654, 722, 851, 1251, 1252, 1314, 1373], "non": [4, 5, 38, 40, 41, 49, 58, 73, 74, 138, 149, 174, 215, 222, 258, 271, 288, 294, 295, 299, 319, 320, 323, 325, 330, 331, 356, 369, 371, 409, 426, 427, 431, 436, 440, 441, 454, 481, 518, 534, 535, 552, 553, 586, 589, 597, 598, 604, 639, 640, 645, 649, 653, 654, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 699, 706, 715, 720, 721, 722, 742, 744, 749, 751, 756, 757, 762, 766, 767, 768, 769, 777, 778, 779, 780, 782, 784, 788, 795, 815, 817, 820, 827, 828, 829, 833, 834, 835, 851, 868, 877, 907, 918, 920, 921, 924, 932, 935, 936, 939, 940, 970, 976, 983, 984, 998, 999, 1017, 1022, 1039, 1040, 1045, 1054, 1059, 1060, 1067, 1072, 1103, 1142, 1157, 1158, 1178, 1179, 1212, 1215, 1223, 1239, 1243, 1251, 1252, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1276, 1291, 1298, 1307, 1312, 1313, 1334, 1336, 1343, 1353, 1357, 1358, 1362, 1373, 1393, 1401], "non_exist": [481, 1103], "non_numer": [38, 49, 356, 970], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 67, 70, 73, 74, 75, 76, 77, 85, 89, 100, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 197, 198, 199, 201, 202, 203, 207, 209, 210, 213, 217, 222, 223, 227, 228, 234, 235, 236, 238, 240, 243, 245, 246, 251, 255, 259, 260, 262, 264, 268, 271, 276, 277, 280, 284, 288, 289, 292, 296, 299, 301, 302, 308, 309, 311, 313, 314, 315, 318, 320, 321, 322, 323, 324, 325, 326, 337, 341, 356, 369, 371, 372, 384, 385, 386, 393, 394, 406, 409, 429, 431, 432, 433, 436, 440, 441, 442, 445, 447, 452, 453, 461, 477, 480, 481, 487, 502, 503, 504, 505, 506, 507, 510, 511, 512, 518, 525, 526, 528, 530, 532, 533, 534, 542, 543, 544, 545, 550, 552, 553, 560, 566, 568, 570, 577, 578, 579, 580, 581, 583, 589, 597, 598, 609, 610, 612, 613, 614, 616, 621, 634, 635, 636, 637, 639, 640, 645, 646, 649, 650, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 684, 685, 686, 687, 691, 692, 696, 697, 699, 701, 702, 703, 706, 709, 711, 712, 713, 714, 715, 716, 718, 719, 724, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 739, 741, 744, 745, 746, 747, 748, 751, 755, 762, 767, 768, 769, 771, 777, 778, 779, 780, 781, 782, 784, 788, 790, 791, 792, 793, 794, 795, 797, 798, 799, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 820, 826, 827, 828, 833, 834, 835, 837, 838, 839, 841, 851, 871, 872, 874, 877, 878, 881, 882, 884, 886, 887, 888, 892, 895, 896, 897, 900, 902, 907, 910, 914, 915, 918, 922, 924, 925, 926, 927, 933, 934, 935, 936, 941, 944, 945, 948, 952, 953, 962, 963, 970, 975, 976, 978, 979, 983, 984, 986, 993, 994, 998, 999, 1006, 1007, 1019, 1022, 1030, 1035, 1038, 1042, 1045, 1046, 1047, 1053, 1054, 1059, 1060, 1066, 1067, 1069, 1070, 1071, 1079, 1087, 1088, 1089, 1093, 1102, 1103, 1109, 1123, 1125, 1128, 1129, 1130, 1131, 1135, 1136, 1137, 1139, 1142, 1148, 1150, 1152, 1154, 1155, 1156, 1157, 1163, 1168, 1169, 1172, 1173, 1174, 1176, 1178, 1179, 1182, 1186, 1192, 1194, 1196, 1203, 1204, 1205, 1206, 1207, 1209, 1215, 1223, 1224, 1225, 1226, 1227, 1235, 1238, 1243, 1244, 1245, 1246, 1251, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1270, 1271, 1272, 1273, 1276, 1279, 1280, 1283, 1284, 1287, 1288, 1289, 1291, 1293, 1294, 1295, 1298, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1311, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1326, 1327, 1328, 1329, 1331, 1333, 1336, 1339, 1343, 1347, 1348, 1349, 1350, 1351, 1353, 1354, 1355, 1362, 1363, 1373, 1382, 1384, 1385, 1386, 1388, 1391, 1393, 1396, 1397, 1401], "nonexist": [481, 1103], "nor": [157, 163, 292, 356], "normal": [40, 148, 245, 356, 500, 547, 660, 690, 762, 851, 892, 970, 1123, 1173, 1257, 1283, 1362, 1373, 1394], "normalised_scor": 154, "norowsreturnederror": [289, 356], "north": 76, "not_": [330, 356, 841, 851, 939, 970, 976, 1373], "not_c": [330, 356, 939, 970], "notabl": 154, "notat": [12, 38, 41, 356], "note": [4, 11, 21, 40, 41, 47, 53, 54, 55, 57, 58, 65, 66, 72, 73, 75, 90, 98, 100, 133, 134, 135, 137, 139, 140, 148, 152, 154, 155, 156, 157, 161, 162, 163, 167, 168, 169, 171, 173, 176, 178, 181, 183, 187, 189, 207, 211, 219, 221, 223, 224, 227, 228, 231, 234, 235, 236, 245, 246, 255, 256, 257, 259, 260, 264, 272, 276, 279, 280, 284, 285, 288, 289, 290, 291, 296, 299, 303, 310, 313, 315, 318, 320, 321, 323, 325, 326, 330, 332, 333, 356, 401, 414, 429, 431, 432, 433, 436, 444, 445, 449, 452, 453, 459, 474, 475, 477, 482, 487, 495, 504, 511, 512, 517, 519, 526, 534, 535, 542, 543, 552, 553, 561, 564, 582, 586, 589, 598, 612, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 645, 653, 654, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 684, 686, 690, 696, 697, 698, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 720, 721, 722, 724, 729, 730, 731, 734, 735, 742, 744, 745, 751, 758, 767, 769, 776, 785, 790, 791, 793, 794, 795, 799, 809, 811, 823, 825, 826, 830, 834, 838, 839, 841, 842, 847, 851, 862, 866, 874, 878, 879, 881, 882, 886, 887, 888, 892, 897, 908, 915, 916, 918, 922, 924, 925, 927, 928, 933, 935, 936, 939, 942, 943, 970, 974, 976, 998, 999, 1014, 1017, 1027, 1045, 1046, 1054, 1063, 1064, 1067, 1070, 1071, 1077, 1096, 1097, 1099, 1104, 1109, 1117, 1127, 1129, 1136, 1137, 1150, 1157, 1158, 1178, 1179, 1187, 1190, 1208, 1212, 1223, 1243, 1251, 1252, 1256, 1264, 1271, 1273, 1276, 1278, 1283, 1288, 1289, 1290, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1308, 1312, 1313, 1314, 1316, 1321, 1322, 1323, 1326, 1327, 1334, 1336, 1343, 1354, 1356, 1373, 1382, 1383, 1387, 1388, 1396, 1399, 1401], "noth": [21, 705, 714, 1297, 1306], "notic": [154, 236, 356, 888, 970, 1373], "notimplementederror": [10, 211], "now": [58, 152, 157, 288, 314, 356, 454, 606, 738, 776, 918, 970, 1072, 1330, 1353, 1373], "np": [97, 137, 209, 213, 236, 284, 314, 356, 520, 597, 682, 851, 888, 915, 970, 978, 1143, 1161, 1164, 1166, 1167, 1271, 1272, 1373], "npt": [209, 978], "nr": [339, 350, 950, 961], "nth": [239, 356, 521, 727, 847, 851, 890, 970, 1144, 1319, 1373], "nthe": [705, 1297], "nthose": [705, 1297], "nu": 702, "null": [17, 38, 40, 47, 49, 52, 58, 66, 73, 135, 136, 139, 148, 152, 153, 162, 164, 167, 171, 172, 173, 180, 183, 187, 211, 215, 216, 217, 222, 223, 227, 228, 230, 234, 235, 236, 238, 251, 259, 265, 268, 269, 270, 277, 280, 282, 284, 299, 302, 304, 305, 306, 309, 311, 314, 315, 319, 322, 325, 327, 330, 337, 356, 369, 371, 372, 382, 385, 386, 389, 393, 394, 401, 402, 409, 411, 414, 426, 427, 428, 429, 431, 432, 433, 436, 440, 441, 442, 445, 450, 452, 453, 477, 480, 481, 488, 489, 490, 491, 492, 493, 494, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 518, 525, 530, 532, 533, 539, 542, 543, 544, 545, 550, 552, 553, 557, 559, 560, 563, 564, 566, 568, 569, 570, 578, 579, 580, 581, 582, 584, 586, 589, 597, 598, 621, 634, 635, 636, 637, 639, 640, 645, 649, 650, 654, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 684, 685, 687, 692, 693, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 716, 718, 719, 724, 726, 727, 728, 734, 735, 737, 739, 744, 745, 746, 747, 748, 751, 755, 756, 757, 766, 767, 768, 769, 774, 777, 778, 779, 780, 782, 784, 788, 792, 797, 808, 811, 815, 817, 820, 827, 828, 833, 834, 835, 841, 851, 868, 871, 877, 878, 881, 882, 886, 887, 888, 895, 896, 903, 910, 915, 924, 927, 932, 934, 936, 939, 941, 948, 970, 976, 983, 984, 995, 998, 999, 1002, 1006, 1007, 1014, 1015, 1017, 1022, 1024, 1027, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1053, 1054, 1059, 1060, 1068, 1070, 1071, 1102, 1103, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1125, 1126, 1128, 1129, 1130, 1131, 1135, 1136, 1137, 1138, 1142, 1148, 1149, 1154, 1155, 1156, 1163, 1168, 1169, 1170, 1176, 1178, 1179, 1182, 1183, 1185, 1186, 1189, 1190, 1192, 1194, 1195, 1196, 1205, 1207, 1208, 1210, 1212, 1215, 1223, 1235, 1238, 1239, 1243, 1252, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1276, 1280, 1285, 1288, 1289, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1311, 1316, 1318, 1319, 1320, 1326, 1327, 1329, 1331, 1336, 1339, 1343, 1348, 1350, 1353, 1354, 1355, 1357, 1358, 1373, 1385, 1389, 1391, 1393, 1396, 1397, 1399, 1401, 1402, 1404], "null_behavior": [450, 559, 851, 1068, 1185, 1373], "null_count": [47, 52, 223, 228, 356, 446, 851, 878, 970, 1065, 1067, 1373], "null_equ": [230, 356, 1126, 1373], "null_on_oob": [393, 564, 566, 1006, 1190, 1192], "null_prob": [180, 183, 187], "null_valu": [38, 49, 152, 153, 167, 356, 970], "nullabl": [40, 356], "nullbehavior": [450, 559, 851, 1068, 1185, 1373], "nullif": 1394, "nulls_equ": [259, 356, 389, 539, 557, 851, 896, 970, 1002, 1163, 1183, 1373], "nulls_last": [302, 356, 382, 402, 584, 639, 692, 693, 774, 851, 927, 970, 995, 1015, 1170, 1210, 1285, 1373], "num": [14, 41, 317, 356, 534, 851, 1157, 1373], "num_row": 211, "num_sampl": [809, 810], "number": [11, 12, 13, 14, 15, 18, 26, 38, 39, 41, 43, 47, 49, 50, 51, 52, 57, 58, 72, 73, 74, 90, 100, 121, 133, 135, 136, 137, 139, 142, 148, 152, 153, 154, 155, 157, 161, 162, 163, 164, 167, 170, 171, 172, 174, 181, 183, 186, 188, 189, 190, 197, 213, 215, 217, 222, 231, 232, 235, 243, 247, 248, 257, 258, 263, 275, 276, 288, 292, 299, 304, 307, 319, 324, 327, 329, 337, 339, 341, 350, 356, 383, 399, 401, 406, 409, 418, 419, 420, 421, 423, 424, 426, 427, 432, 440, 446, 447, 450, 454, 457, 465, 468, 470, 472, 473, 483, 496, 497, 499, 503, 504, 505, 506, 510, 512, 518, 527, 542, 543, 550, 551, 559, 567, 570, 575, 577, 582, 585, 587, 589, 591, 639, 643, 646, 649, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 686, 695, 711, 713, 715, 716, 720, 724, 726, 727, 735, 738, 752, 756, 757, 763, 776, 781, 782, 783, 795, 803, 808, 809, 810, 827, 828, 832, 836, 840, 851, 868, 871, 877, 885, 887, 893, 901, 912, 924, 929, 931, 932, 937, 938, 948, 950, 952, 961, 970, 975, 1012, 1014, 1019, 1022, 1031, 1032, 1033, 1034, 1036, 1037, 1039, 1040, 1046, 1053, 1059, 1065, 1066, 1068, 1072, 1075, 1083, 1086, 1091, 1094, 1095, 1105, 1118, 1119, 1121, 1127, 1128, 1129, 1130, 1131, 1135, 1137, 1142, 1151, 1176, 1177, 1185, 1193, 1196, 1201, 1203, 1208, 1213, 1215, 1229, 1230, 1244, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1276, 1279, 1287, 1303, 1305, 1307, 1308, 1312, 1316, 1318, 1319, 1327, 1330, 1344, 1357, 1358, 1363, 1373, 1389, 1392, 1395, 1404], "number_of_two": [390, 558], "numbers_decim": 738, "numer": [11, 17, 38, 41, 49, 156, 168, 216, 225, 260, 314, 315, 323, 324, 356, 366, 414, 428, 436, 517, 534, 594, 618, 620, 644, 652, 685, 687, 707, 744, 750, 758, 809, 851, 863, 870, 880, 897, 935, 970, 976, 1027, 1041, 1054, 1067, 1157, 1250, 1277, 1280, 1299, 1336, 1353, 1373, 1395, 1404], "numeric_dtyp": 1404, "numericliter": [436, 809, 810, 851, 1054, 1373], "numpi": [97, 106, 137, 175, 209, 213, 221, 257, 290, 291, 310, 314, 315, 356, 535, 597, 631, 632, 661, 851, 970, 978, 1158, 1161, 1164, 1166, 1167, 1232, 1233, 1258, 1353, 1354, 1373], "nworld": 729, "o": [158, 170, 415, 426, 427, 446, 704, 756, 757, 851, 1028, 1039, 1040, 1065, 1296, 1321, 1357, 1358, 1373, 1386], "oauth": 169, "obj": 976, "object": [10, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 66, 89, 109, 133, 134, 135, 140, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 181, 183, 184, 210, 211, 213, 219, 224, 231, 244, 245, 260, 262, 278, 288, 291, 296, 303, 313, 314, 315, 356, 449, 612, 790, 791, 793, 794, 811, 830, 838, 839, 851, 863, 873, 879, 884, 892, 897, 900, 912, 918, 925, 928, 967, 970, 976, 979, 1127, 1347, 1373, 1383, 1385, 1388, 1401, 1403], "observ": [259, 356, 447, 503, 504, 505, 506, 646, 851, 896, 970, 1066, 1128, 1129, 1130, 1131, 1244, 1373], "obtain": 589, "obvious": 747, "occur": [41, 64, 107, 116, 122, 261, 356, 390, 558, 619, 649, 851, 873, 884, 898, 912, 925, 970, 1003, 1184, 1228, 1246, 1353, 1373], "occurr": [528, 530, 538, 541, 762, 851, 1152, 1154, 1162, 1165, 1362, 1373], "oct": 1396, "octet_length": 1394, "octob": [487, 1109, 1396], "od": [163, 863], "odbc": [39, 154, 356], "odd": 705, "odi": [708, 710, 1302], "off": [64, 65, 152, 153, 167, 259, 260, 356, 454, 466, 776, 873, 874, 884, 896, 897, 902, 912, 925, 970, 1072, 1084], "offer": [279, 356, 643, 851, 911, 970, 1397, 1401], "offic": [41, 356], "offset": [75, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 239, 245, 288, 301, 332, 333, 356, 454, 455, 463, 474, 475, 477, 482, 495, 521, 565, 583, 659, 691, 709, 710, 724, 737, 851, 890, 892, 918, 926, 942, 943, 970, 1072, 1073, 1081, 1096, 1097, 1099, 1104, 1117, 1144, 1191, 1209, 1284, 1301, 1302, 1316, 1329, 1373, 1400], "offset_bi": 795, "often": [155, 207, 245, 288, 356, 390, 558, 652, 659, 851, 892, 918, 970, 1003, 1184, 1250, 1373, 1388, 1401], "ok": 589, "old": [40, 285, 356, 653, 654, 851, 916, 970, 1251, 1252, 1373], "old_tabl": 1403, "older": [47, 52, 356, 970], "oldw": 730, "omit": [28, 136, 140, 157, 163, 181, 207, 276, 291, 313, 318, 356, 790, 793, 805, 806, 838, 839, 976, 1402, 1403], "onc": [64, 132, 152, 153, 189, 213, 264, 290, 292, 335, 356, 577, 598, 681, 732, 733, 851, 869, 946, 970, 1203, 1223, 1270, 1324, 1325, 1373, 1386], "one": [21, 38, 39, 41, 49, 58, 66, 113, 133, 135, 136, 137, 138, 139, 152, 153, 157, 161, 162, 163, 164, 167, 171, 172, 186, 188, 207, 216, 224, 227, 228, 235, 243, 244, 245, 257, 259, 261, 262, 271, 280, 288, 289, 290, 296, 299, 314, 317, 323, 336, 356, 367, 401, 447, 449, 512, 513, 517, 520, 523, 525, 582, 589, 594, 612, 622, 623, 625, 627, 629, 630, 639, 658, 659, 684, 692, 705, 706, 707, 722, 745, 777, 781, 783, 790, 793, 813, 831, 841, 847, 851, 870, 879, 881, 882, 887, 888, 891, 892, 896, 898, 907, 914, 918, 922, 924, 935, 941, 947, 970, 985, 1014, 1019, 1066, 1137, 1148, 1149, 1208, 1215, 1220, 1244, 1256, 1276, 1297, 1298, 1299, 1314, 1337, 1353, 1373, 1388, 1389, 1391, 1395, 1396, 1403], "oneormoredatatyp": [41, 181, 356], "ones": [663, 665, 667, 669, 671, 674, 676, 678, 851, 976], "onf": [724, 1316], "onli": [1, 5, 11, 14, 21, 31, 38, 39, 41, 49, 57, 58, 63, 64, 66, 100, 132, 134, 147, 149, 152, 153, 154, 157, 158, 160, 162, 164, 167, 170, 171, 172, 173, 176, 177, 178, 179, 183, 187, 197, 207, 227, 228, 231, 233, 236, 245, 246, 257, 260, 261, 264, 280, 288, 290, 291, 310, 312, 313, 314, 325, 326, 342, 356, 367, 369, 371, 383, 435, 436, 449, 454, 466, 477, 485, 487, 507, 516, 526, 598, 605, 606, 622, 623, 624, 625, 626, 627, 628, 629, 630, 639, 651, 698, 708, 710, 722, 760, 776, 813, 851, 876, 879, 881, 882, 883, 892, 897, 898, 918, 919, 925, 936, 938, 953, 970, 976, 983, 984, 985, 1051, 1054, 1072, 1084, 1099, 1109, 1127, 1134, 1141, 1150, 1223, 1248, 1290, 1300, 1302, 1314, 1347, 1350, 1353, 1373, 1382, 1385, 1401, 1402, 1404], "onlin": [233, 356, 1134, 1373], "ont": [708, 710, 1300, 1302], "onto": 183, "oof": [723, 1315, 1391, 1396], "op": [21, 152, 153, 187, 285, 356, 605, 652, 851, 900, 916, 970, 1250, 1373], "opac": [356, 359, 1373, 1378], "opaqu": 953, "open": [41, 54, 150, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 224, 356, 449, 851, 879, 970], "openoffic": 163, "openpyxl": [157, 175], "oper": [4, 41, 57, 66, 100, 109, 112, 119, 126, 133, 135, 136, 137, 138, 139, 149, 154, 218, 233, 236, 238, 244, 250, 261, 262, 264, 272, 276, 278, 279, 280, 283, 284, 286, 288, 291, 292, 297, 299, 308, 314, 315, 320, 323, 324, 334, 335, 356, 366, 367, 370, 401, 441, 442, 443, 444, 445, 446, 501, 502, 517, 519, 522, 524, 549, 577, 578, 579, 580, 581, 582, 589, 596, 615, 618, 620, 621, 622, 623, 625, 627, 629, 630, 633, 634, 635, 638, 639, 644, 651, 681, 684, 750, 758, 765, 766, 768, 779, 780, 784, 796, 830, 851, 863, 872, 876, 878, 883, 888, 891, 896, 898, 907, 908, 915, 919, 923, 924, 928, 935, 938, 946, 970, 1014, 1055, 1060, 1061, 1062, 1063, 1064, 1065, 1124, 1125, 1134, 1145, 1147, 1175, 1203, 1204, 1205, 1206, 1207, 1208, 1222, 1234, 1235, 1248, 1270, 1276, 1312, 1347, 1352, 1353, 1354, 1373, 1392, 1400, 1401], "operand": [758, 851], "opp": 976, "oppos": 776, "opposit": [299, 356, 401, 582, 684, 851, 924, 970, 1014, 1208, 1276, 1373], "opt": [318, 356], "optim": [49, 50, 51, 52, 64, 65, 132, 152, 158, 162, 164, 167, 169, 170, 171, 172, 257, 262, 279, 283, 290, 321, 356, 869, 873, 874, 884, 902, 912, 925, 933, 942, 943, 944, 953, 970, 1050, 1271, 1373], "optimis": [154, 264, 291, 342, 356, 970, 974, 1223, 1273, 1373, 1404], "optimist": 15, "option": [2, 3, 4, 5, 6, 7, 31, 34, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 53, 55, 56, 58, 64, 65, 74, 76, 143, 152, 154, 155, 156, 157, 158, 160, 162, 164, 167, 168, 169, 170, 171, 172, 173, 175, 180, 181, 182, 183, 186, 187, 188, 197, 198, 224, 240, 245, 255, 260, 265, 271, 296, 303, 309, 320, 323, 325, 356, 414, 449, 454, 547, 605, 606, 612, 639, 660, 661, 662, 664, 666, 668, 670, 673, 675, 677, 690, 698, 708, 710, 722, 724, 762, 833, 841, 851, 863, 873, 874, 879, 884, 892, 896, 897, 903, 907, 912, 922, 925, 928, 935, 936, 945, 970, 976, 1027, 1072, 1173, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1283, 1290, 1300, 1302, 1314, 1316, 1349, 1362, 1373, 1391, 1396, 1403], "optional_memb": [539, 851, 1163, 1373], "or_": 851, "oracl": 155, "orang": [220, 337, 338, 340, 341, 343, 344, 346, 348, 349, 356, 427, 757, 851, 948, 949, 951, 952, 954, 955, 957, 959, 960, 1396], "orc": 200, "order": [11, 41, 49, 50, 51, 52, 55, 58, 64, 70, 136, 152, 154, 167, 174, 176, 177, 178, 179, 215, 219, 220, 227, 228, 229, 236, 244, 245, 259, 261, 272, 278, 279, 280, 284, 288, 290, 292, 293, 297, 302, 313, 314, 319, 321, 325, 326, 356, 382, 402, 407, 426, 427, 452, 453, 513, 560, 577, 584, 590, 639, 644, 649, 659, 681, 682, 683, 692, 693, 723, 730, 731, 732, 733, 747, 756, 757, 759, 760, 762, 774, 830, 841, 851, 862, 868, 876, 881, 882, 883, 888, 891, 892, 896, 898, 907, 908, 915, 918, 919, 923, 927, 928, 932, 933, 936, 970, 974, 975, 976, 995, 1015, 1020, 1039, 1040, 1049, 1070, 1071, 1138, 1170, 1186, 1203, 1210, 1216, 1242, 1246, 1254, 1270, 1272, 1274, 1285, 1315, 1340, 1357, 1358, 1359, 1360, 1362, 1373, 1382, 1385, 1391, 1400, 1401, 1404], "order_bi": [639, 851], "ordin": [478, 649, 851, 1100, 1246, 1373, 1402], "ordinal_dai": [462, 497], "org": [21, 43, 44, 134, 154, 155, 158, 160, 209, 210, 211, 221, 356, 613, 717, 925, 970, 978, 979, 1309], "orient": [59, 61, 107, 137, 139, 276, 356, 970, 1382], "origin": [58, 152, 153, 167, 227, 228, 236, 284, 321, 356, 452, 453, 481, 482, 495, 513, 560, 598, 622, 639, 651, 652, 653, 654, 655, 657, 699, 705, 714, 772, 773, 851, 881, 882, 888, 915, 933, 970, 1070, 1071, 1103, 1104, 1117, 1138, 1186, 1250, 1251, 1252, 1253, 1255, 1291, 1297, 1306, 1373], "orjson": 148, "orld": 1322, "orson": 148, "other": [1, 21, 37, 41, 47, 65, 66, 133, 151, 152, 153, 154, 157, 167, 172, 176, 177, 178, 179, 228, 230, 233, 236, 259, 260, 261, 271, 272, 280, 284, 289, 291, 294, 295, 318, 323, 325, 328, 330, 331, 354, 356, 359, 366, 370, 372, 382, 383, 436, 451, 487, 495, 501, 502, 513, 517, 522, 524, 534, 535, 539, 549, 556, 578, 579, 580, 581, 596, 602, 608, 618, 620, 633, 634, 638, 653, 654, 686, 693, 722, 749, 750, 755, 758, 765, 767, 769, 774, 777, 778, 779, 780, 788, 795, 815, 817, 820, 829, 833, 835, 851, 863, 866, 874, 888, 896, 897, 898, 907, 908, 914, 915, 920, 921, 925, 935, 936, 939, 940, 941, 970, 976, 985, 1054, 1069, 1109, 1117, 1124, 1125, 1126, 1134, 1145, 1147, 1158, 1163, 1175, 1182, 1204, 1205, 1206, 1207, 1222, 1234, 1235, 1251, 1252, 1355, 1364, 1372, 1373, 1378, 1388, 1401], "other_df": [259, 356], "other_lf": [896, 970], "otherwis": [39, 152, 154, 157, 164, 170, 182, 185, 189, 240, 264, 272, 291, 294, 313, 318, 342, 356, 406, 411, 432, 436, 447, 503, 504, 505, 506, 589, 598, 609, 639, 643, 644, 646, 651, 687, 697, 700, 704, 709, 711, 716, 720, 721, 724, 735, 762, 766, 795, 798, 807, 813, 841, 851, 908, 920, 953, 970, 975, 1019, 1024, 1046, 1054, 1066, 1128, 1129, 1130, 1131, 1215, 1223, 1242, 1244, 1248, 1271, 1273, 1280, 1289, 1292, 1296, 1301, 1303, 1308, 1312, 1313, 1316, 1327, 1362, 1373, 1393], "our": 212, "out": [8, 15, 39, 49, 50, 51, 52, 53, 54, 55, 114, 140, 143, 172, 175, 183, 187, 236, 288, 291, 356, 393, 411, 564, 566, 697, 700, 709, 841, 888, 918, 970, 1006, 1024, 1190, 1192, 1289, 1292, 1301, 1399], "outcom": [639, 851], "outer": [58, 325, 356, 936, 970], "outermost": 57, "outlin": 7, "output": [0, 8, 31, 38, 41, 43, 44, 45, 46, 47, 49, 53, 54, 55, 215, 223, 257, 264, 269, 272, 278, 280, 290, 294, 296, 306, 319, 326, 330, 356, 369, 371, 394, 426, 427, 432, 447, 487, 552, 553, 568, 586, 589, 597, 598, 609, 612, 623, 645, 646, 653, 696, 712, 716, 751, 756, 757, 762, 766, 767, 768, 769, 779, 780, 781, 799, 809, 810, 812, 813, 817, 834, 835, 841, 851, 863, 868, 878, 884, 902, 907, 908, 920, 922, 932, 939, 953, 970, 983, 984, 998, 999, 1007, 1017, 1039, 1040, 1046, 1066, 1109, 1178, 1179, 1194, 1212, 1223, 1243, 1244, 1288, 1304, 1308, 1343, 1357, 1358, 1362, 1373], "output_path": [613, 925, 970], "outsid": [56, 169, 172, 436, 851, 1054, 1373], "over": [52, 53, 54, 55, 66, 142, 152, 153, 154, 157, 163, 167, 172, 183, 184, 215, 233, 256, 257, 258, 264, 272, 289, 290, 291, 303, 319, 320, 334, 342, 356, 360, 426, 427, 446, 449, 504, 512, 597, 598, 609, 611, 612, 613, 614, 615, 623, 624, 649, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 756, 757, 785, 786, 799, 812, 813, 825, 830, 851, 868, 873, 884, 908, 912, 925, 928, 932, 945, 953, 967, 970, 976, 1039, 1040, 1065, 1129, 1134, 1223, 1259, 1260, 1262, 1266, 1357, 1358, 1373, 1401], "overflow": [428, 444, 445, 739, 751, 851, 870, 970, 1041, 1063, 1064, 1331, 1343, 1373], "overhead": [55, 57, 100, 167, 170, 171, 172], "overlap": [699, 706, 708, 710, 1291, 1298, 1300, 1302], "overrid": [1, 38, 41, 49, 133, 135, 136, 137, 138, 139, 152, 154, 155, 157, 161, 162, 163, 169, 171, 180, 181, 187, 189, 356, 970], "overridden": [41, 133, 135, 137, 139, 161, 162, 171, 189, 356, 970], "overview": [356, 851, 863, 970, 1373, 1400, 1404], "overwrit": [15, 39, 40, 42, 52, 55, 133, 135, 136, 137, 139, 143, 148, 152, 153, 161, 162, 167, 171, 211, 325, 356, 368, 749, 851, 936, 970], "overwrite_schema": [40, 356], "ow": 729, "own": [841, 866, 1353, 1373, 1404], "p": [60, 279, 356, 643, 833, 851, 911, 970, 976, 1301, 1303, 1386], "p13dt14h0": 487, "p1dt42": 487, "pa": [40, 133, 173, 356, 830], "pa_tabl": 830, "pacif": [455, 1073], "pack": [276, 356], "packag": [33, 34, 35, 149, 154, 356, 360, 454, 466, 776, 1072, 1084], "pad": [718, 719, 744, 1310, 1311, 1336], "pad_end": [719, 1311], "pad_start": [718, 744, 1310, 1336], "page": [47, 52, 158, 164, 170, 172, 356, 851, 863, 970, 1373, 1400], "pair": [133, 135, 136, 137, 139, 145, 161, 162, 171, 285, 356, 916, 970, 1404], "pairwis": [221, 356], "panda": [39, 134, 138, 148, 175, 236, 245, 284, 315, 321, 323, 356, 474, 475, 755, 830, 851, 888, 892, 915, 933, 935, 970, 1096, 1097, 1354, 1355, 1373, 1383, 1385, 1401], "pandas_df": 1401, "pane": [41, 356], "panic": 115, "pap": 1303, "papa": 711, "papai": [711, 1303], "papaya": [711, 724, 735, 1303, 1316, 1327], "parallel": [64, 66, 142, 155, 164, 172, 245, 260, 262, 279, 295, 331, 356, 561, 762, 841, 851, 892, 896, 897, 921, 940, 953, 970, 1065, 1187, 1362, 1373], "parallelis": [264, 342, 356, 1223, 1373], "parallelstrategi": [164, 172], "param": [41, 133, 135, 136, 137, 139, 152, 153, 161, 162, 167, 171, 182, 183, 187, 289, 356, 970], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 85, 89, 97, 101, 107, 116, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 195, 196, 197, 211, 212, 213, 215, 216, 217, 221, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 255, 257, 258, 259, 260, 261, 263, 264, 265, 269, 271, 272, 275, 276, 278, 279, 280, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 339, 341, 342, 348, 350, 356, 366, 368, 369, 370, 371, 372, 382, 389, 390, 393, 394, 401, 402, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 426, 427, 428, 429, 433, 436, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 454, 456, 458, 459, 464, 466, 477, 480, 481, 482, 483, 484, 486, 487, 495, 498, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 532, 533, 534, 535, 539, 547, 549, 551, 556, 557, 558, 559, 561, 564, 565, 566, 567, 568, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 596, 597, 598, 605, 606, 612, 613, 614, 618, 620, 623, 624, 625, 626, 627, 628, 633, 634, 638, 639, 640, 643, 644, 646, 647, 649, 651, 652, 653, 654, 655, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 744, 745, 747, 749, 750, 752, 756, 757, 758, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 851, 868, 870, 871, 873, 874, 878, 879, 880, 881, 884, 885, 886, 887, 888, 890, 891, 892, 893, 896, 897, 898, 901, 902, 903, 907, 908, 911, 912, 913, 914, 915, 916, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 945, 946, 950, 952, 953, 959, 961, 970, 975, 976, 980, 982, 983, 984, 985, 995, 1002, 1003, 1006, 1007, 1014, 1015, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1039, 1040, 1041, 1042, 1047, 1053, 1054, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1072, 1074, 1076, 1077, 1082, 1084, 1099, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1117, 1120, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1138, 1142, 1143, 1144, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1163, 1170, 1173, 1177, 1182, 1183, 1184, 1185, 1187, 1190, 1191, 1192, 1193, 1194, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1213, 1214, 1215, 1216, 1223, 1235, 1239, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1276, 1279, 1283, 1284, 1285, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1336, 1337, 1340, 1344, 1347, 1348, 1349, 1350, 1351, 1353, 1354, 1357, 1358, 1359, 1362, 1363, 1364, 1373, 1382, 1383, 1384, 1385, 1386, 1388, 1393, 1396, 1401], "parameteris": 154, "parametr": 863, "paramount": [902, 970], "parent": [41, 77, 238, 356], "parenthes": 19, "parquet": [47, 52, 53, 54, 55, 164, 165, 166, 172, 200, 356, 863, 970], "parquetcompress": [47, 356], "parquetfieldoverwrit": [52, 970], "parquetmetadata": [47, 52, 356, 970], "pars": [38, 49, 151, 152, 153, 155, 157, 162, 163, 164, 167, 170, 171, 172, 215, 244, 294, 295, 299, 302, 319, 330, 331, 335, 356, 427, 436, 534, 639, 653, 654, 693, 713, 722, 738, 739, 749, 757, 767, 769, 774, 777, 778, 779, 780, 788, 801, 815, 817, 820, 829, 831, 833, 835, 841, 851, 868, 891, 920, 921, 924, 927, 932, 939, 940, 946, 970, 1040, 1054, 1157, 1251, 1252, 1276, 1305, 1330, 1331, 1358, 1373, 1382], "parseerror": [739, 1331], "parser": [152, 157], "part": [55, 133, 157, 207, 212, 313, 318, 356, 639, 706, 726, 727, 851, 941, 970, 980, 1298, 1318, 1319, 1396, 1397], "part_idx": 146, "parti": [597, 851], "partial": [136, 152, 167, 356, 970], "particip": [41, 356], "particular": [40, 152, 157, 158, 160, 215, 231, 319, 356, 426, 427, 756, 757, 851, 868, 932, 970, 1039, 1040, 1127, 1357, 1358, 1373], "partit": [47, 53, 54, 55, 155, 164, 168, 170, 172, 173, 258, 278, 356, 639, 851, 863], "partition_bi": [47, 153, 258, 356, 639, 851], "partition_chunk_size_byt": [47, 356], "partition_col": [47, 155, 356], "partition_df": 153, "partition_index": 199, "partition_num": 155, "partition_on": 155, "partition_rang": 155, "partitionbykei": [54, 55, 145, 146], "partitioned_object": [47, 356], "partitioningschem": [49, 50, 51, 52, 970], "partitionmax": 54, "partitionmaxs": [53, 55, 144], "partitionpart": [53, 54, 145, 146], "pass": [33, 34, 35, 37, 39, 40, 41, 47, 49, 50, 51, 52, 58, 64, 65, 107, 132, 135, 148, 149, 151, 154, 155, 157, 164, 167, 170, 172, 173, 176, 178, 181, 183, 185, 187, 215, 221, 225, 244, 245, 247, 260, 263, 278, 279, 280, 285, 288, 294, 299, 302, 307, 315, 318, 319, 326, 330, 335, 356, 401, 427, 454, 464, 466, 477, 481, 487, 510, 531, 582, 597, 598, 613, 639, 643, 653, 654, 659, 684, 693, 722, 729, 730, 731, 738, 757, 766, 774, 776, 801, 833, 841, 847, 851, 868, 873, 874, 880, 884, 891, 892, 894, 897, 902, 911, 912, 916, 918, 920, 924, 925, 927, 932, 939, 945, 946, 953, 970, 975, 1014, 1040, 1072, 1082, 1084, 1103, 1109, 1135, 1151, 1177, 1208, 1223, 1251, 1252, 1276, 1314, 1321, 1322, 1323, 1330, 1344, 1354, 1358, 1373, 1386, 1401], "pass_nam": [598, 851], "pass_name_to_appli": [149, 851], "password": [152, 155, 158, 160], "past": [37, 356, 902, 970], "pat": [709, 1301], "patch": 76, "path": [3, 6, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 144, 146, 149, 150, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 224, 296, 356, 449, 612, 613, 616, 683, 851, 879, 922, 925, 970, 974, 1274, 1306, 1373, 1404], "pathlib": [36, 38, 43, 44, 47, 167, 356], "pattern": [103, 152, 153, 157, 158, 162, 164, 167, 170, 171, 172, 257, 356, 429, 433, 607, 697, 698, 699, 702, 705, 706, 707, 708, 709, 710, 720, 721, 722, 728, 866, 953, 976, 1042, 1047, 1271, 1273, 1289, 1290, 1291, 1294, 1297, 1298, 1299, 1300, 1301, 1302, 1312, 1313, 1314, 1320, 1373, 1396], "paya": 735, "pc": [914, 970], "pct": [183, 649, 851], "pct_chang": [851, 1373], "pct_valid": [649, 851], "pd": [134, 138, 755, 830, 851, 1354, 1355, 1373, 1383, 1401], "pd_df": 138, "pd_frame": 830, "pd_seri": 138, "pdsh": [142, 153], "pea": 711, "peak": [290, 356, 641, 642, 851, 1240, 1241, 1373], "peak_max": [851, 1373], "peak_min": [851, 1373], "pear": [711, 724, 735, 1303, 1316, 1327], "pearson": [221, 356, 547, 660, 690, 781, 851, 1173, 1257, 1283, 1373, 1390], "penalti": [734, 736, 737, 1326, 1328, 1329], "per": [15, 38, 41, 49, 149, 157, 181, 183, 215, 243, 265, 276, 277, 280, 295, 302, 319, 331, 345, 347, 348, 356, 393, 427, 561, 564, 566, 598, 622, 623, 625, 627, 629, 630, 693, 757, 762, 774, 851, 868, 903, 921, 927, 932, 940, 956, 958, 959, 970, 1006, 1040, 1187, 1190, 1192, 1358, 1362, 1373], "per_partition_sort_bi": [53, 54, 55], "percent": [640, 851, 1239, 1373], "percentag": [180, 183, 187, 640, 851, 1239, 1373], "percentil": [223, 356, 649, 851, 878, 970, 1067, 1373], "perform": [39, 47, 50, 52, 58, 105, 110, 112, 117, 119, 126, 134, 152, 153, 154, 158, 162, 164, 167, 169, 170, 171, 172, 211, 236, 244, 245, 259, 260, 261, 264, 283, 284, 288, 290, 291, 314, 342, 356, 417, 422, 425, 431, 432, 517, 589, 598, 639, 659, 698, 708, 710, 715, 716, 722, 734, 736, 737, 851, 888, 892, 896, 897, 898, 915, 918, 927, 942, 943, 970, 1030, 1035, 1038, 1045, 1046, 1223, 1290, 1300, 1302, 1307, 1308, 1314, 1326, 1328, 1329, 1353, 1373], "perhap": [320, 356], "period": [152, 153, 167, 245, 288, 356, 482, 503, 505, 506, 640, 659, 790, 791, 793, 794, 838, 839, 851, 892, 918, 970, 1104, 1128, 1130, 1131, 1239, 1373], "persist": 1388, "phase": [39, 324, 356], "philadelphia": [720, 721], "phone": [742, 1334], "physic": [57, 70, 100, 152, 153, 260, 280, 356, 755, 851, 869, 896, 897, 925, 970, 1355, 1373], "pi": [11, 448, 851, 1056, 1058, 1281, 1345, 1373, 1394, 1398], "pick": [184, 841], "pickl": [449, 851, 879, 970], "pip": [454, 466, 776, 1072, 1084], "pipe": [356, 851, 970], "pipelin": [157, 318, 356], "pitfal": 117, "pivot": [324, 356, 976], "pivot_long": [323, 356, 935, 970], "pivot_wid": [280, 356], "pivotagg": [280, 356], "pixel": [41, 356], "pk": [500, 851, 1123, 1373], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 66, 67, 76, 85, 89, 97, 98, 100, 104, 107, 108, 109, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 189, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 851, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 970, 975, 976, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1143, 1144, 1146, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1373, 1378, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1401, 1402, 1404], "pl_frame": 830, "place": [11, 12, 38, 49, 207, 213, 226, 233, 249, 250, 280, 286, 291, 302, 328, 356, 360, 382, 394, 402, 568, 584, 692, 693, 774, 851, 927, 970, 985, 995, 1007, 1015, 1134, 1194, 1210, 1247, 1285, 1373], "placehold": 800, "plai": [13, 780], "plain": [884, 914, 970], "plan": [64, 132, 260, 262, 356, 449, 851, 869, 873, 879, 884, 896, 897, 914, 922, 925, 970, 1403], "plan_stag": [925, 970], "plan_typ": [914, 970], "plane": [772, 773], "planstag": [925, 970], "plantypeprefer": [914, 970], "platform": 175, "ple": 1396, "pleas": [138, 154, 155, 236, 245, 284, 356, 360, 504, 782, 795, 851, 888, 892, 915, 970, 1129, 1373], "plenti": 976, "plot": [356, 912, 925, 970, 1373], "plu": [447, 594, 851, 1066, 1220, 1244, 1373, 1395], "plugin": [0, 851, 863], "plugin_path": 149, "point": [11, 12, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 78, 79, 80, 99, 132, 143, 144, 145, 146, 147, 148, 156, 162, 164, 165, 167, 168, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 227, 234, 245, 261, 262, 265, 303, 313, 318, 325, 356, 359, 360, 361, 435, 446, 447, 452, 454, 466, 482, 483, 511, 516, 517, 528, 542, 543, 577, 598, 646, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 678, 679, 681, 776, 778, 809, 810, 851, 873, 874, 881, 884, 886, 892, 898, 902, 903, 912, 916, 928, 936, 944, 970, 1049, 1051, 1065, 1066, 1070, 1072, 1084, 1104, 1105, 1136, 1141, 1152, 1203, 1244, 1257, 1258, 1261, 1263, 1264, 1268, 1270, 1351, 1356, 1373, 1378, 1401], "pointer": [231, 356, 1127, 1373], "poison": [631, 632, 851, 1232, 1233, 1373], "pola": 356, "polar": [1, 205, 356, 359, 360, 361, 850, 851, 857, 863, 970, 974, 975, 976, 1373, 1377, 1378, 1400, 1401, 1403], "polars_df": 1401, "polars_engine_affin": [49, 50, 51, 52, 64, 65, 873, 874, 884, 912, 925, 970], "polars_file_cache_ttl": [162, 167, 170, 171], "polars_hypothesis_profil": [186, 188], "polars_max_thread": 189, "polars_seri": 1401, "polars_verbos": [873, 884, 912, 925, 970], "polarsdatafram": 211, "polarsdataset": [318, 356], "polarsdatatyp": [67, 77, 85, 152, 153, 167, 180, 181, 182, 183, 184, 187, 216, 264, 313, 318, 356, 414, 428, 507, 597, 598, 653, 654, 713, 797, 799, 811, 812, 813, 823, 826, 842, 847, 851, 870, 970, 976, 1027, 1041, 1223, 1251, 1252, 1305, 1373], "polarsintegertyp": [739, 771, 805, 806, 1331], "polarstemporaltyp": [734, 1326], "polarstyp": 66, "pool": [15, 65, 189, 190, 874, 970], "poor": 154, "pop2": [260, 356, 897, 970], "popul": [260, 356, 897, 970], "port": [39, 152, 154, 155, 158, 160, 356], "pos_a": 1396, "posit": [41, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 199, 212, 225, 232, 244, 278, 294, 295, 299, 302, 322, 330, 331, 335, 356, 401, 503, 505, 506, 507, 582, 639, 644, 646, 684, 693, 707, 720, 721, 739, 749, 772, 773, 774, 777, 778, 779, 780, 797, 829, 833, 847, 851, 880, 885, 891, 920, 921, 924, 927, 934, 939, 940, 946, 970, 976, 1014, 1128, 1130, 1131, 1208, 1242, 1244, 1276, 1299, 1331, 1373, 1402], "position": 1373, "possibl": [41, 47, 52, 107, 109, 135, 136, 139, 152, 157, 180, 183, 187, 244, 257, 264, 290, 321, 342, 356, 595, 598, 609, 661, 727, 761, 851, 873, 884, 891, 912, 925, 927, 933, 970, 1223, 1258, 1319, 1373], "post": [58, 76, 914, 970], "postgresql": [39, 154, 155, 356, 639, 851, 1399], "potenti": [117, 119, 149, 167, 170, 171, 257, 289, 291, 356, 622, 720, 721, 876, 878, 883, 919, 938, 970, 1312, 1313], "pow": [851, 1373, 1394], "pow_n": 60, "power": [831, 1242, 1373, 1395], "powersofn": 60, "pre": [55, 589, 646, 823, 826, 842, 851, 1244, 1373], "preced": [183, 976], "precis": [11, 12, 38, 41, 49, 56, 74, 154, 257, 290, 291, 310, 313, 318, 356, 456, 738, 809, 970, 976, 1074, 1330], "pred1": 841, "pred2": 841, "predefin": [280, 356], "predic": [40, 64, 147, 167, 170, 171, 172, 173, 216, 236, 255, 260, 261, 284, 289, 356, 428, 513, 764, 799, 841, 851, 873, 884, 888, 897, 898, 902, 912, 915, 916, 925, 942, 943, 970, 1138, 1271, 1273, 1373], "predicate_pushdown": [64, 873, 884, 902, 912, 925, 944, 970], "predict": [283, 326, 356], "prefer": [152, 153, 157, 158, 162, 164, 167, 188, 215, 233, 257, 264, 289, 290, 319, 342, 356, 426, 427, 507, 598, 645, 751, 756, 757, 834, 841, 851, 868, 932, 970, 974, 1039, 1040, 1134, 1223, 1243, 1343, 1357, 1358, 1373, 1383, 1404], "prefilt": 172, "prefix": [40, 152, 153, 167, 207, 356, 368, 416, 433, 487, 607, 623, 626, 627, 629, 630, 728, 731, 732, 744, 851, 976, 1029, 1047, 1320, 1324, 1336], "prefix_": 626, "prefix_a": 626, "prefix_b": 626, "prefix_field": [624, 628], "presenc": [798, 807, 976], "present": [136, 183, 240, 356, 539, 613, 730, 731, 841, 851, 925, 970], "preserv": [227, 228, 236, 244, 259, 261, 264, 284, 314, 315, 325, 356, 452, 453, 454, 474, 475, 513, 560, 639, 653, 687, 704, 851, 881, 882, 888, 896, 898, 915, 936, 970, 1070, 1071, 1072, 1138, 1186, 1251, 1280, 1296, 1354, 1373], "pressur": [52, 152, 153, 162, 164, 167, 171, 172, 685, 851, 970, 1277, 1373], "presum": [597, 851], "prev_pow2": 60, "prevent": [314, 356, 368, 444, 445, 622, 751, 851, 970, 1063, 1064, 1343, 1373], "preview": [243, 356], "previou": [55, 60, 207, 356, 359, 454, 622, 623, 625, 627, 629, 630, 640, 747, 851, 1072, 1239, 1373, 1378], "previous": [2, 3], "price": [356, 359, 1404], "primari": [157, 974, 1401, 1404], "primarili": [1, 866], "primit": [40, 356, 539, 851], "print": [9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 153, 175, 176, 178, 229, 243, 244, 258, 262, 312, 334, 356, 531, 614, 790, 793, 851, 873, 894, 970, 976, 1163, 1350, 1373, 1404], "prior": [138, 356, 359, 1373, 1378], "prioriti": 184, "probabl": [500, 646, 851, 1123, 1244, 1373], "process": [15, 38, 49, 50, 51, 52, 64, 65, 152, 153, 154, 167, 189, 290, 356, 873, 874, 884, 912, 925, 970], "process_index": [313, 356], "produc": [2, 3, 97, 147, 183, 187, 216, 259, 356, 390, 428, 558, 609, 809, 812, 851, 896, 902, 970, 1003, 1184], "product": [58, 221, 259, 356, 444, 451, 851, 896, 970, 1063, 1069, 1373], "profil": [33, 186, 188, 873, 970], "profile_nam": 33, "programmat": [223, 356, 878, 970], "progress": [74, 80], "project": [64, 147, 167, 169, 170, 171, 172, 692, 693, 851, 873, 884, 902, 912, 916, 925, 970], "projection_pushdown": [64, 873, 884, 902, 912, 925, 944, 970], "prompt": 140, "propag": [389, 394, 502, 539, 557, 568, 631, 632, 634, 696, 712, 779, 780, 851, 1002, 1007, 1125, 1163, 1183, 1194, 1232, 1233, 1235, 1288, 1304, 1373], "propagate_nan": 781, "proper": [261, 356, 898, 970], "properti": [40, 41, 52, 198, 201, 202, 211, 219, 220, 229, 237, 248, 293, 298, 329, 333, 356, 359, 360, 875, 876, 883, 919, 938, 943, 970, 975, 976, 1122, 1140, 1231, 1275, 1373, 1378, 1404], "proport": [762, 851, 1362, 1373], "protocol": [40, 134, 154, 155, 211, 356], "prototyp": 847, "provid": [32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 53, 54, 55, 152, 153, 155, 156, 157, 162, 164, 167, 168, 169, 170, 171, 172, 183, 187, 197, 213, 236, 240, 255, 260, 284, 303, 313, 356, 359, 411, 412, 487, 507, 528, 589, 597, 598, 700, 701, 705, 713, 714, 730, 731, 732, 733, 801, 833, 851, 863, 873, 884, 888, 897, 912, 915, 925, 928, 945, 967, 970, 1024, 1025, 1109, 1152, 1172, 1223, 1292, 1293, 1297, 1305, 1306, 1351, 1373, 1386, 1393, 1396, 1401, 1404], "provis": 864, "prune": [164, 170, 172, 902, 970], "pt0": 487, "public": [155, 356, 851, 863, 970, 1373, 1400], "pulp": 1382, "pure": [41, 356], "purpos": [621, 851, 970], "push": [152, 158, 162, 164, 167, 170, 171, 172, 173, 216, 356, 428, 851], "pushdown": [64, 147, 873, 884, 902, 912, 916, 925, 942, 943, 970, 1271, 1273, 1373], "put": [38, 49, 76, 356, 360, 970], "pwd": 154, "py": 169, "pyarrow": [40, 47, 56, 133, 138, 152, 155, 156, 158, 160, 164, 168, 173, 175, 308, 314, 315, 356, 830, 863, 1347, 1353, 1354, 1373, 1383, 1385, 1401], "pyarrow_opt": [47, 156, 164, 168, 356], "pyarrow_t": 1401, "pycapsul": [133, 134, 210, 979], "pycapsuleinterfac": [134, 210, 979], "pydant": 175, "pyiceberg": [42, 169, 175, 356], "pyodbc": [39, 356], "pyodbc_uri": [39, 356], "pyspark": 189, "pytest": [176, 178], "python": [0, 33, 34, 35, 43, 44, 76, 87, 103, 134, 152, 153, 158, 160, 175, 176, 178, 211, 257, 264, 290, 291, 310, 342, 356, 449, 454, 458, 466, 517, 597, 598, 707, 776, 790, 791, 793, 794, 838, 839, 851, 857, 879, 953, 970, 974, 975, 1072, 1076, 1084, 1087, 1088, 1089, 1093, 1223, 1299, 1352, 1373, 1377, 1400], "pythondatatyp": [67, 85, 216, 356, 847, 870, 970, 976], "pythonliter": [986, 1030, 1035, 1038, 1139, 1174, 1224, 1225, 1226, 1227, 1271, 1373], "pytorch": [318, 356, 1356, 1373], "q": [291, 356, 833, 1373, 1378, 1386], "q1": [41, 356], "q2": [41, 356], "q3": [41, 356], "q4": [41, 356], "qcut": [447, 851, 1066, 1373], "qhoo": 1404, "qmark": 154, "qqr": 976, "quad": [504, 851, 1129, 1373], "qualifi": [39, 356], "quantifi": [706, 1298], "quantil": [356, 646, 670, 671, 851, 970, 1244, 1263, 1373, 1390], "quantile_cont": 1394, "quantile_disc": 1394, "quantilemethod": [223, 282, 348, 356, 647, 670, 671, 824, 851, 878, 913, 959, 970, 1067, 1245, 1263, 1373], "quarter": [245, 260, 288, 326, 356, 477, 482, 495, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1099, 1104, 1117, 1397], "queri": [10, 49, 50, 51, 52, 53, 54, 55, 64, 65, 97, 132, 154, 155, 158, 167, 170, 171, 172, 233, 262, 279, 303, 356, 589, 597, 598, 714, 830, 851, 863, 873, 874, 884, 912, 914, 925, 928, 942, 943, 944, 945, 953, 962, 970, 1134, 1223, 1306, 1373, 1382, 1383, 1385, 1389, 1400, 1402, 1403], "queryoptflag": [49, 50, 51, 52, 64, 65, 132, 873, 874, 884, 912, 925, 970], "quick": [847, 1067, 1373, 1404], "quit": [260, 356, 897, 970], "quot": [38, 39, 49, 152, 153, 155, 167, 356, 742, 970, 1334], "quota_project_id": 35, "quote_char": [38, 49, 152, 153, 167, 356, 970], "quote_plu": 155, "quote_styl": [38, 49, 356, 970], "quotes_titl": 742, "quotient": 1395, "r": [152, 153, 167, 356, 604, 643, 699, 704, 705, 706, 707, 720, 721, 851, 976, 1291, 1296, 1297, 1298, 1299, 1312, 1313, 1327, 1386, 1396], "r1": 66, "r2": 66, "r3": 66, "rab": [697, 723, 1289, 1315, 1391], "rad": 1398, "radian": [448, 772, 851, 1394], "radix": [739, 1331], "rai": [772, 773], "raini": [720, 721, 1312, 1313], "rais": [1, 10, 16, 17, 21, 40, 56, 66, 104, 105, 108, 109, 111, 112, 113, 114, 115, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 152, 153, 157, 163, 164, 167, 172, 176, 178, 211, 213, 216, 240, 265, 280, 289, 314, 356, 393, 411, 428, 454, 480, 481, 564, 566, 597, 609, 644, 646, 654, 697, 700, 709, 734, 736, 737, 739, 741, 792, 811, 851, 903, 945, 970, 1006, 1024, 1072, 1102, 1103, 1190, 1192, 1242, 1244, 1252, 1289, 1292, 1301, 1326, 1328, 1329, 1331, 1333, 1353, 1373], "raise_if_empti": [152, 153, 157, 163, 167], "raise_if_undetermin": 609, "raise_on_fail": 945, "raker": 148, "ram": [49, 50, 51, 52, 970], "ran": [149, 851], "randn": 97, "random": [41, 43, 97, 158, 174, 181, 246, 292, 356, 526, 577, 649, 681, 686, 851, 863, 1150, 1203, 1246, 1270, 1279, 1373], "randomli": 182, "rang": [18, 41, 154, 155, 223, 231, 245, 258, 356, 373, 448, 454, 462, 466, 473, 478, 479, 480, 482, 495, 496, 532, 535, 771, 776, 779, 789, 790, 791, 792, 793, 794, 805, 806, 809, 810, 837, 838, 839, 851, 878, 892, 970, 976, 1067, 1072, 1080, 1084, 1095, 1100, 1101, 1102, 1104, 1117, 1118, 1127, 1158, 1239, 1373, 1396], "rank": [382, 561, 774, 781, 796, 851, 995, 1187, 1373], "rankmethod": [649, 851, 1246, 1373], "rare": [455, 1073], "rather": [260, 356, 519, 614, 646, 658, 744, 851, 897, 970, 1244, 1256, 1336, 1373], "raw": 155, "raw_output": [613, 925, 970], "raw_valu": 145, "re": [240, 245, 256, 321, 323, 356, 474, 475, 484, 487, 892, 933, 935, 970, 1096, 1097, 1106, 1109, 1401], "reach": [54, 718, 719, 744, 1310, 1311, 1336], "read": [37, 142, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 197, 224, 233, 356, 359, 449, 519, 851, 879, 914, 970, 1134, 1373, 1378], "read_arrow_batches_from_odbc": 154, "read_clipboard": [37, 356], "read_csv": [151, 157, 167], "read_csv_batch": 142, "read_csv_opt": 157, "read_databas": [97, 155], "read_database_uri": 154, "read_excel": 163, "read_ndjson": 161, "read_od": 157, "read_opt": 157, "read_parquet": 172, "read_tabl": 164, "readabl": 847, "reader": [47, 52, 142, 147, 152, 153, 158, 160, 162, 164, 169, 356, 970], "reader_overrid": 169, "readi": 963, "readthedoc": [41, 356], "real": [706, 1298], "realli": [446, 698, 722, 851, 1065, 1290, 1314, 1373], "realloc": [162, 167, 170, 171, 233, 356, 1134, 1373], "rearrang": [264, 356], "reason": [189, 223, 356, 589, 597, 851, 878, 970], "receiv": [58, 154, 167, 264, 279, 342, 356, 598, 643, 851, 911, 970, 1404], "recent": [176, 177, 178, 179, 314, 356, 640, 654, 851, 1239, 1252, 1353, 1373, 1385, 1401], "rechunk": [66, 133, 134, 138, 152, 153, 156, 158, 160, 162, 164, 167, 168, 170, 171, 172, 233, 356, 851, 1052, 1134, 1146, 1229, 1373], "recognis": [10, 16, 17, 21, 976], "recommend": [41, 166, 189, 223, 257, 262, 279, 356, 589, 869, 878, 970, 976], "record": [38, 44, 49, 148, 160, 173, 356, 970], "record_batch": [258, 356], "recordbatch": [133, 258, 356, 830, 1383, 1385, 1401], "recurs": [49, 50, 51, 52, 503, 505, 506, 851, 970, 1128, 1130, 1131, 1373], "red": [57, 98, 100, 342, 762, 851, 953, 1362, 1373], "redempt": 1382, "redshift": 155, "redshift_format": 200, "reduc": [52, 152, 153, 162, 164, 167, 170, 171, 172, 290, 343, 344, 346, 349, 356, 685, 786, 799, 851, 954, 955, 957, 960, 970, 1225, 1243, 1277, 1343, 1373], "reduct": [238, 356], "ref": [705, 707, 1297, 1299], "refer": [0, 33, 41, 103, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 221, 224, 356, 360, 361, 449, 484, 487, 649, 705, 720, 721, 734, 736, 737, 741, 851, 879, 970, 1106, 1109, 1246, 1312, 1313, 1326, 1328, 1329, 1333, 1373], "referenc": [41, 356, 597, 720, 721, 747, 851, 1312, 1313, 1383, 1401], "reg": 148, "regard": [152, 781], "regardless": [138, 215, 244, 260, 319, 356, 427, 459, 714, 757, 841, 851, 868, 897, 932, 970, 1040, 1077, 1306, 1358, 1373], "regex": [101, 507, 604, 605, 607, 697, 699, 705, 706, 707, 709, 720, 721, 745, 797, 851, 976, 1289, 1291, 1297, 1298, 1299, 1301, 1312, 1313], "regexp_lik": 1394, "region": [41, 169, 356], "region_nam": 33, "regist": [1, 53, 54, 55, 59, 60, 61, 62, 147, 149, 186, 188, 303, 356, 851, 928, 970, 974, 1382, 1383, 1385, 1386, 1387, 1388, 1401, 1403], "register_dataframe_namespac": [1, 60, 61, 62], "register_expr_namespac": [1, 59, 61, 62], "register_glob": [1384, 1386, 1388, 1401], "register_io_sourc": 974, "register_lazyframe_namespac": [1, 59, 60, 62], "register_mani": [1384, 1385, 1388], "register_plugin": 851, "register_plugin_funct": 851, "register_series_namespac": [1, 59, 60, 61], "registr": [303, 356, 830, 863, 928, 970, 1388, 1401], "regrid": [532, 851], "regular": [141, 257, 289, 290, 326, 333, 356, 507, 697, 698, 699, 703, 705, 706, 707, 708, 709, 710, 720, 721, 722, 776, 797, 841, 847, 851, 943, 970, 976, 1289, 1290, 1291, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1312, 1313, 1314, 1399], "reinterpret": [851, 1373], "rel": [41, 53, 54, 55, 149, 155, 156, 168, 169, 176, 177, 178, 179, 356, 477, 503, 505, 506, 535, 762, 851, 1099, 1128, 1130, 1131, 1158, 1362, 1373], "rel_tol": [535, 851, 1158, 1373], "relat": [140, 154, 207, 720, 721, 976, 1312, 1313, 1389], "releas": [65, 259, 356, 598, 851, 874, 896, 970, 1404], "release_year": 1382, "relev": 66, "reli": [259, 356, 896, 970], "reliabl": [98, 100], "remain": [53, 152, 153, 167, 227, 228, 231, 236, 251, 280, 284, 356, 452, 453, 513, 532, 533, 560, 653, 726, 727, 851, 881, 882, 888, 895, 902, 915, 970, 1070, 1071, 1127, 1138, 1155, 1156, 1186, 1251, 1318, 1319, 1373, 1388], "remaind": [414, 727, 1027, 1319, 1395], "remap": 102, "remot": [97, 152, 153, 158, 160, 970], "remov": [4, 47, 52, 152, 153, 165, 167, 211, 225, 236, 265, 311, 356, 507, 598, 623, 729, 730, 731, 732, 733, 797, 851, 880, 888, 903, 970, 1321, 1322, 1323, 1324, 1325, 1348, 1373, 1403], "removes_pronoun": 722, "removesuffix": 623, "renam": [1, 43, 44, 136, 140, 152, 153, 157, 158, 160, 164, 167, 170, 171, 172, 176, 177, 178, 179, 190, 215, 244, 245, 259, 280, 288, 294, 295, 308, 319, 326, 330, 331, 335, 337, 356, 368, 427, 446, 503, 505, 506, 519, 615, 616, 622, 623, 624, 625, 627, 629, 630, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 747, 749, 757, 827, 828, 829, 833, 851, 868, 891, 892, 896, 918, 920, 921, 932, 939, 940, 946, 948, 970, 982, 1065, 1126, 1128, 1130, 1131, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1301, 1340, 1347, 1349, 1373, 1401], "rename_field": [726, 727, 1318, 1319], "render": [613, 925, 970], "render_as_str": 154, "reoconstruct": [291, 356], "reorder": [265, 356, 903, 970], "repeat": [55, 158, 170, 650, 652, 823, 842, 851, 1250, 1373], "repeat_bi": [851, 1373], "replac": [39, 40, 42, 152, 153, 167, 234, 235, 286, 320, 323, 330, 331, 356, 359, 458, 481, 597, 598, 654, 721, 722, 737, 851, 935, 939, 940, 970, 1076, 1103, 1252, 1271, 1273, 1313, 1314, 1329, 1373, 1378, 1394], "replace_al": [720, 1251, 1312, 1373], "replace_column": 356, "replace_strict": [653, 851, 1251, 1373], "replace_time_zon": [455, 461, 463, 1078, 1079, 1107], "replace_with": [722, 1314], "replic": [755, 851, 1355, 1373], "report": [154, 231, 356, 717, 1127, 1309, 1373], "repr": [140, 429, 433, 487, 1042, 1047, 1109], "repres": [38, 41, 42, 49, 72, 73, 75, 86, 90, 95, 133, 135, 137, 138, 139, 154, 280, 303, 304, 313, 314, 327, 334, 356, 361, 432, 517, 542, 543, 585, 591, 597, 695, 711, 716, 720, 721, 724, 735, 763, 766, 783, 795, 797, 811, 812, 813, 822, 827, 828, 832, 840, 847, 851, 928, 929, 937, 970, 976, 1046, 1271, 1287, 1303, 1308, 1312, 1313, 1316, 1327, 1353, 1363, 1373, 1401], "represent": [11, 45, 46, 72, 73, 75, 90, 140, 296, 312, 356, 429, 431, 432, 433, 457, 462, 465, 468, 469, 470, 471, 472, 473, 476, 478, 479, 483, 496, 497, 499, 612, 755, 851, 884, 900, 922, 970, 1042, 1045, 1046, 1047, 1048, 1075, 1080, 1083, 1085, 1086, 1090, 1091, 1092, 1094, 1095, 1098, 1100, 1101, 1105, 1118, 1119, 1121, 1350, 1355, 1373, 1392], "request": 35, "requested_schema": [210, 979], "requir": [1, 33, 34, 35, 40, 41, 58, 66, 138, 143, 154, 155, 176, 177, 178, 179, 192, 221, 227, 289, 313, 314, 315, 318, 356, 407, 429, 433, 503, 505, 506, 590, 639, 663, 665, 667, 669, 671, 674, 676, 678, 682, 685, 734, 736, 737, 759, 775, 777, 781, 783, 826, 851, 866, 876, 881, 882, 883, 927, 938, 970, 1020, 1126, 1128, 1130, 1131, 1216, 1272, 1277, 1312, 1326, 1328, 1329, 1353, 1354, 1359, 1373], "require_al": 976, "require_http": 192, "rerais": [65, 874, 970], "rerun": [233, 356, 1134, 1373], "resampl": [245, 356, 892, 970], "reset": [4, 207], "reset_index": [138, 245, 356, 892, 970], "reshap": [280, 314, 356, 562, 778, 851, 1188, 1373], "resolv": [149, 236, 356, 458, 589, 875, 876, 883, 919, 938, 970], "resourc": [945, 974], "respect": [41, 152, 167, 265, 280, 356, 698, 708, 710, 722, 903, 970, 976, 1290, 1300, 1302, 1314, 1356, 1373], "respons": [155, 272, 356, 908, 970], "rest": [742, 1334, 1396], "restor": [207, 356, 359, 1373, 1378], "restore_default": 207, "restrict": [31, 727, 1319], "result": [14, 38, 45, 46, 47, 49, 50, 51, 52, 58, 66, 137, 138, 139, 154, 155, 157, 167, 170, 172, 173, 187, 233, 236, 245, 246, 259, 260, 261, 276, 280, 284, 288, 291, 296, 297, 299, 313, 314, 315, 326, 333, 335, 341, 356, 454, 482, 484, 487, 495, 503, 504, 505, 506, 510, 517, 526, 534, 547, 588, 589, 597, 598, 612, 639, 644, 646, 653, 654, 655, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 704, 721, 725, 726, 737, 758, 762, 785, 786, 790, 792, 793, 794, 795, 810, 811, 812, 823, 826, 827, 828, 830, 841, 842, 851, 869, 873, 878, 888, 892, 896, 897, 898, 902, 912, 915, 918, 922, 923, 924, 943, 946, 952, 963, 964, 970, 976, 985, 1104, 1106, 1109, 1117, 1128, 1130, 1131, 1134, 1135, 1150, 1157, 1173, 1214, 1223, 1242, 1244, 1251, 1252, 1253, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1274, 1276, 1296, 1317, 1318, 1329, 1353, 1354, 1362, 1373, 1383, 1389, 1396, 1401, 1402, 1404], "resultset": 154, "retain": [236, 284, 356, 888, 915, 970], "retri": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 197, 356, 970], "retriev": [192, 193, 197, 240, 313, 356, 387, 388, 554, 555, 745, 822, 1000, 1001, 1180, 1181, 1337, 1351, 1373, 1389], "return": [1, 5, 6, 31, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 97, 110, 113, 121, 129, 132, 133, 135, 136, 137, 138, 139, 141, 142, 147, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 189, 190, 197, 209, 212, 215, 217, 220, 221, 222, 226, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 243, 244, 245, 247, 248, 249, 253, 255, 256, 257, 258, 259, 262, 263, 264, 265, 267, 269, 274, 275, 276, 278, 279, 280, 285, 288, 289, 290, 291, 292, 296, 303, 306, 307, 313, 314, 315, 318, 319, 320, 321, 326, 329, 330, 331, 337, 339, 341, 342, 345, 350, 356, 369, 371, 374, 375, 376, 377, 378, 379, 382, 383, 387, 388, 389, 391, 393, 394, 405, 410, 411, 412, 413, 414, 415, 416, 426, 427, 431, 432, 437, 438, 439, 440, 441, 447, 448, 454, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 504, 509, 517, 520, 521, 523, 527, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 554, 555, 557, 562, 564, 566, 567, 568, 570, 577, 587, 588, 595, 597, 598, 610, 612, 613, 614, 619, 643, 645, 646, 648, 652, 653, 654, 655, 657, 658, 681, 682, 687, 688, 689, 696, 697, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 723, 724, 725, 726, 727, 735, 739, 744, 751, 752, 753, 754, 756, 757, 758, 760, 761, 762, 765, 766, 771, 772, 773, 774, 775, 776, 777, 781, 782, 783, 784, 789, 790, 791, 792, 793, 794, 795, 798, 799, 801, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 823, 826, 829, 830, 833, 834, 836, 837, 838, 839, 841, 842, 851, 866, 868, 871, 873, 874, 876, 877, 878, 883, 884, 890, 892, 893, 896, 900, 901, 902, 903, 911, 912, 916, 918, 922, 925, 931, 932, 933, 938, 939, 940, 948, 950, 952, 956, 961, 963, 970, 975, 976, 978, 980, 983, 984, 985, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1018, 1020, 1023, 1024, 1025, 1027, 1028, 1039, 1040, 1044, 1045, 1046, 1048, 1053, 1059, 1060, 1066, 1067, 1072, 1073, 1075, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1127, 1129, 1133, 1134, 1139, 1144, 1151, 1152, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1188, 1190, 1192, 1193, 1194, 1196, 1203, 1213, 1214, 1221, 1223, 1228, 1237, 1243, 1244, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1270, 1272, 1280, 1288, 1289, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1315, 1316, 1317, 1318, 1319, 1327, 1331, 1336, 1343, 1344, 1347, 1354, 1357, 1358, 1360, 1361, 1362, 1364, 1373, 1382, 1383, 1387, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1399, 1401, 1402, 1403, 1404], "return_as_str": [243, 356, 614], "return_dtyp": [41, 264, 356, 361, 597, 598, 653, 654, 765, 799, 812, 813, 851, 1223, 1251, 1252, 1373], "return_typ": [313, 318, 356], "returns_scalar": [149, 597, 598, 799, 813, 851], "reus": [64, 207, 873, 884, 912, 925, 970], "reusabl": 207, "rev": [261, 356, 898, 970], "revers": [215, 231, 319, 356, 427, 441, 442, 443, 444, 445, 623, 625, 627, 757, 778, 784, 851, 868, 932, 970, 1040, 1060, 1061, 1062, 1063, 1064, 1358, 1373, 1391, 1394], "reverse_": 625, "reverse_a": 625, "reverse_b": 625, "revert": [7, 9, 11], "rfc": 152, "rhap": [708, 710, 1302], "rhapsodi": [708, 710, 1302], "right": [9, 11, 16, 17, 19, 28, 41, 74, 152, 153, 176, 177, 178, 179, 245, 259, 260, 288, 325, 356, 447, 503, 504, 505, 506, 534, 578, 579, 580, 581, 646, 659, 663, 665, 667, 669, 671, 674, 676, 678, 682, 690, 777, 790, 791, 793, 794, 809, 810, 838, 839, 841, 851, 892, 896, 897, 918, 936, 970, 1066, 1128, 1129, 1130, 1131, 1157, 1204, 1205, 1206, 1207, 1244, 1272, 1283, 1373, 1389, 1394], "right_left": [259, 325, 356, 896, 936, 970], "right_on": [259, 260, 325, 356, 896, 897, 936, 970], "rightmost": [682, 851, 1272, 1373, 1396], "rld": [729, 731, 1323], "rle": [658, 851, 1256, 1373], "rle_id": [657, 851, 1373], "rle_id_a": [658, 851], "rle_id_ab": [658, 851], "rmm": 945, "rn": [152, 153, 167], "role": [33, 155], "roll": [245, 356, 454, 474, 475, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 779, 827, 828, 851, 892, 970, 1072, 1096, 1097, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1373], "rollback": [475, 1097], "rolled_forward": 454, "rollforward": [474, 1096], "rolling_kurtosi": [851, 1373], "rolling_map": [851, 1373], "rolling_max": [851, 1373], "rolling_max_bi": 851, "rolling_mean": [851, 1373], "rolling_mean_bi": 851, "rolling_median": [851, 1373], "rolling_median_bi": 851, "rolling_min": [851, 1373], "rolling_min_bi": 851, "rolling_quantil": [851, 1373], "rolling_quantile_bi": 851, "rolling_row_max": [663, 851], "rolling_row_mean": [665, 851], "rolling_row_median": [667, 851], "rolling_row_min": [669, 851], "rolling_row_quantil": [671, 851], "rolling_row_std": [674, 851], "rolling_row_sum": [676, 851], "rolling_row_var": [678, 851], "rolling_skew": [851, 1373], "rolling_std": [851, 1373], "rolling_std_bi": 851, "rolling_sum": [661, 851, 1258, 1373], "rolling_sum_bi": 851, "rolling_var": [851, 1373], "rolling_var_bi": 851, "rollinggroupbi": [288, 356], "ronaldo": [705, 1297], "root": [156, 168, 434, 611, 622, 623, 625, 627, 629, 630, 694, 850, 851, 1050, 1286, 1373, 1395], "rotat": [356, 359, 1373, 1378], "round": [21, 41, 60, 140, 154, 356, 435, 439, 516, 680, 753, 851, 1051, 1141, 1269, 1373, 1394], "round_sig_fig": [851, 1373], "round_str": 1104, "round_td": 1104, "rounded_corn": 21, "roundmod": [679, 851, 1268, 1373], "row": [15, 21, 26, 38, 39, 41, 47, 49, 52, 54, 58, 59, 61, 66, 107, 113, 121, 129, 136, 137, 138, 139, 140, 147, 148, 152, 153, 154, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 176, 177, 183, 212, 213, 215, 216, 217, 227, 228, 233, 236, 238, 239, 243, 244, 245, 246, 247, 248, 252, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 271, 272, 276, 280, 284, 288, 291, 292, 301, 307, 310, 312, 313, 318, 319, 321, 323, 324, 325, 332, 333, 337, 339, 341, 342, 350, 356, 360, 382, 383, 391, 406, 427, 428, 509, 517, 521, 527, 551, 552, 553, 562, 586, 589, 639, 640, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 691, 693, 704, 713, 752, 757, 771, 774, 780, 782, 799, 803, 805, 806, 808, 810, 825, 827, 828, 836, 851, 868, 871, 881, 882, 888, 889, 890, 892, 893, 896, 897, 898, 899, 901, 902, 907, 908, 915, 926, 931, 932, 933, 935, 936, 942, 943, 948, 950, 952, 953, 961, 970, 980, 995, 998, 999, 1004, 1017, 1133, 1134, 1144, 1151, 1177, 1178, 1179, 1188, 1212, 1239, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1284, 1296, 1305, 1344, 1373, 1382, 1389, 1391, 1402, 1403, 1404], "row_count_nam": [152, 153, 158, 160, 164, 167, 170, 171, 172], "row_count_offset": [152, 153, 158, 160, 164, 167, 170, 171, 172], "row_group": [164, 172], "row_group_s": [47, 52, 356, 970], "row_height": [41, 356], "row_idx": 213, "row_index": [41, 356], "row_index_nam": [152, 153, 158, 160, 162, 164, 167, 170, 171, 172], "row_index_offset": [152, 153, 158, 160, 162, 164, 167, 170, 171, 172], "row_nr": [332, 356, 942, 970], "row_tot": [41, 356], "rowname_col": [356, 360], "rows_by_kei": [257, 290, 309, 356], "rowserror": [289, 356], "rowtotalsdefinit": [41, 356], "rtol": [176, 177, 178, 179], "rtrim": 1394, "ru": 1396, "rule": [152, 164, 167, 172, 238, 265, 356, 698, 722, 737, 903, 970, 1290, 1314, 1329], "run": [49, 50, 51, 52, 64, 65, 73, 97, 132, 154, 183, 186, 187, 188, 244, 259, 262, 264, 295, 321, 331, 342, 356, 432, 446, 561, 597, 598, 657, 658, 716, 829, 851, 873, 874, 884, 891, 896, 902, 907, 912, 914, 921, 925, 933, 940, 945, 970, 974, 976, 1046, 1065, 1187, 1223, 1255, 1256, 1308, 1373, 1401, 1404], "runtim": 974, "runtimeerror": [314, 356, 1353, 1373], "rust": [38, 47, 49, 103, 115, 149, 157, 158, 160, 164, 264, 342, 356, 707, 970, 974, 1223, 1299, 1373], "s1": [57, 98, 100, 178, 179, 238, 356, 777, 781, 783, 1019, 1125, 1126, 1146, 1172, 1182, 1215, 1235, 1247, 1364, 1373], "s2": [1, 57, 98, 100, 178, 179, 238, 356, 777, 781, 783, 1019, 1052, 1069, 1125, 1126, 1146, 1163, 1172, 1182, 1215, 1229, 1235, 1247, 1364, 1373], "s3": [1, 40, 156, 168, 169, 172, 173, 356, 914, 970, 1019, 1215, 1373], "s_": 487, "s_bar": 1391, "s_dt": [487, 1396, 1397], "s_dt1": 1396, "s_dt2": 1396, "s_dtm": 487, "s_foo": 1391, "s_from_str_repr": [1350, 1373], "s_head_5": 711, "s_head_n": 711, "s_tail_5": 735, "s_tail_n": 735, "s_td": 487, "s_tm": [487, 1396, 1397], "safe": [651, 851, 1248, 1373], "sale": [639, 851], "salesforce_format": 200, "sam": 13, "same": [21, 40, 41, 55, 57, 58, 64, 65, 66, 98, 100, 116, 158, 167, 176, 177, 178, 179, 181, 207, 213, 227, 228, 234, 235, 236, 244, 260, 264, 280, 284, 290, 291, 302, 321, 330, 331, 335, 342, 356, 365, 372, 405, 431, 452, 453, 487, 511, 512, 513, 517, 519, 520, 523, 588, 602, 608, 639, 653, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 686, 693, 704, 715, 747, 841, 847, 851, 873, 874, 881, 882, 886, 887, 888, 891, 897, 900, 902, 915, 925, 927, 933, 939, 940, 946, 970, 976, 981, 1018, 1045, 1070, 1071, 1076, 1109, 1136, 1137, 1214, 1223, 1251, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1296, 1307, 1364, 1373, 1387, 1389, 1397], "samoa": [455, 1073], "sampl": [152, 153, 342, 356, 686, 690, 809, 810, 851, 953, 1283, 1373, 1390], "sample_s": [152, 153], "sampled_from": 1404, "sandwich": [241, 356], "sat": [356, 359], "satisfi": [534, 851, 1157, 1373], "saturdai": [245, 356, 892, 970], "save": [2, 3, 6, 245, 260, 288, 326, 356, 455, 463, 477, 482, 495, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 795, 838, 839, 847, 851, 863, 892, 897, 918, 970, 1081, 1099, 1104, 1117], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [149, 212, 213, 255, 264, 289, 299, 356, 432, 597, 682, 684, 711, 716, 724, 735, 799, 811, 813, 851, 924, 970, 980, 1046, 1172, 1272, 1276, 1303, 1308, 1316, 1327, 1373], "scale": [29, 74, 231, 356, 415, 598, 643, 679, 738, 851, 976, 1127, 1330, 1373], "scale_negative_even": [643, 851], "scan": [56, 136, 139, 152, 153, 154, 157, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 197, 356, 713, 863, 970, 1305], "scan_csv": [49, 50, 51, 52, 152, 153, 970], "scan_ipc": 158, "scan_ndjson": 162, "scan_parquet": [53, 54, 55, 164, 166, 173, 914, 970], "scan_pyarrow_dataset": [164, 172], "scan_tabl": 205, "scancastopt": 172, "scatter": [356, 359, 1373, 1378], "scenario": 1373, "schedul": [65, 874, 970], "schema": [0, 1, 15, 29, 36, 39, 40, 56, 59, 60, 61, 66, 97, 107, 124, 125, 133, 135, 136, 137, 139, 147, 148, 152, 153, 154, 155, 157, 159, 161, 162, 163, 164, 166, 167, 170, 171, 172, 193, 195, 196, 197, 201, 203, 217, 218, 219, 225, 229, 231, 258, 262, 264, 265, 272, 276, 285, 314, 318, 356, 361, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 461, 588, 589, 609, 610, 613, 614, 624, 626, 628, 713, 765, 833, 851, 863, 871, 872, 875, 876, 880, 883, 902, 903, 908, 916, 938, 953, 970, 976, 1055, 1305, 1373, 1382], "schema_mod": [40, 356], "schema_overrid": [133, 135, 136, 137, 138, 139, 152, 153, 154, 155, 157, 161, 162, 163, 167, 171, 258, 314, 356, 679, 851, 970, 976], "schemadefinit": [133, 135, 136, 137, 139, 161, 162, 171, 356, 970], "schemadict": [89, 97, 133, 135, 136, 137, 138, 139, 147, 152, 154, 155, 157, 163, 164, 167, 170, 172, 265, 356, 361, 610, 613, 614, 833, 902, 903, 953, 970], "schemaerror": [265, 356, 903, 970], "schemainitdatatyp": 975, "scheme": [53, 54, 55], "schindler": 1382, "scientif": [12, 38, 49, 356, 970], "scikit": [318, 356], "scipi": [547, 690, 851, 1173, 1283, 1373], "scope": [34, 35, 207, 862, 976, 1385, 1388, 1401], "score": [41, 280, 356], "script": [356, 359, 1373, 1378], "scroll": [41, 356], "sdiff": 580, "sdk": 192, "search": [260, 356, 589, 698, 708, 710, 722, 897, 927, 970, 1154, 1290, 1300, 1302, 1314, 1373], "search_sort": [851, 1373], "searchsortedsid": [682, 851, 1272, 1373], "searchstrategi": [180, 182, 183, 184, 185, 187], "season": [720, 721], "sec": [1397, 1404], "second": [38, 49, 162, 167, 170, 171, 176, 177, 178, 179, 245, 260, 288, 326, 356, 465, 469, 471, 472, 476, 477, 480, 482, 487, 494, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 720, 721, 734, 737, 792, 793, 794, 795, 837, 838, 839, 851, 892, 897, 918, 970, 976, 1099, 1102, 1104, 1116, 1117, 1129, 1312, 1313, 1326, 1329, 1373, 1396, 1397, 1402, 1404], "second_part": [726, 727, 1318, 1319], "seconds_diff": 494, "secret": [169, 172], "section": [280, 356, 697, 705, 706, 709, 720, 721, 790, 791, 793, 794, 838, 839, 974, 1289, 1297, 1298, 1301, 1312, 1313], "secur": [449, 851, 879, 970], "see": [38, 40, 41, 43, 44, 47, 49, 50, 51, 52, 73, 147, 149, 154, 155, 156, 157, 158, 160, 162, 164, 167, 168, 169, 170, 171, 172, 176, 177, 178, 179, 183, 187, 197, 209, 221, 236, 245, 259, 279, 280, 284, 325, 356, 360, 420, 421, 423, 424, 436, 487, 512, 547, 597, 690, 697, 705, 706, 709, 711, 720, 721, 735, 790, 791, 793, 794, 825, 838, 839, 847, 851, 888, 892, 915, 936, 945, 970, 974, 976, 978, 1033, 1034, 1036, 1037, 1054, 1109, 1173, 1283, 1289, 1297, 1298, 1301, 1303, 1312, 1313, 1327, 1373, 1404], "seed": [97, 174, 246, 292, 356, 526, 577, 649, 681, 686, 851, 1150, 1203, 1246, 1270, 1279, 1373], "seed_1": [246, 356, 526, 851, 1150, 1373], "seed_2": [246, 356, 526, 851, 1150, 1373], "seed_3": [246, 356, 526, 851, 1150, 1373], "seen": [487, 1109], "seen_group": 153, "select": [1, 8, 39, 49, 50, 51, 52, 58, 59, 60, 61, 64, 65, 97, 104, 150, 152, 153, 154, 155, 156, 158, 160, 164, 167, 169, 173, 182, 212, 214, 255, 256, 260, 264, 276, 279, 289, 295, 301, 303, 316, 322, 326, 333, 356, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 391, 396, 397, 398, 403, 404, 405, 406, 407, 408, 410, 413, 416, 417, 422, 425, 426, 427, 430, 434, 435, 437, 438, 439, 440, 446, 448, 450, 451, 452, 453, 456, 458, 459, 468, 474, 475, 477, 481, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 503, 505, 506, 507, 508, 509, 510, 514, 516, 521, 525, 526, 527, 528, 529, 530, 531, 532, 536, 537, 540, 546, 547, 548, 550, 551, 561, 562, 589, 592, 593, 594, 595, 597, 599, 600, 601, 605, 617, 619, 621, 622, 624, 626, 628, 631, 632, 636, 637, 638, 639, 641, 642, 645, 647, 648, 649, 650, 651, 652, 655, 656, 657, 660, 661, 672, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 704, 705, 706, 707, 708, 709, 710, 712, 717, 734, 745, 747, 748, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 766, 768, 770, 773, 774, 775, 778, 779, 781, 782, 783, 787, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 814, 816, 818, 819, 821, 822, 825, 826, 830, 831, 832, 833, 834, 836, 840, 847, 851, 866, 867, 873, 874, 876, 884, 897, 911, 912, 921, 925, 926, 928, 934, 941, 943, 945, 970, 976, 980, 1103, 1143, 1187, 1271, 1273, 1284, 1302, 1306, 1326, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403], "select_from": [182, 185, 187], "select_seq": [356, 970], "selector": [0, 41, 216, 225, 227, 228, 232, 271, 278, 280, 302, 311, 313, 318, 321, 323, 324, 356, 360, 487, 507, 605, 851, 863, 870, 880, 881, 882, 885, 907, 927, 933, 935, 970], "selectortyp": [41, 356, 976], "self": [1, 59, 60, 61, 62, 64, 303, 334, 356, 830, 851, 873, 884, 912, 925, 928, 941, 970, 985, 1031, 1032, 1033, 1034, 1036, 1037, 1041, 1055, 1060, 1134, 1138, 1153, 1221, 1223, 1236, 1240, 1241, 1247, 1250, 1251, 1252, 1271, 1273, 1274, 1285, 1361, 1364, 1373, 1384, 1385, 1386, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1401], "semi": [148, 259, 356, 896, 970, 1389], "semigraph": 21, "sens": [152, 158, 160, 272, 326, 356, 639, 851, 908, 970], "sensit": [697, 706, 709, 720, 721, 1289, 1298, 1301, 1312, 1313], "sep": 148, "separ": [9, 11, 25, 28, 37, 38, 49, 142, 148, 151, 152, 153, 157, 167, 278, 280, 311, 320, 322, 356, 391, 394, 487, 562, 568, 598, 704, 780, 785, 786, 851, 925, 934, 970, 1004, 1007, 1109, 1188, 1194, 1296, 1342, 1348, 1373, 1396], "seq": 27, "seq1": 27, "seq2": 27, "sequenc": [41, 47, 52, 53, 55, 58, 89, 133, 135, 136, 137, 139, 143, 148, 152, 153, 154, 157, 161, 162, 163, 167, 171, 181, 182, 183, 184, 185, 213, 215, 223, 232, 233, 259, 260, 271, 276, 278, 279, 280, 291, 302, 311, 313, 318, 319, 323, 324, 325, 326, 356, 406, 427, 447, 520, 539, 589, 597, 643, 646, 653, 654, 693, 722, 732, 733, 747, 757, 774, 785, 786, 799, 801, 809, 810, 812, 813, 822, 825, 831, 851, 868, 878, 885, 896, 897, 907, 911, 927, 932, 935, 936, 970, 976, 1019, 1040, 1066, 1067, 1134, 1215, 1244, 1251, 1252, 1314, 1340, 1358, 1373], "sequenti": [64, 295, 331, 356, 873, 884, 912, 921, 925, 940, 970], "ser": [1078, 1079, 1107], "seri": [0, 1, 12, 26, 41, 57, 59, 60, 61, 62, 66, 67, 76, 89, 98, 100, 109, 133, 135, 138, 140, 149, 176, 178, 179, 183, 212, 213, 226, 236, 238, 240, 242, 245, 246, 249, 250, 251, 252, 254, 256, 267, 269, 274, 284, 286, 288, 292, 306, 309, 311, 312, 314, 316, 317, 336, 356, 372, 383, 406, 410, 429, 430, 431, 432, 433, 435, 481, 510, 513, 516, 520, 521, 531, 532, 533, 537, 539, 540, 542, 543, 544, 545, 556, 562, 564, 589, 595, 597, 598, 649, 650, 651, 652, 653, 654, 659, 661, 672, 683, 685, 711, 722, 734, 735, 736, 737, 741, 745, 756, 761, 771, 775, 777, 778, 781, 783, 785, 786, 790, 791, 793, 794, 799, 801, 805, 806, 809, 810, 811, 812, 813, 823, 825, 826, 829, 830, 833, 838, 839, 842, 851, 863, 888, 892, 895, 915, 918, 947, 970, 1365, 1367, 1369, 1372, 1374, 1377, 1378, 1379, 1380, 1381, 1383, 1385, 1396, 1401, 1404], "serial": [45, 46, 224, 356, 449, 616, 851, 879, 970], "serializ": [149, 851], "serializationformat": [224, 296, 356, 449, 612, 851, 879, 922, 970], "seriesplot": [1373, 1378], "server": [39, 154, 155, 356], "servic": 33, "service_account": [156, 168], "service_account_json_absolute_path": [156, 168], "session": 154, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 38, 39, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 58, 59, 64, 65, 70, 73, 74, 76, 134, 135, 136, 139, 149, 152, 153, 154, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 197, 207, 211, 220, 227, 228, 237, 240, 244, 246, 257, 259, 260, 269, 271, 290, 292, 294, 296, 301, 306, 311, 313, 314, 318, 320, 321, 323, 324, 325, 330, 356, 359, 369, 371, 393, 394, 406, 418, 420, 421, 423, 424, 436, 447, 480, 481, 498, 526, 539, 564, 566, 568, 577, 578, 579, 580, 581, 583, 589, 597, 598, 605, 606, 612, 643, 646, 653, 654, 660, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 681, 686, 690, 691, 696, 712, 713, 720, 721, 724, 729, 730, 731, 732, 733, 734, 736, 737, 741, 762, 766, 768, 771, 775, 777, 780, 781, 783, 790, 791, 792, 793, 794, 795, 799, 805, 806, 809, 810, 811, 817, 823, 826, 827, 828, 829, 833, 835, 838, 839, 841, 842, 851, 863, 873, 874, 881, 884, 891, 896, 897, 902, 907, 912, 920, 922, 925, 926, 933, 935, 936, 939, 944, 953, 970, 983, 984, 1006, 1007, 1019, 1024, 1031, 1033, 1034, 1036, 1037, 1054, 1066, 1102, 1103, 1120, 1140, 1150, 1163, 1170, 1190, 1192, 1194, 1203, 1204, 1205, 1206, 1207, 1209, 1215, 1223, 1244, 1251, 1252, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1270, 1271, 1272, 1279, 1283, 1284, 1288, 1304, 1305, 1312, 1313, 1316, 1321, 1322, 1323, 1326, 1328, 1329, 1333, 1353, 1362, 1373, 1392, 1400, 1404], "set_": 207, "set_auto_structifi": [294, 330, 356, 920, 939, 970], "set_decimal_separ": 28, "set_environ": 186, "set_except": [65, 874, 970], "set_fmt_float": 31, "set_fmt_str_length": [698, 708, 710, 722, 1290, 1302, 1314], "set_index": [245, 356, 892, 970], "set_legend": [41, 356], "set_sort": [288, 326, 356, 659, 851, 918, 970, 1373], "set_stat": 31, "set_streaming_chunk_s": [873, 970], "set_styl": [41, 356], "set_tbl_column_data_type_inlin": 25, "set_tbl_format": [7, 58], "set_tbl_row": 207, "set_tbl_width_char": 722, "set_thousands_separ": 9, "set_titl": [41, 356], "set_verbos": 207, "setosa": [356, 359], "setup": 1404, "seventeen": [530, 851], "sever": [133, 135, 136, 137, 139, 161, 162, 171, 356, 914, 970, 1404], "sfu": 155, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 57, 58, 59, 60, 61, 62, 66, 67, 85, 89, 97, 98, 100, 107, 126, 133, 134, 135, 136, 137, 138, 139, 140, 148, 152, 161, 162, 167, 173, 176, 178, 180, 183, 187, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 240, 242, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 292, 294, 296, 299, 301, 302, 303, 304, 305, 306, 307, 309, 311, 312, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 617, 618, 619, 620, 621, 622, 623, 625, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 851, 866, 867, 868, 870, 871, 873, 874, 877, 878, 879, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 943, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 970, 975, 976, 980, 981, 982, 985, 987, 988, 989, 990, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1125, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1143, 1144, 1146, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1228, 1235, 1236, 1237, 1239, 1240, 1241, 1242, 1244, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1276, 1277, 1279, 1280, 1281, 1282, 1284, 1285, 1286, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1342, 1344, 1345, 1346, 1348, 1349, 1350, 1355, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1373, 1382, 1383, 1384, 1385, 1387, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1401, 1402], "share": [176, 177, 178, 179, 231, 356, 1127, 1373], "shawshank": 1382, "sheet": [41, 157, 163, 356], "sheet1": [41, 356], "sheet_id": [157, 163], "sheet_nam": [157, 163], "sheet_zoom": [41, 356], "sheetnam": [157, 163], "shift": [245, 356, 409, 450, 518, 559, 640, 779, 851, 892, 970, 1022, 1068, 1142, 1185, 1239, 1373], "short": [176, 178, 414, 1027], "shorten": [176, 178], "shorter": [152, 153, 167, 589, 805, 806], "shorthand": [356, 359, 841, 1373, 1378], "should": [11, 39, 41, 47, 49, 50, 51, 52, 66, 97, 133, 135, 137, 139, 147, 148, 157, 161, 162, 167, 169, 171, 173, 180, 181, 183, 187, 213, 225, 257, 259, 260, 264, 289, 290, 291, 302, 310, 311, 322, 342, 356, 367, 446, 449, 454, 498, 504, 507, 535, 542, 543, 561, 598, 612, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 690, 693, 720, 721, 738, 762, 774, 776, 795, 797, 811, 813, 827, 828, 847, 851, 873, 879, 880, 884, 896, 897, 902, 912, 922, 925, 927, 934, 970, 976, 1065, 1072, 1120, 1129, 1158, 1187, 1223, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1272, 1283, 1312, 1313, 1330, 1362, 1373, 1383], "show": [31, 41, 223, 228, 243, 262, 277, 356, 528, 613, 851, 878, 912, 925, 970, 1152, 1373, 1387, 1400], "show_graph": [262, 356, 970], "show_plot": [912, 970], "shrink": [300, 356, 685, 851, 1277, 1278, 1373], "shrink_dtyp": [851, 1373], "shrink_to_fit": [356, 1373], "shuffl": [174, 292, 318, 342, 356, 577, 681, 851, 953, 1203, 1270, 1373], "side": [41, 149, 245, 288, 356, 534, 578, 579, 580, 581, 659, 663, 665, 667, 669, 671, 674, 676, 678, 682, 790, 791, 793, 794, 809, 810, 838, 839, 851, 892, 918, 970, 1157, 1204, 1205, 1206, 1207, 1272, 1373], "sign": [72, 73, 75, 80, 81, 82, 83, 84, 90, 477, 651, 720, 721, 744, 851, 976, 1099, 1248, 1312, 1313, 1336, 1373, 1394], "sign_x": 1395, "signed_integ": 976, "signific": [172, 257, 264, 356, 420, 421, 423, 424, 598, 680, 851, 1033, 1034, 1036, 1037, 1223, 1269, 1373], "significantli": [157, 264, 342, 356, 1223, 1373, 1404], "silenc": 107, "silent": [56, 172, 739, 1331], "similar": [37, 47, 56, 151, 189, 213, 238, 260, 299, 321, 323, 356, 401, 484, 487, 582, 639, 684, 749, 808, 841, 851, 888, 897, 924, 933, 935, 970, 1014, 1106, 1109, 1208, 1276, 1373], "similarli": [41, 136, 245, 260, 288, 326, 356, 477, 482, 495, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 838, 839, 851, 892, 897, 918, 970, 1099, 1104, 1117], "simpl": [41, 276, 356], "simpler": [976, 1312], "simpli": [167, 785, 799, 1048], "simplifi": [64, 873, 884, 912, 925, 970], "simplify_express": [64, 873, 884, 912, 925, 944, 970], "sin": [851, 1373, 1394], "sinc": [40, 64, 67, 72, 73, 90, 152, 153, 154, 156, 162, 164, 167, 168, 170, 171, 172, 180, 181, 182, 183, 187, 190, 214, 271, 314, 332, 337, 356, 461, 464, 498, 519, 597, 598, 616, 653, 696, 704, 764, 773, 781, 801, 851, 867, 873, 884, 907, 912, 925, 927, 941, 942, 948, 970, 1079, 1082, 1088, 1089, 1120, 1149, 1251, 1288, 1296, 1353, 1373], "sind": 1394, "sine": [376, 377, 597, 688, 689, 851, 989, 990, 1281, 1282, 1373, 1398], "singl": [41, 47, 58, 65, 66, 77, 151, 152, 153, 154, 155, 156, 157, 164, 167, 168, 170, 181, 213, 216, 225, 226, 227, 228, 233, 240, 246, 255, 261, 264, 278, 289, 291, 302, 313, 314, 356, 390, 432, 436, 454, 477, 520, 523, 526, 558, 564, 597, 598, 650, 653, 655, 657, 693, 696, 711, 712, 716, 724, 735, 764, 774, 778, 779, 780, 806, 810, 812, 813, 831, 839, 841, 847, 851, 870, 880, 881, 882, 898, 927, 970, 976, 1003, 1046, 1054, 1072, 1099, 1134, 1150, 1184, 1190, 1247, 1251, 1253, 1255, 1288, 1303, 1304, 1308, 1316, 1327, 1347, 1353, 1373, 1384], "singlecolselector": 212, "singleindexselector": [212, 980], "sinh": [851, 1373], "sink": 864, "sink_": [53, 55], "sink_csv": [53, 54, 55, 970], "sink_ipc": 970, "sink_ndjson": 970, "sink_parquet": [53, 143, 970], "site_id": [356, 360], "six": [682, 851], "size": [15, 47, 52, 54, 147, 152, 153, 154, 180, 181, 182, 183, 187, 189, 231, 324, 356, 495, 589, 655, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 771, 805, 806, 827, 828, 851, 873, 970, 1117, 1127, 1253, 1257, 1264, 1373, 1404], "sizeunit": [231, 356, 415, 1028, 1127, 1373], "skew": [672, 851, 1264, 1373], "skewtest": [690, 851, 1283, 1373], "skip": [152, 153, 157, 164, 167, 172, 260, 324, 356, 897, 970, 1223, 1373, 1389], "skip_empty_lin": 157, "skip_lin": [152, 167], "skip_nul": [598, 851, 1223, 1373], "skip_row": [152, 153, 167], "skip_rows_after_head": [152, 153, 167], "sklearn": [318, 356], "slice": [59, 64, 149, 231, 247, 258, 307, 356, 567, 587, 609, 611, 661, 662, 664, 666, 668, 670, 673, 675, 677, 711, 735, 851, 866, 873, 884, 902, 912, 925, 970, 1127, 1151, 1193, 1213, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1303, 1327, 1344, 1373, 1396], "slice_pushdown": [64, 873, 884, 902, 912, 925, 944, 970], "slide": [446, 851, 1065, 1373], "slightli": [49, 50, 51, 52, 103, 517, 851, 970, 1397], "slot": [446, 450, 559, 851, 1065, 1068, 1185, 1373], "slow": [119, 136, 139, 152, 153, 154, 157, 161, 162, 163, 167, 171, 172, 356, 446, 598, 661, 713, 851, 953, 970, 1065, 1258, 1305, 1373], "slower": [137, 139, 157, 244, 264, 278, 326, 342, 356, 598, 813, 851, 891, 953, 970, 1223, 1373], "small": [12, 155, 482, 970, 1404], "smaller": [47, 52, 54, 231, 356, 970, 1127, 1373], "smallest": [215, 319, 356, 426, 427, 757, 851, 868, 932, 970, 1039, 1040, 1358, 1373, 1390, 1393], "smooth": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "snappi": [36, 47, 52, 356, 970], "snapshot": 169, "snapshot_id": 169, "snowflak": [154, 155], "snowflake_format": 200, "snowi": [720, 721], "so": [1, 41, 155, 157, 167, 189, 207, 243, 245, 261, 280, 288, 356, 383, 393, 449, 517, 534, 566, 589, 598, 659, 720, 721, 722, 729, 730, 731, 745, 851, 866, 879, 892, 898, 918, 970, 976, 1006, 1192, 1312, 1313, 1314, 1321, 1322, 1323], "softwar": [37, 151, 356], "solut": [39, 356], "solv": [97, 147], "some": [15, 31, 41, 47, 52, 57, 66, 100, 136, 152, 153, 154, 167, 211, 228, 280, 291, 314, 356, 360, 720, 721, 847, 914, 970, 1163, 1312, 1313, 1373, 1404], "some_account": [706, 1298], "some_t": 1403, "someth": [597, 851], "sometim": [795, 850], "somewher": [706, 1298], "sort": [53, 54, 55, 58, 59, 215, 245, 260, 272, 279, 280, 288, 297, 319, 326, 339, 350, 356, 382, 426, 427, 504, 513, 598, 639, 659, 682, 683, 693, 756, 757, 762, 764, 774, 790, 793, 813, 851, 868, 884, 892, 897, 908, 911, 912, 918, 923, 925, 932, 950, 961, 970, 976, 995, 1039, 1040, 1129, 1170, 1272, 1274, 1357, 1358, 1359, 1362, 1373, 1389, 1402, 1404], "sort_bi": 851, "sort_column": [280, 356], "sorted": [260, 356, 897, 970], "sorted_asc": [1140, 1373], "sorted_desc": [1140, 1373], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 359, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 851, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 970, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1373, 1378, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1401], "source_ac": 140, "source_actor_id": 140, "source_alia": [40, 356], "source_cha": 140, "source_channel_id": 140, "south": 76, "space": [21, 245, 356, 487, 809, 810, 892, 970, 976, 1109], "spam": [268, 356, 706, 1298], "span": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "spanner": [356, 360], "spark": [47, 356], "sparklin": [41, 356], "speak": [690, 851, 1283, 1373], "spearman": 781, "speci": [356, 359], "special": [39, 55, 152, 153, 155, 167, 318, 333, 356, 661, 706, 720, 721, 851, 943, 970, 1223, 1258, 1298, 1312, 1313, 1373], "specif": [1, 31, 40, 41, 43, 44, 50, 103, 133, 135, 137, 139, 148, 152, 155, 156, 157, 161, 162, 163, 168, 169, 171, 213, 216, 257, 259, 265, 308, 313, 356, 361, 484, 487, 535, 734, 736, 737, 741, 762, 851, 870, 896, 903, 970, 975, 976, 1106, 1109, 1158, 1326, 1328, 1329, 1333, 1347, 1351, 1362, 1373, 1389, 1401, 1403, 1404], "specifi": [10, 38, 39, 40, 41, 47, 49, 58, 104, 107, 110, 125, 128, 152, 157, 163, 164, 167, 172, 184, 193, 195, 196, 197, 213, 215, 216, 231, 232, 235, 240, 244, 245, 259, 260, 278, 280, 288, 289, 291, 294, 295, 299, 302, 313, 319, 322, 330, 331, 335, 356, 427, 436, 480, 487, 503, 505, 506, 507, 512, 639, 652, 654, 662, 664, 666, 668, 670, 673, 675, 677, 684, 693, 749, 757, 774, 777, 778, 779, 780, 790, 791, 793, 794, 795, 797, 829, 833, 838, 839, 847, 851, 868, 870, 885, 887, 891, 892, 896, 897, 918, 920, 921, 924, 927, 932, 934, 939, 940, 946, 970, 976, 1040, 1054, 1102, 1109, 1127, 1128, 1130, 1131, 1137, 1250, 1252, 1276, 1351, 1358, 1373, 1389, 1396, 1403], "speed": [52, 297, 356, 598, 851, 923, 970, 974, 1404], "speedup": [58, 172, 257, 264, 356, 598, 851, 1223, 1373], "split": [1, 41, 47, 53, 54, 55, 59, 258, 356, 704, 726, 727, 1296, 1318, 1319, 1396], "split_by_column_dtyp": 61, "split_inclus": 725, "split_part": 1394, "splitfram": [1, 59], "spreadsheet": [37, 151, 157, 163, 280, 356], "spring": [720, 721], "sql": [0, 39, 122, 123, 131, 154, 155, 259, 299, 356, 401, 582, 684, 808, 831, 851, 863, 924, 970, 1014, 1208, 1276, 1373, 1382, 1383, 1385, 1387, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1399, 1402, 1403], "sql_expr": 1401, "sqlalchemi": [39, 154, 175, 356], "sqlcontext": [303, 356, 830, 928, 970, 1400], "sqldw_format": 200, "sqlite": [39, 154, 356], "sqrt": [598, 690, 749, 851, 1223, 1283, 1373, 1394], "sqrt_x": 1395, "squar": [1, 62, 342, 547, 655, 694, 851, 953, 1173, 1253, 1286, 1373, 1395], "st": [33, 1404], "stabil": [246, 356, 526, 851, 1150, 1373], "stabl": [164, 209, 221, 223, 224, 246, 292, 296, 303, 356, 449, 526, 594, 612, 755, 851, 878, 879, 907, 922, 927, 928, 970, 978, 1150, 1355, 1373], "stack": [66, 249, 328, 356, 359, 1383], "stage": [925, 970], "stai": [597, 686, 851], "standalon": [181, 976], "standard": [7, 11, 38, 41, 154, 304, 313, 318, 356, 468, 505, 673, 674, 690, 695, 714, 717, 832, 847, 851, 866, 929, 970, 1086, 1125, 1130, 1235, 1283, 1287, 1306, 1309, 1373, 1390, 1404], "standardis": [41, 356], "start": [41, 49, 50, 51, 52, 55, 150, 152, 153, 155, 157, 158, 160, 162, 163, 164, 167, 170, 171, 172, 189, 239, 244, 245, 262, 301, 326, 332, 333, 356, 410, 413, 416, 429, 433, 454, 462, 466, 473, 478, 482, 495, 496, 507, 521, 565, 583, 658, 663, 665, 667, 669, 671, 674, 676, 678, 691, 697, 702, 706, 710, 719, 724, 728, 729, 731, 732, 735, 744, 771, 776, 785, 789, 790, 791, 792, 793, 794, 797, 799, 805, 806, 809, 810, 838, 839, 841, 847, 851, 890, 891, 892, 912, 926, 942, 943, 970, 976, 1029, 1042, 1047, 1072, 1074, 1077, 1080, 1082, 1083, 1090, 1092, 1094, 1095, 1098, 1100, 1104, 1108, 1117, 1118, 1144, 1191, 1209, 1256, 1284, 1294, 1298, 1302, 1311, 1316, 1320, 1321, 1323, 1327, 1336, 1373, 1389, 1396, 1404], "start_bi": [245, 356, 892, 970], "startbi": [245, 356, 892, 970], "starts_a": 1396, "starts_with": [59, 280, 356, 360, 410, 413, 429, 605, 697, 702, 830, 928, 970, 976, 1042, 1294, 1394], "starts_with_expr": 416, "starts_with_lit": 416, "startup": [313, 356], "stat": [547, 690, 851, 1173, 1283, 1373], "state": [4, 5, 115, 785, 863, 1401], "statement": [639, 841, 851, 1387, 1402], "static": [48, 95, 953], "statist": [47, 52, 152, 153, 164, 170, 172, 223, 356, 505, 506, 547, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 690, 851, 878, 970, 1067, 1130, 1131, 1173, 1257, 1264, 1283, 1373], "std": [223, 356, 673, 674, 851, 878, 970, 1067, 1265, 1373], "std_dev": [41, 356], "stddev": 1394, "stddev_samp": 1390, "stdev": [41, 356, 1390], "stdev_samp": 1390, "stdout": [207, 243, 356, 614], "step": [324, 356, 517, 771, 805, 806, 851, 866], "steve": [272, 356, 908, 970], "still": [154, 155], "stock": [356, 359], "stop": [147, 150, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 663, 665, 667, 669, 671, 674, 676, 678, 851, 866, 1074, 1077, 1082, 1083, 1090, 1092, 1094, 1098, 1104, 1108], "storag": [38, 40, 43, 47, 49, 50, 51, 52, 152, 156, 158, 160, 162, 164, 167, 168, 169, 170, 171, 172, 197, 356, 970], "storage_loc": [198, 201, 202], "storage_opt": [38, 40, 43, 47, 49, 50, 51, 52, 152, 156, 158, 160, 162, 164, 166, 167, 168, 169, 170, 171, 172, 197, 356, 970], "store": [40, 169, 233, 257, 290, 356, 430, 657, 851, 1043, 1134, 1255, 1373], "store_id": [639, 851], "str": [1, 2, 3, 5, 6, 9, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 73, 76, 77, 99, 101, 132, 133, 134, 135, 136, 137, 139, 140, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 180, 181, 183, 186, 187, 188, 192, 193, 195, 196, 197, 198, 199, 201, 202, 207, 213, 215, 216, 220, 223, 224, 225, 226, 227, 228, 229, 231, 232, 236, 237, 238, 240, 241, 243, 244, 245, 247, 249, 250, 252, 254, 255, 257, 259, 260, 261, 263, 265, 266, 268, 270, 271, 272, 273, 276, 278, 280, 282, 284, 285, 286, 287, 288, 289, 290, 292, 296, 297, 301, 302, 303, 304, 305, 307, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 366, 367, 368, 389, 394, 406, 410, 411, 412, 413, 416, 417, 422, 425, 427, 429, 430, 433, 441, 447, 449, 451, 459, 477, 481, 482, 484, 487, 495, 504, 507, 513, 515, 519, 520, 523, 531, 534, 556, 566, 567, 568, 583, 587, 589, 598, 609, 611, 612, 613, 614, 616, 623, 624, 625, 626, 627, 628, 629, 630, 636, 639, 643, 646, 652, 653, 654, 656, 658, 659, 663, 665, 667, 669, 671, 674, 676, 678, 685, 692, 693, 745, 746, 747, 748, 757, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 779, 780, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 847, 851, 858, 868, 870, 873, 874, 876, 878, 879, 880, 881, 882, 884, 885, 888, 891, 892, 894, 896, 897, 898, 903, 907, 908, 911, 912, 915, 916, 917, 918, 922, 923, 925, 926, 927, 928, 932, 933, 934, 935, 936, 941, 942, 943, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 970, 975, 976, 982, 1007, 1019, 1025, 1041, 1042, 1043, 1047, 1066, 1067, 1077, 1099, 1103, 1104, 1106, 1109, 1117, 1129, 1137, 1140, 1182, 1194, 1215, 1231, 1232, 1233, 1244, 1249, 1251, 1252, 1273, 1337, 1339, 1340, 1348, 1349, 1350, 1351, 1362, 1373, 1379, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1393, 1396, 1397, 1401, 1402, 1404], "str_date": 1396, "str_timestamp": 1396, "str_valu": [53, 145], "strategi": [38, 49, 58, 66, 152, 172, 180, 181, 182, 183, 184, 185, 187, 235, 245, 259, 260, 275, 325, 326, 356, 409, 442, 445, 512, 518, 589, 598, 851, 864, 887, 892, 896, 897, 914, 936, 970, 1022, 1137, 1142, 1215, 1373], "stream": [10, 15, 43, 44, 49, 50, 51, 52, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 244, 259, 321, 356, 597, 851, 873, 884, 891, 896, 902, 907, 912, 925, 927, 933, 970], "streamabl": [902, 907, 935, 970], "streaming_t": 204, "strftime": [103, 487, 1109, 1394, 1396], "strict": [135, 136, 139, 148, 216, 225, 285, 356, 411, 428, 487, 697, 700, 709, 734, 736, 737, 739, 741, 851, 870, 880, 916, 970, 976, 1024, 1041, 1109, 1126, 1289, 1292, 1301, 1326, 1328, 1329, 1331, 1333, 1373], "strictli": [38, 49, 57, 100, 152, 260, 356, 897, 970], "string": [1, 2, 3, 5, 6, 13, 15, 16, 17, 21, 36, 38, 39, 40, 41, 45, 46, 49, 57, 70, 73, 76, 89, 96, 98, 100, 101, 103, 109, 127, 136, 140, 148, 152, 153, 154, 155, 167, 176, 177, 178, 179, 180, 187, 191, 215, 216, 219, 224, 229, 231, 238, 240, 243, 244, 245, 260, 265, 278, 280, 288, 291, 293, 294, 295, 296, 302, 312, 313, 319, 320, 324, 326, 330, 331, 335, 356, 366, 389, 394, 413, 427, 429, 431, 432, 433, 436, 449, 477, 482, 484, 487, 495, 504, 507, 515, 519, 534, 568, 612, 614, 639, 643, 653, 654, 659, 663, 665, 667, 669, 671, 674, 676, 678, 693, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 749, 757, 765, 767, 769, 774, 777, 778, 779, 780, 788, 790, 791, 793, 794, 800, 815, 817, 820, 829, 833, 835, 838, 839, 841, 847, 851, 863, 868, 870, 875, 879, 883, 884, 891, 892, 897, 903, 918, 919, 920, 921, 922, 927, 932, 939, 940, 946, 970, 975, 976, 1007, 1024, 1025, 1026, 1040, 1042, 1045, 1046, 1047, 1099, 1104, 1106, 1109, 1117, 1129, 1157, 1194, 1251, 1252, 1288, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1339, 1350, 1351, 1358, 1373, 1382, 1383, 1391, 1394, 1397, 1400, 1404], "string_to_arrai": 1394, "stringcach": [98, 100, 259, 356, 863], "stringio": [161, 162, 519, 851], "strings_hex": 701, "strip": [29, 729, 730, 731, 732, 733, 1321, 1322, 1323, 1396], "strip_chars_end": [731, 733], "strip_chars_start": [730, 732], "strip_prefix": [731, 733], "strip_suffix": [730, 732], "strongli": [41, 189, 264, 289, 342, 356, 598, 851, 1223, 1373], "strpo": 1394, "strptime": [288, 356, 481, 659, 851, 918, 970, 1103, 1394], "struct": [8, 56, 77, 128, 140, 143, 265, 276, 294, 317, 322, 330, 356, 406, 447, 528, 589, 597, 598, 624, 626, 628, 646, 657, 658, 707, 713, 726, 727, 755, 762, 785, 786, 788, 812, 841, 851, 903, 920, 934, 939, 953, 970, 1019, 1066, 1215, 1223, 1244, 1255, 1299, 1305, 1318, 1319, 1353, 1355, 1373], "struct_col": [745, 747, 748], "struct_seri": 953, "structarrai": [231, 356, 1127, 1373], "structfieldnotfounderror": 747, "structur": [41, 43, 44, 50, 109, 112, 126, 148, 213, 233, 279, 291, 308, 314, 356, 643, 851, 911, 970, 1134, 1347, 1373, 1401], "student": [280, 356], "style": [7, 21, 41, 53, 154, 280, 356], "sub": [342, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 408, 568, 575, 851, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1017, 1021, 1194, 1201], "subarrai": [385, 386, 998, 999], "subclass": [1, 356], "subexpress": [64, 873, 884, 912, 925, 970], "subinterv": 1390, "subject": [47, 169, 280, 356], "sublist": [393, 554, 555, 557, 559, 563, 564, 565, 566, 567, 568, 569, 578, 583, 587, 589, 1006, 1163, 1180, 1181, 1183, 1185, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1204, 1209, 1213, 1215, 1373], "subplan": [64, 132, 873, 884, 912, 925, 970], "subscript": 866, "subsequ": [41, 164, 172, 283, 315, 356, 589, 830, 841, 884, 970, 1354, 1373, 1388], "subset": [227, 228, 276, 321, 356, 881, 882, 933, 970], "substr": [410, 413, 416, 429, 433, 697, 702, 709, 720, 721, 724, 725, 726, 727, 728, 976, 1023, 1026, 1029, 1042, 1047, 1289, 1294, 1301, 1312, 1313, 1316, 1317, 1318, 1319, 1320, 1394], "subtl": [41, 356], "subtli": [517, 851], "subtract": [547, 750, 851, 1173, 1373], "succe": [152, 153, 167], "success": [699, 706, 1291, 1298], "successfulli": [53, 54, 55, 873, 884, 912, 925, 970], "suffer": 55, "suffix": [259, 260, 261, 294, 330, 335, 356, 368, 413, 427, 429, 542, 543, 544, 545, 603, 623, 625, 628, 629, 630, 656, 679, 702, 730, 733, 757, 851, 896, 897, 898, 920, 939, 941, 946, 970, 976, 1026, 1042, 1294, 1325], "suffix_field": [624, 626], "sugar": [325, 356, 653, 654, 722, 766, 768, 770, 782, 784, 787, 797, 802, 803, 804, 814, 816, 818, 819, 821, 823, 824, 829, 832, 834, 836, 840, 842, 851, 936, 970, 1251, 1252, 1286, 1314, 1373], "suggest": [356, 359, 1373, 1378], "suitabl": [58, 66, 154, 181, 264, 356, 598, 682, 851, 1223, 1272, 1373], "sum": [41, 97, 149, 231, 238, 244, 245, 255, 280, 288, 306, 335, 356, 444, 445, 449, 500, 513, 589, 598, 609, 611, 612, 613, 614, 615, 653, 654, 659, 675, 676, 764, 766, 778, 785, 787, 788, 799, 813, 825, 835, 851, 873, 874, 879, 884, 891, 892, 910, 912, 914, 918, 922, 925, 946, 970, 976, 1063, 1064, 1123, 1127, 1266, 1373, 1382, 1389, 1391, 1394, 1401], "sum_": [690, 851, 1283, 1373], "sum_a": [288, 356, 659, 851, 918, 970], "sum_horizont": [58, 356, 834], "summari": [223, 356, 878, 970, 1067, 1373, 1389], "summer": [720, 721], "sun": [356, 359, 734, 1326], "sundai": [245, 356, 454, 466, 484, 487, 497, 776, 892, 970, 1072, 1084, 1106, 1109, 1119], "sunni": [720, 721, 1312, 1313], "supercast": [238, 356], "supertyp": [66, 149, 235, 314, 318, 356, 372, 779, 851, 887, 970, 1373], "suppli": [39, 41, 133, 135, 136, 137, 139, 154, 161, 162, 171, 236, 284, 289, 313, 356, 513, 643, 851, 888, 915, 970, 1351, 1373], "support": [1, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 64, 65, 66, 133, 134, 135, 136, 137, 138, 139, 140, 154, 155, 156, 157, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 180, 184, 187, 197, 207, 213, 257, 258, 259, 260, 290, 291, 301, 302, 310, 315, 318, 356, 487, 504, 583, 639, 653, 654, 691, 693, 698, 708, 710, 711, 720, 721, 722, 724, 735, 847, 851, 857, 866, 873, 874, 884, 896, 897, 912, 925, 926, 927, 970, 976, 1109, 1129, 1209, 1251, 1252, 1284, 1290, 1300, 1302, 1303, 1312, 1313, 1314, 1316, 1327, 1354, 1356, 1373, 1377, 1391, 1396, 1397, 1399, 1400, 1401], "supportsinterchang": 134, "suppos": [212, 280, 356, 598, 851, 1223, 1373], "sure": [66, 133, 134, 138, 149, 152, 153, 156, 158, 160, 164, 168, 283, 356, 851], "surreal_query_to_fram": 154, "surrealdb": 154, "surrealql": 154, "suscept": 970, "swap": [841, 916, 970], "swim": 780, "switch": [64, 65, 455, 873, 874, 884, 912, 925, 970, 1073], "sy": 207, "sydnei": 792, "symbol": [37, 38, 49, 356, 851, 970], "symmetr": [535, 580, 851, 976, 1158, 1206, 1373], "symmetri": [876, 883, 919, 938, 970], "sync": [49, 50, 51, 52, 970], "sync_on_clos": [49, 50, 51, 52, 970], "synchron": [154, 964], "synconclosemethod": [49, 50, 51, 52, 970], "syntact": [325, 356, 653, 654, 722, 766, 768, 770, 782, 784, 787, 797, 802, 803, 804, 814, 816, 818, 819, 821, 823, 824, 829, 832, 834, 836, 840, 842, 851, 936, 970, 1251, 1252, 1286, 1314, 1373], "syntax": [41, 123, 213, 236, 264, 276, 284, 356, 613, 697, 705, 706, 709, 720, 721, 805, 806, 847, 866, 888, 915, 925, 970, 1289, 1297, 1298, 1301, 1312, 1313, 1373, 1397, 1399], "system": [37, 152, 153, 356, 459, 873, 884, 912, 925, 970, 1077], "t": [37, 38, 40, 49, 66, 97, 147, 151, 152, 157, 163, 167, 245, 260, 264, 279, 321, 324, 356, 446, 455, 463, 481, 487, 500, 503, 505, 506, 561, 598, 639, 643, 705, 709, 720, 721, 731, 734, 737, 742, 841, 851, 892, 897, 911, 933, 970, 976, 1065, 1103, 1109, 1123, 1128, 1130, 1131, 1187, 1223, 1297, 1301, 1312, 1313, 1322, 1323, 1326, 1329, 1334, 1373, 1385, 1386, 1396], "t_": [322, 356, 504, 851, 934, 970, 1129, 1373], "t_0": [288, 356, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 851, 918, 970, 1129, 1373], "t_1": [288, 356, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 851, 918, 970, 1129, 1373], "t_a": [322, 356, 934, 970], "t_b": [322, 356, 934, 970], "t_c": [322, 356, 934, 970], "t_d": [322, 356, 934, 970], "t_i": [504, 851, 1129, 1373], "t_id": [261, 356, 898, 970], "t_n": [288, 356, 659, 663, 665, 667, 669, 671, 674, 676, 678, 851, 918, 970], "t_struct": [322, 356, 934, 970], "tab_spann": [356, 360], "tab_stub": [356, 360], "tab_styl": [356, 360], "tabl": [7, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 39, 40, 41, 42, 133, 140, 148, 156, 157, 163, 168, 169, 193, 196, 197, 199, 202, 203, 259, 261, 280, 303, 308, 315, 324, 325, 356, 360, 830, 863, 896, 898, 928, 936, 970, 1383, 1384, 1385, 1386, 1388, 1389, 1400, 1401], "table_id": 202, "table_nam": [39, 41, 157, 193, 197, 303, 356, 928, 970], "table_path": [40, 156, 168, 169, 356], "table_styl": [41, 356], "table_typ": 202, "tableinfo": [193, 196, 205], "tablemerg": [40, 356], "tablenotfounderror": [40, 356], "tables_scale_100": [142, 153], "tabletyp": [202, 205], "tail": [243, 247, 356, 372, 690, 851, 970, 1151, 1283, 1373], "take": [41, 97, 148, 157, 163, 183, 184, 207, 238, 239, 245, 269, 272, 279, 280, 285, 356, 382, 454, 466, 477, 513, 520, 521, 564, 565, 597, 624, 626, 628, 693, 774, 776, 796, 798, 807, 851, 890, 892, 908, 914, 916, 970, 995, 1072, 1084, 1099, 1143, 1144, 1190, 1191, 1364, 1373, 1391], "taken": [583, 724, 1209, 1316], "talkin": [742, 1334], "tan": [851, 1373, 1394], "tand": 1394, "tangent": [378, 379, 753, 754, 851, 991, 992, 1345, 1346, 1373, 1398], "tanh": [280, 356, 851, 1373], "target": [1, 39, 40, 41, 42, 63, 157, 265, 318, 356, 705, 720, 721, 734, 736, 737, 841, 903, 970, 976, 1297, 1312, 1313, 1326, 1328, 1329, 1396], "target_alia": [40, 356], "target_t": [39, 356], "task": [65, 874, 970], "tau": [503, 504, 851, 1128, 1129, 1373], "tb": [176, 178, 231, 356, 415, 1127, 1373], "tbl": [97, 140, 142, 153, 1403], "tbl0": 1388, "tbl1": [1386, 1388], "tbl2": [1386, 1388], "tbl3": 1386, "tbl4": 1386, "tbl_cell_numeric_align": [9, 11, 28], "tbl_col": 18, "tbl_format": [21, 207], "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "tbl_row": [26, 223, 356, 878, 970], "tbl_width_char": 795, "td": 487, "td1": 976, "td2": 976, "td3": 976, "tdf": [279, 356], "technic": 847, "tell": [698, 722, 1290, 1314], "tempor": [103, 216, 245, 257, 288, 290, 291, 310, 356, 436, 487, 534, 659, 663, 665, 667, 669, 671, 674, 676, 678, 809, 851, 863, 870, 892, 918, 970, 976, 1054, 1109, 1157, 1373, 1394, 1400], "temporalliter": [436, 809, 810, 851, 1054, 1088, 1089, 1373], "temporari": [39, 356], "temporarili": [189, 207, 245, 288, 356, 659, 851, 892, 918, 970], "tenant": 34, "tenant_id": 34, "tend": [176, 178], "tensor": [318, 356, 1356, 1373], "tensordataset": [318, 356], "term": [503, 505, 506, 711, 724, 735, 851, 1128, 1130, 1131, 1303, 1316, 1327, 1373], "termin": [38, 49, 356, 970], "terminologi": 201, "test": [0, 39, 154, 155, 157, 163, 169, 230, 280, 356, 863, 1126, 1373, 1396], "test1": 1388, "test2": 1388, "test3": 1388, "test_1": [280, 356], "test_1_math": [280, 356], "test_1_phys": [280, 356], "test_2": [280, 356], "test_2_math": [280, 356], "test_2_phys": [280, 356], "test_data": 154, "test_df_height": 183, "test_func": 812, "test_lf": [941, 970], "test_miscellan": 1404, "test_numer": 1404, "test_price_calcul": 1404, "test_series_len": 187, "test_tabl": 155, "test_unique_xyz": 181, "testdb": 155, "testing1234": 1388, "text": [151, 154, 200, 431, 432, 535, 703, 711, 715, 716, 717, 720, 721, 723, 724, 735, 831, 851, 914, 970, 1045, 1046, 1158, 1303, 1307, 1308, 1315, 1316, 1327, 1373, 1388, 1404], "text1": 721, "text2": 721, "textclaus": 154, "texttt": [690, 851, 1283, 1373], "th": [239, 356, 521, 565, 578, 690, 711, 735, 851, 890, 970, 1144, 1191, 1204, 1283, 1303, 1327, 1373, 1396], "than": [41, 49, 50, 51, 52, 55, 106, 129, 137, 139, 152, 153, 154, 157, 163, 167, 173, 217, 244, 257, 259, 260, 264, 278, 289, 290, 292, 324, 342, 356, 431, 517, 519, 522, 524, 534, 549, 577, 596, 598, 614, 646, 658, 681, 690, 711, 715, 718, 719, 727, 735, 744, 781, 813, 841, 851, 891, 896, 897, 953, 970, 1045, 1157, 1203, 1223, 1244, 1256, 1270, 1283, 1303, 1307, 1310, 1311, 1319, 1327, 1336, 1353, 1373, 1404], "the_aws_access_key_id": [40, 156, 168, 169, 356], "the_aws_region": [40, 356], "the_aws_secret_access_kei": [40, 156, 168, 169, 356], "thei": [38, 41, 49, 57, 65, 66, 98, 100, 136, 149, 167, 207, 260, 262, 291, 356, 639, 682, 722, 730, 731, 851, 873, 884, 897, 912, 925, 970, 974, 976, 1272, 1314, 1373], "them": [65, 133, 135, 136, 137, 139, 154, 155, 157, 161, 162, 163, 164, 167, 170, 171, 172, 207, 232, 233, 245, 260, 261, 272, 280, 288, 318, 326, 356, 394, 504, 534, 568, 631, 632, 639, 659, 779, 790, 791, 793, 794, 838, 839, 851, 874, 885, 892, 897, 898, 908, 918, 970, 976, 1007, 1129, 1134, 1194, 1232, 1233, 1373, 1391, 1401], "then1": 841, "then2": 841, "therebi": [167, 170, 171], "therefor": [55, 152, 158, 162, 164, 231, 356, 1127, 1373], "theta": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "thi": [1, 4, 5, 11, 13, 15, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 72, 73, 74, 75, 80, 90, 97, 99, 100, 107, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 201, 203, 207, 209, 211, 212, 214, 215, 218, 219, 221, 223, 224, 227, 228, 231, 233, 237, 238, 243, 244, 245, 246, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 268, 270, 271, 272, 273, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 301, 303, 304, 305, 308, 310, 313, 314, 315, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 337, 342, 355, 356, 359, 360, 361, 369, 372, 373, 382, 394, 400, 401, 402, 407, 409, 426, 427, 430, 436, 446, 447, 449, 454, 455, 456, 466, 468, 474, 475, 477, 481, 484, 487, 498, 502, 509, 518, 519, 526, 528, 531, 532, 534, 535, 539, 561, 562, 568, 577, 578, 579, 580, 581, 582, 584, 589, 590, 594, 595, 597, 598, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 616, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 639, 646, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 683, 684, 685, 686, 691, 692, 693, 696, 698, 705, 708, 710, 712, 713, 717, 718, 719, 722, 729, 730, 731, 732, 733, 738, 742, 744, 746, 749, 756, 757, 759, 760, 761, 762, 766, 770, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 798, 799, 801, 803, 804, 807, 808, 809, 810, 813, 816, 818, 821, 823, 829, 832, 836, 840, 841, 842, 847, 851, 863, 867, 868, 869, 872, 873, 874, 875, 876, 878, 879, 881, 882, 883, 884, 888, 891, 892, 894, 896, 897, 898, 900, 902, 903, 907, 908, 912, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 932, 933, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 948, 953, 967, 968, 969, 970, 974, 975, 976, 978, 985, 986, 995, 1007, 1013, 1014, 1015, 1020, 1022, 1039, 1040, 1043, 1049, 1054, 1055, 1065, 1066, 1072, 1073, 1074, 1076, 1084, 1086, 1096, 1097, 1099, 1103, 1106, 1109, 1120, 1122, 1125, 1127, 1133, 1134, 1142, 1144, 1146, 1150, 1152, 1158, 1163, 1172, 1187, 1188, 1194, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1216, 1221, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1233, 1235, 1238, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1284, 1285, 1287, 1288, 1290, 1297, 1300, 1302, 1304, 1305, 1309, 1310, 1311, 1314, 1321, 1322, 1323, 1330, 1334, 1336, 1337, 1339, 1342, 1343, 1347, 1349, 1351, 1352, 1353, 1354, 1356, 1357, 1358, 1359, 1361, 1362, 1363, 1373, 1378, 1382, 1383, 1384, 1388, 1396, 1399, 1400, 1401, 1402, 1404], "thing": [167, 174], "think": [474, 475, 1096, 1097], "third": [597, 851], "thoma": [272, 356, 908, 970], "those": [5, 31, 41, 152, 157, 236, 284, 291, 315, 325, 356, 517, 649, 705, 813, 851, 866, 915, 936, 970, 976, 1246, 1297, 1354, 1373], "though": [39, 152, 154, 245, 356, 847, 892, 970], "thought": 841, "thousand": [9, 28], "thousands_separ": [9, 11, 28], "thread": [15, 38, 49, 65, 142, 152, 153, 155, 189, 190, 302, 356, 561, 598, 693, 774, 851, 874, 927, 970, 1015, 1187, 1210, 1285, 1373], "thread_loc": [598, 851], "thread_pool_s": 190, "three": [41, 212, 288, 317, 356, 447, 646, 659, 682, 711, 720, 735, 851, 918, 970, 1019, 1066, 1215, 1244, 1303, 1313, 1327, 1373], "threshold": [294, 356, 920, 970], "through": [154, 265, 280, 356, 847, 903, 970, 976, 1373, 1388], "throughout": 207, "throw": [40, 135, 136, 139, 225, 285, 356, 713, 714, 870, 880, 916, 970, 1305, 1306, 1373], "thu": [41, 233, 356, 359, 781, 974, 1134, 1373], "thursdai": [245, 356, 454, 466, 776, 892, 970, 1072, 1084], "ti": [649, 851, 1246, 1373], "time": [13, 38, 40, 43, 47, 49, 50, 51, 52, 55, 63, 64, 65, 73, 75, 116, 156, 162, 164, 167, 168, 170, 171, 172, 183, 184, 187, 197, 223, 233, 245, 260, 261, 288, 326, 356, 426, 427, 455, 456, 458, 459, 460, 463, 464, 474, 475, 477, 480, 481, 482, 484, 486, 487, 495, 498, 504, 556, 589, 658, 659, 663, 665, 667, 669, 671, 674, 676, 678, 686, 734, 737, 741, 755, 756, 757, 779, 780, 790, 791, 792, 793, 794, 795, 801, 809, 838, 839, 851, 873, 874, 878, 892, 897, 898, 912, 918, 970, 976, 1039, 1040, 1073, 1074, 1076, 1077, 1081, 1082, 1099, 1102, 1103, 1104, 1106, 1108, 1109, 1117, 1120, 1129, 1134, 1182, 1256, 1279, 1326, 1329, 1333, 1355, 1357, 1358, 1373, 1382, 1388, 1397, 1404], "time_column": [326, 356], "time_format": [38, 49, 356, 970], "time_unit": [73, 75, 456, 458, 464, 486, 498, 737, 792, 793, 794, 795, 801, 975, 976, 1074, 1076, 1082, 1108, 1120, 1329], "time_unit_m": [456, 1074], "time_unit_n": [456, 1074], "time_unit_u": 498, "time_zon": [73, 459, 461, 481, 737, 792, 793, 794, 975, 976, 1073, 1077, 1081, 1103, 1329], "timedelta": [245, 260, 288, 326, 356, 477, 482, 487, 495, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 790, 791, 793, 794, 838, 839, 851, 892, 897, 918, 970, 975, 976, 1087, 1093, 1099, 1104, 1117, 1129, 1232, 1233, 1287, 1363, 1373], "timeout": [65, 874, 970], "timestamp": [140, 156, 168, 245, 356, 481, 482, 495, 801, 892, 970, 1103, 1104, 1117, 1394], "timestamp_m": 486, "timestamp_n": 1108, "timestamp_u": [486, 1108], "timestep": 801, "timeunit": [38, 49, 73, 75, 356, 456, 458, 486, 498, 737, 792, 793, 794, 795, 970, 976, 1074, 1076, 1108, 1120, 1329], "timezon": [56, 73, 156, 168, 461, 976, 1397], "tip": [598, 851], "titl": [41, 356, 359, 1373, 1378, 1382], "titlecas": [742, 1334], "tm": [458, 487, 976, 1397], "to_arrow": [258, 356, 1353, 1373, 1401], "to_batch": [258, 356], "to_dict": [216, 291, 356, 870, 970, 976], "to_dummi": [313, 318, 356, 1373], "to_fram": [430, 464, 482, 486, 495, 734, 975, 1066, 1244, 1271, 1273, 1318, 1319, 1326, 1373, 1378], "to_init_repr": [140, 356, 1373], "to_jax": [318, 356, 1373], "to_list": [140, 288, 356, 1289, 1301, 1373], "to_lowercas": 630, "to_numpi": [313, 318, 356, 597, 851, 1373], "to_panda": [356, 1373], "to_phys": [851, 1373], "to_python": 975, "to_seri": [59, 240, 356, 734, 775, 826, 1326, 1396], "to_sql": [39, 356], "to_str": [484, 1106], "to_struct": [356, 706], "to_torch": [313, 356, 1373], "to_uppercas": [368, 629, 707, 851], "togeth": [261, 356, 898, 970, 1396], "token": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 169, 170, 171, 172, 192, 197, 356, 970], "tokyo": [140, 976], "tokyo_tz": 976, "toler": [176, 177, 178, 179, 260, 356, 535, 851, 897, 970, 1158, 1373], "tone": [41, 356], "tonight": [698, 722, 1290, 1314], "too": [15, 280, 356, 414, 639, 851, 970, 1027], "tooltip": [356, 359, 1373, 1378], "toomanyrowsreturnederror": [289, 356], "top": [41, 303, 319, 356, 359, 757, 851, 928, 932, 970, 1373, 1378, 1401], "top_col": [41, 356], "top_k": [215, 356, 426, 427, 757, 851, 868, 970, 1039, 1040, 1358, 1373], "top_k_bi": [426, 427, 756, 851, 1039, 1040, 1357, 1373], "top_row": [41, 356], "tor_id": 140, "torch": [175, 318, 356, 1356, 1373], "torchexporttyp": [318, 356], "total": [41, 231, 337, 356, 488, 489, 490, 491, 492, 493, 494, 550, 570, 851, 948, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1127, 1176, 1196, 1373], "total_gross": 1382, "toward": [337, 550, 570, 851, 948, 1176, 1196, 1373], "tp": [1, 61], "tpu": [313, 356, 1351, 1373], "tr15": [717, 1309], "trace": 76, "traceback": [176, 177, 178, 179, 314, 356, 654, 851, 1252, 1353, 1373], "tracebacktyp": 1401, "track": [156, 168, 169, 264, 356, 589, 1401], "trail": [29, 243, 356, 729, 730, 1321, 1322], "train": [318, 356], "train_lf": [941, 970], "transfer": 155, "transferencod": [411, 412, 700, 701, 1024, 1025, 1292, 1293], "transform": [264, 303, 356, 597, 742, 830, 851, 928, 970, 1334], "transform_dens": [1373, 1378], "transit": [236, 284, 356, 888, 915, 970], "translat": 154, "transpar": [873, 884, 912, 925, 970], "transpos": [280, 356], "travel": [156, 168], "travers": [662, 664, 666, 668, 670, 673, 675, 677, 851, 1259, 1260, 1262, 1265, 1266, 1267, 1373], "treat": [152, 153, 167, 209, 389, 504, 539, 557, 697, 699, 709, 720, 721, 841, 851, 978, 1002, 1129, 1163, 1183, 1289, 1291, 1301, 1312, 1313, 1373], "tree": [614, 884, 970], "tree_format": [884, 970], "trend": [41, 356], "tri": [264, 356], "triangl": [342, 953], "trigger": [40, 149, 262, 315, 356, 851, 1354, 1373], "trigonometri": [1394, 1400], "trim": [140, 1396], "trim_decimal_zero": 29, "trip": 154, "true": [7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 39, 40, 41, 47, 49, 50, 51, 52, 53, 55, 64, 65, 66, 97, 133, 134, 135, 136, 138, 139, 140, 142, 143, 148, 149, 152, 153, 154, 156, 157, 158, 160, 163, 164, 167, 168, 170, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 192, 207, 211, 216, 217, 218, 223, 225, 230, 235, 236, 238, 240, 242, 243, 244, 245, 252, 253, 254, 257, 259, 260, 261, 262, 268, 269, 275, 276, 278, 280, 281, 284, 285, 289, 290, 291, 292, 294, 302, 303, 306, 309, 311, 313, 314, 315, 318, 320, 321, 322, 324, 325, 326, 330, 336, 338, 340, 343, 344, 345, 346, 347, 348, 349, 356, 359, 367, 368, 369, 370, 371, 372, 383, 385, 386, 389, 393, 394, 402, 406, 410, 411, 413, 416, 417, 422, 425, 427, 428, 429, 433, 441, 442, 443, 444, 445, 447, 454, 456, 459, 462, 464, 466, 467, 474, 475, 477, 478, 481, 482, 483, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 505, 506, 513, 520, 522, 523, 524, 525, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 553, 557, 564, 566, 568, 584, 589, 596, 597, 598, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 633, 634, 636, 638, 641, 642, 646, 651, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 685, 686, 690, 692, 693, 696, 697, 698, 699, 700, 702, 708, 709, 710, 712, 713, 714, 720, 721, 725, 726, 728, 734, 736, 737, 739, 741, 745, 747, 748, 757, 759, 762, 765, 766, 767, 768, 769, 771, 774, 775, 776, 777, 781, 783, 790, 793, 799, 805, 809, 810, 817, 823, 826, 829, 830, 833, 835, 838, 841, 842, 851, 870, 871, 872, 873, 874, 878, 880, 884, 887, 888, 891, 892, 896, 897, 898, 900, 902, 907, 912, 915, 916, 920, 925, 927, 928, 933, 934, 935, 936, 939, 945, 947, 949, 951, 954, 955, 956, 957, 958, 959, 960, 969, 970, 975, 976, 983, 984, 996, 998, 999, 1002, 1006, 1007, 1015, 1023, 1024, 1026, 1029, 1041, 1042, 1047, 1049, 1052, 1053, 1066, 1072, 1073, 1074, 1077, 1080, 1081, 1082, 1083, 1084, 1085, 1089, 1090, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1123, 1125, 1126, 1128, 1130, 1131, 1138, 1148, 1152, 1154, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1178, 1179, 1183, 1190, 1192, 1194, 1210, 1223, 1229, 1235, 1237, 1240, 1241, 1244, 1247, 1248, 1257, 1264, 1283, 1285, 1288, 1289, 1290, 1291, 1292, 1294, 1300, 1301, 1302, 1304, 1305, 1306, 1312, 1313, 1317, 1318, 1320, 1326, 1328, 1329, 1331, 1333, 1348, 1353, 1354, 1362, 1364, 1373, 1378, 1382, 1383, 1385, 1387, 1391, 1393, 1396, 1401, 1404], "truediv": [517, 851], "truncat": [21, 140, 152, 153, 167, 243, 245, 257, 290, 291, 310, 356, 892, 912, 970, 1400], "truncate_nod": [912, 970], "truncate_ragged_lin": [152, 153, 167], "truncate_str": 495, "truncate_td": 495, "trust": [449, 851, 879, 970], "try": [38, 43, 47, 49, 50, 51, 52, 64, 126, 152, 153, 158, 162, 164, 167, 170, 171, 172, 197, 356, 841, 873, 884, 912, 925, 970], "try_cast": 1394, "try_parse_d": [142, 152, 153, 167], "try_parse_hive_d": [164, 170, 172], "ts_local": [481, 1103], "tseri": [474, 475, 1096, 1097], "tstamp": 976, "tstamp_tokyo": 976, "tstamp_utc": 976, "tue": [356, 359], "tuesdai": [245, 356, 892, 970], "tupl": [41, 67, 155, 157, 163, 212, 213, 257, 264, 278, 289, 290, 291, 298, 318, 334, 356, 613, 655, 851, 912, 925, 970, 975, 976, 1253, 1275, 1373], "turn": [8, 64, 152, 153, 167, 259, 260, 356, 873, 884, 896, 897, 902, 912, 970], "twice": [41, 356], "two": [41, 57, 98, 100, 135, 137, 139, 155, 212, 236, 238, 260, 261, 271, 272, 284, 290, 317, 323, 336, 342, 356, 360, 367, 451, 458, 517, 520, 523, 535, 589, 646, 692, 772, 773, 779, 781, 783, 790, 793, 827, 828, 830, 851, 888, 897, 898, 907, 908, 915, 935, 947, 953, 970, 976, 1019, 1069, 1076, 1158, 1215, 1244, 1373, 1388, 1389, 1390, 1393, 1402], "two_a": 1401, "tworld": [731, 1321, 1323], "txt": [1, 13, 167, 697, 709, 1301, 1396], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 56, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 133, 135, 136, 137, 138, 139, 141, 152, 153, 154, 156, 157, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 209, 212, 213, 219, 229, 232, 238, 243, 245, 246, 258, 259, 264, 288, 293, 296, 308, 313, 314, 317, 318, 321, 333, 356, 361, 369, 371, 374, 375, 376, 377, 378, 379, 382, 387, 388, 389, 391, 394, 405, 406, 410, 411, 412, 413, 414, 415, 416, 428, 430, 431, 432, 436, 437, 438, 439, 440, 447, 448, 454, 455, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 507, 509, 520, 523, 526, 534, 535, 536, 537, 538, 539, 540, 541, 550, 554, 555, 557, 562, 568, 570, 588, 589, 612, 646, 648, 652, 653, 654, 655, 657, 658, 659, 663, 665, 667, 669, 671, 674, 676, 678, 687, 688, 689, 696, 699, 700, 701, 704, 705, 706, 707, 710, 711, 712, 714, 715, 716, 724, 725, 726, 727, 734, 735, 739, 753, 754, 755, 762, 771, 779, 782, 789, 790, 791, 792, 793, 794, 795, 797, 805, 806, 808, 809, 810, 811, 812, 813, 823, 826, 837, 838, 839, 842, 847, 851, 863, 864, 873, 883, 884, 885, 892, 896, 912, 918, 919, 925, 933, 943, 970, 975, 978, 983, 984, 996, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1018, 1019, 1020, 1023, 1024, 1025, 1027, 1028, 1041, 1043, 1045, 1046, 1054, 1066, 1067, 1072, 1073, 1075, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1126, 1129, 1133, 1150, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1178, 1179, 1180, 1181, 1183, 1188, 1194, 1196, 1214, 1215, 1237, 1244, 1250, 1251, 1252, 1253, 1255, 1256, 1278, 1280, 1288, 1289, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1302, 1303, 1304, 1306, 1307, 1308, 1316, 1317, 1318, 1319, 1326, 1327, 1331, 1352, 1353, 1355, 1364, 1373, 1382, 1389, 1394, 1396, 1400, 1401], "type_coercion": [64, 873, 884, 912, 925, 970], "type_json": 199, "type_nam": 199, "type_text": 199, "typeerror": [40, 213, 356], "typenam": [41, 356], "typic": [136, 154, 172, 264, 356, 463, 687, 851, 976, 1081, 1223, 1280, 1373], "tz": [737, 1329], "tzinfo": [73, 156, 168, 976], "u": [41, 73, 75, 172, 185, 260, 356, 456, 458, 464, 486, 498, 734, 737, 767, 769, 792, 793, 794, 795, 801, 897, 970, 975, 976, 1074, 1076, 1082, 1108, 1120, 1326, 1329, 1386, 1397], "u1": [314, 356], "u16": [167, 1399, 1404], "u32": [13, 154, 214, 216, 222, 277, 332, 333, 337, 341, 347, 349, 356, 367, 373, 380, 381, 382, 383, 384, 387, 388, 390, 399, 415, 431, 432, 440, 441, 528, 530, 550, 554, 555, 558, 570, 575, 621, 637, 649, 657, 658, 663, 665, 667, 669, 671, 674, 676, 678, 682, 699, 709, 710, 715, 716, 717, 755, 760, 762, 766, 770, 774, 775, 782, 784, 805, 808, 821, 851, 867, 870, 877, 910, 942, 943, 948, 952, 958, 960, 970, 976, 995, 996, 997, 1000, 1001, 1003, 1012, 1041, 1045, 1046, 1060, 1152, 1180, 1181, 1184, 1196, 1201, 1246, 1255, 1256, 1272, 1291, 1301, 1302, 1307, 1308, 1355, 1360, 1362, 1373, 1382, 1390, 1391, 1392, 1396, 1401], "u64": [246, 333, 356, 526, 651, 851, 912, 943, 970, 976, 1150, 1248, 1373], "u8": [216, 311, 312, 324, 356, 654, 765, 851, 870, 970, 976, 1252, 1348, 1373, 1404], "udf": [189, 264, 279, 342, 356, 449, 598, 643, 813, 851, 879, 911, 953, 970, 1223, 1373], "ufunc": 106, "uid": 154, "uint": 1404, "uint16": [167, 444, 445, 751, 851, 976, 1063, 1064, 1343, 1353, 1356, 1373], "uint2": 1399, "uint32": [141, 175, 216, 231, 288, 333, 356, 382, 387, 388, 415, 431, 432, 440, 504, 520, 523, 550, 554, 555, 570, 652, 657, 658, 659, 663, 665, 667, 669, 671, 674, 676, 678, 699, 710, 715, 716, 755, 782, 805, 808, 851, 870, 918, 943, 970, 976, 996, 1000, 1001, 1028, 1041, 1045, 1046, 1127, 1129, 1180, 1181, 1196, 1250, 1255, 1256, 1291, 1302, 1307, 1308, 1355, 1356, 1373], "uint4": 1401, "uint64": [141, 246, 288, 333, 356, 387, 388, 504, 526, 554, 555, 651, 659, 663, 665, 667, 669, 671, 674, 676, 678, 851, 918, 943, 970, 976, 1000, 1001, 1129, 1150, 1180, 1181, 1248, 1356, 1373], "uint8": [154, 216, 312, 313, 314, 324, 356, 444, 445, 654, 751, 765, 851, 870, 970, 975, 976, 1063, 1064, 1252, 1343, 1356, 1373, 1404], "uint8_pair": 1404, "uit": [724, 1316], "uk": [706, 1298], "unabl": [108, 157], "unalias": 604, "unari": [635, 851], "unbias": [505, 506, 851, 1130, 1131, 1373], "unchang": [231, 356, 653, 755, 851, 902, 953, 970, 1127, 1251, 1355, 1373], "uncompress": [36, 43, 44, 47, 50, 52, 158, 170, 356, 970], "undefin": [152, 758, 851], "under": [38, 43, 47, 49, 50, 51, 52, 57, 59, 60, 61, 62, 98, 100, 162, 164, 167, 170, 171, 172, 195, 196, 197, 280, 303, 356, 843, 844, 846, 847, 852, 853, 856, 858, 859, 860, 928, 970, 1365, 1367, 1369, 1374, 1379, 1380, 1381], "underestim": [231, 356, 1127, 1373], "underli": [1, 57, 72, 73, 75, 90, 100, 105, 115, 133, 135, 136, 137, 139, 154, 155, 157, 161, 162, 163, 164, 171, 180, 183, 187, 232, 233, 257, 258, 290, 308, 314, 356, 411, 456, 457, 458, 462, 465, 467, 468, 469, 470, 471, 472, 473, 476, 478, 479, 481, 483, 487, 496, 497, 498, 499, 651, 679, 697, 700, 709, 851, 885, 970, 976, 1024, 1074, 1075, 1076, 1080, 1083, 1085, 1086, 1090, 1091, 1092, 1094, 1095, 1098, 1100, 1101, 1103, 1105, 1109, 1118, 1119, 1120, 1121, 1134, 1248, 1268, 1278, 1289, 1292, 1301, 1347, 1353, 1373, 1401], "understood": 813, "undo": [615, 622, 623, 625, 627, 629, 630], "unexpect": [115, 124, 154, 236, 284, 356, 597, 598, 851, 888, 915, 970, 1223, 1373], "unhelpfulli": [176, 178], "unicod": [21, 432, 711, 716, 717, 724, 735, 976, 1046, 1303, 1308, 1309, 1316, 1327, 1396], "unicodeform": [717, 1309], "unifi": [41, 313, 318, 356, 976], "uniform": [41, 356, 528, 646, 851, 1152, 1244, 1373], "unimod": [690, 851, 1283, 1373], "union": [64, 66, 581, 873, 884, 912, 925, 970, 976, 1207, 1400, 1401], "uniqu": [47, 52, 58, 76, 149, 157, 180, 181, 182, 185, 187, 214, 254, 259, 276, 280, 291, 347, 356, 373, 384, 399, 447, 546, 575, 621, 646, 734, 736, 737, 741, 760, 762, 770, 821, 851, 867, 896, 958, 970, 986, 997, 1012, 1066, 1171, 1201, 1230, 1244, 1326, 1328, 1329, 1333, 1360, 1362, 1373, 1389, 1391], "unique_column_valu": [280, 356], "unique_count": [851, 1373], "uniquekeepstrategi": [321, 356, 933, 970], "unit": [41, 73, 75, 149, 176, 177, 178, 179, 183, 187, 231, 356, 415, 456, 458, 464, 480, 486, 498, 504, 510, 595, 610, 734, 737, 761, 778, 792, 793, 794, 795, 801, 851, 912, 970, 976, 1028, 1074, 1076, 1082, 1102, 1108, 1120, 1127, 1129, 1135, 1221, 1326, 1329, 1361, 1373, 1404], "uniti": [192, 193, 195, 196, 197, 205, 863], "unity_catalog": 200, "univers": [209, 978], "unix": [72, 73, 464, 495, 801, 1082, 1117], "unknown": [589, 705, 811, 1297], "unless": [41, 58, 135, 152, 259, 313, 318, 356, 729, 730, 826, 896, 970, 1321, 1396], "unlik": [148, 245, 325, 356, 866, 892, 936, 970], "unnam": [707, 1299], "unnest": [148, 356, 447, 646, 657, 706, 707, 726, 727, 747, 749, 762, 841, 851, 970, 1019, 1066, 1215, 1244, 1255, 1318, 1319, 1373, 1394, 1400], "unpivot": [271, 356, 907, 970], "unregist": [1384, 1385, 1386, 1401, 1403], "unsaf": [149, 851], "unset": [39, 164, 170, 182, 341, 356, 419, 420, 421, 423, 424, 481, 589, 851, 952, 1032, 1033, 1034, 1036, 1037, 1103, 1373, 1382], "unsign": [91, 92, 93, 94, 651, 851, 976, 1248, 1373], "unsigned_integ": 976, "unstabl": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 99, 130, 132, 143, 144, 145, 146, 147, 148, 154, 156, 162, 164, 167, 168, 169, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 265, 303, 313, 318, 325, 356, 359, 360, 361, 446, 447, 454, 466, 528, 598, 646, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 678, 776, 778, 851, 873, 874, 884, 903, 912, 925, 928, 936, 944, 970, 1049, 1065, 1066, 1072, 1084, 1152, 1244, 1257, 1258, 1261, 1263, 1264, 1351, 1356, 1373, 1378], "unstack": 356, "unstackdirect": [324, 356], "unsuit": 131, "unsupport": [40, 213, 356, 866], "until": [49, 50, 51, 52, 97, 98, 245, 262, 356, 718, 719, 744, 892, 970, 1310, 1311, 1336], "up": [11, 41, 89, 155, 257, 260, 280, 290, 291, 297, 310, 356, 435, 436, 598, 711, 720, 721, 735, 851, 896, 897, 902, 923, 970, 976, 1051, 1303, 1312, 1313, 1327, 1373], "upcast": [56, 265, 356, 372, 851, 903, 970], "upcast_integer_typ": [1, 61], "updat": [40, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 207, 223, 356, 878, 970], "updated_at": [198, 201, 202], "updated_bi": [198, 201, 202], "upgrad": 111, "upheld": [902, 970], "upon": 153, "upper": [152, 153, 154, 231, 245, 356, 436, 528, 534, 589, 624, 761, 771, 790, 791, 793, 794, 809, 810, 838, 839, 851, 892, 970, 1054, 1127, 1152, 1157, 1221, 1361, 1373, 1391, 1394], "upper_bound": [245, 356, 436, 534, 589, 851, 892, 970, 1054, 1157, 1221, 1373], "uppercas": [630, 743, 1335, 1396], "upsampl": [245, 356, 892, 970], "urandom": [415, 1028], "uri": [39, 40, 154, 155, 156, 168, 169, 356], "url": [154, 155, 164, 170, 172, 192, 705, 707, 1297, 1299], "urllib": 155, "us": [1, 7, 9, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 49, 50, 51, 52, 53, 55, 57, 58, 64, 65, 66, 67, 73, 89, 98, 100, 103, 107, 130, 134, 136, 137, 139, 141, 146, 148, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 192, 213, 214, 215, 216, 219, 223, 225, 227, 228, 234, 235, 236, 238, 244, 245, 252, 254, 256, 257, 258, 260, 261, 264, 271, 275, 276, 278, 279, 280, 284, 288, 289, 290, 291, 292, 294, 295, 297, 302, 303, 304, 308, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 323, 324, 325, 326, 327, 330, 331, 332, 333, 335, 342, 356, 359, 361, 367, 369, 371, 373, 382, 383, 406, 411, 412, 414, 427, 429, 431, 432, 433, 436, 446, 449, 452, 453, 461, 480, 481, 482, 484, 487, 495, 498, 500, 503, 504, 505, 506, 507, 511, 512, 513, 517, 532, 533, 534, 547, 561, 577, 585, 589, 591, 597, 598, 601, 622, 625, 627, 629, 630, 639, 645, 646, 649, 651, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 681, 683, 685, 686, 690, 692, 693, 695, 696, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 713, 714, 715, 716, 717, 720, 721, 722, 724, 726, 728, 730, 731, 732, 733, 734, 736, 737, 741, 744, 745, 749, 751, 757, 763, 764, 766, 767, 768, 769, 770, 773, 774, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 801, 805, 806, 808, 809, 811, 813, 814, 815, 817, 819, 820, 823, 826, 827, 828, 829, 830, 832, 833, 834, 835, 838, 839, 840, 841, 842, 847, 850, 851, 862, 863, 866, 867, 868, 869, 870, 873, 874, 876, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 891, 892, 897, 898, 900, 907, 912, 915, 918, 919, 920, 921, 923, 925, 927, 928, 929, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 953, 970, 974, 975, 976, 983, 984, 986, 1015, 1019, 1024, 1025, 1027, 1040, 1045, 1046, 1049, 1065, 1067, 1070, 1071, 1079, 1088, 1089, 1102, 1103, 1104, 1106, 1109, 1117, 1120, 1123, 1128, 1129, 1130, 1131, 1136, 1137, 1143, 1149, 1156, 1157, 1173, 1187, 1203, 1210, 1215, 1223, 1243, 1244, 1246, 1248, 1251, 1253, 1255, 1256, 1257, 1258, 1270, 1271, 1273, 1274, 1277, 1283, 1285, 1287, 1288, 1289, 1290, 1292, 1293, 1296, 1297, 1298, 1300, 1301, 1302, 1307, 1308, 1309, 1312, 1313, 1314, 1316, 1318, 1326, 1328, 1329, 1333, 1336, 1343, 1347, 1348, 1350, 1353, 1354, 1358, 1363, 1373, 1382, 1383, 1384, 1385, 1386, 1388, 1389, 1396, 1397, 1401, 1403, 1404], "usag": [183, 187, 300, 356, 841, 976, 1278, 1373], "usd": [243, 356, 1404], "use_abs_path": 149, "use_pyarrow": [47, 52, 152, 156, 158, 160, 164, 168, 314, 356, 970, 1353, 1373], "use_pyarrow_extension_arrai": [315, 356, 1354, 1373], "use_pyarrow_write_to_dataset": [47, 356], "use_statist": [164, 172], "user": [39, 147, 149, 154, 155, 209, 264, 279, 342, 356, 597, 598, 643, 683, 799, 813, 851, 911, 953, 970, 974, 978, 1223, 1274, 1373], "user_conn": 154, "usernam": [152, 155, 158, 160], "userwarn": 1, "usr": 154, "usual": [107, 155, 207, 318, 356, 455, 1073], "utc": [156, 168, 455, 459, 461, 463, 481, 734, 737, 975, 976, 1073, 1077, 1081, 1103, 1326, 1329], "utc_tz": 976, "utf": [38, 49, 88, 356, 970], "utf8": [21, 152, 153, 167, 711, 724, 735, 1303, 1316, 1327], "utf8_borders_onli": 21, "utf8_ful": [21, 58, 140], "utf8_full_condens": [7, 21, 140], "utf8_horizontal_onli": 21, "utf8_no_bord": 21, "util": [318, 356, 801, 970], "uvloop": 154, "uvw": [706, 1298], "v": [8, 9, 10, 47, 231, 356, 682, 767, 769, 851, 1272, 1373, 1385, 1386], "v1": 33, "v2": [8, 10, 158, 170], "val": [41, 287, 356, 598, 643, 755, 841, 851, 917, 970], "valid": [38, 41, 49, 73, 97, 147, 152, 154, 158, 160, 164, 167, 187, 207, 225, 231, 259, 260, 285, 356, 446, 697, 699, 705, 706, 707, 709, 714, 720, 721, 841, 851, 880, 896, 897, 916, 945, 970, 976, 1065, 1127, 1289, 1291, 1297, 1298, 1299, 1301, 1306, 1312, 1313, 1373, 1382, 1383], "validate_output_schema": [902, 970], "validate_schema": [97, 147], "vals_phys": [755, 851], "valu": [4, 5, 11, 12, 13, 14, 18, 21, 29, 31, 37, 38, 41, 47, 49, 52, 53, 55, 57, 58, 66, 67, 70, 76, 77, 85, 86, 95, 100, 109, 135, 136, 138, 139, 145, 152, 153, 154, 155, 164, 167, 170, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 207, 211, 213, 214, 215, 216, 223, 227, 228, 230, 233, 234, 235, 236, 240, 243, 245, 246, 247, 251, 255, 257, 259, 260, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 276, 278, 280, 281, 282, 284, 285, 288, 289, 290, 291, 292, 299, 302, 304, 305, 306, 307, 309, 310, 311, 314, 315, 319, 320, 323, 324, 325, 326, 327, 334, 337, 338, 340, 343, 344, 346, 347, 356, 359, 360, 365, 366, 367, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 416, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 445, 446, 447, 450, 452, 453, 458, 462, 473, 478, 487, 496, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 560, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 582, 584, 585, 586, 587, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 601, 606, 617, 618, 619, 620, 621, 631, 632, 633, 634, 637, 639, 640, 643, 644, 645, 646, 647, 649, 652, 653, 654, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 687, 688, 689, 690, 692, 693, 694, 696, 697, 699, 700, 701, 702, 703, 705, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 735, 744, 746, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 774, 777, 779, 780, 782, 784, 785, 786, 787, 788, 798, 799, 804, 805, 806, 807, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 825, 826, 827, 828, 834, 835, 841, 851, 867, 868, 878, 881, 882, 886, 887, 888, 892, 894, 895, 896, 897, 904, 905, 906, 907, 909, 910, 913, 914, 915, 916, 918, 924, 927, 929, 930, 932, 935, 936, 937, 948, 949, 951, 954, 955, 957, 958, 970, 976, 981, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1040, 1041, 1042, 1045, 1046, 1047, 1051, 1054, 1056, 1057, 1058, 1060, 1065, 1066, 1067, 1068, 1070, 1071, 1076, 1080, 1095, 1100, 1109, 1118, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1141, 1142, 1143, 1144, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1208, 1210, 1211, 1212, 1213, 1216, 1217, 1223, 1224, 1225, 1227, 1228, 1230, 1232, 1233, 1235, 1236, 1238, 1239, 1243, 1244, 1245, 1246, 1250, 1251, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1270, 1271, 1272, 1273, 1276, 1280, 1281, 1282, 1283, 1285, 1288, 1289, 1291, 1292, 1293, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1318, 1319, 1320, 1327, 1336, 1339, 1343, 1344, 1345, 1346, 1348, 1353, 1354, 1355, 1358, 1360, 1362, 1364, 1373, 1382, 1387, 1389, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1399, 1401, 1403, 1404], "value1": [693, 851], "value2": [693, 851], "value_a": 1401, "value_b": 1401, "value_count": [760, 851, 1373], "value_cum_sum": [445, 851], "value_cum_sum_all_fil": [445, 851], "value_nam": [271, 323, 356, 907, 935, 970], "value_var": [271, 323, 356, 907, 935, 970], "valueerror": [10, 16, 21, 213], "valueexcept": 811, "var": [41, 188, 356, 677, 678, 851, 970, 1373, 1390], "var_samp": 1390, "vari": [157, 163, 213, 455, 1073, 1404], "variabl": [31, 38, 43, 47, 49, 50, 51, 52, 64, 65, 85, 162, 164, 167, 170, 171, 172, 186, 189, 197, 271, 311, 323, 356, 873, 874, 884, 907, 912, 925, 935, 970, 1348, 1373, 1383, 1385, 1401], "variable_nam": [271, 323, 356, 907, 935, 970], "variad": 154, "varianc": [327, 356, 506, 547, 677, 678, 763, 840, 851, 937, 970, 1131, 1173, 1267, 1363, 1373, 1394], "variou": [154, 212, 219, 356, 851, 875, 970, 975, 976, 1373], "vector": [662, 664, 666, 668, 670, 673, 675, 677, 851, 1259, 1260, 1262, 1265, 1266, 1267, 1373], "vector_index_format": 200, "vectoris": [474, 475, 1096, 1097], "vein": 207, "verbos": [30, 176, 178, 207, 706, 1298], "veri": [154, 257, 320, 356, 598, 851, 953, 1395], "verifi": [260, 356, 897, 970], "versicolor": [356, 359], "version": [39, 40, 43, 44, 55, 63, 64, 67, 134, 140, 152, 153, 156, 157, 158, 160, 164, 167, 168, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 197, 211, 214, 215, 224, 245, 246, 259, 271, 280, 288, 296, 303, 308, 313, 314, 318, 319, 326, 332, 337, 356, 359, 427, 446, 449, 454, 461, 474, 475, 487, 498, 503, 505, 506, 519, 526, 597, 598, 605, 606, 612, 616, 653, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 696, 704, 738, 749, 757, 764, 773, 776, 781, 825, 827, 828, 830, 851, 867, 868, 873, 879, 884, 892, 896, 907, 912, 914, 918, 922, 925, 928, 932, 941, 942, 948, 970, 976, 1065, 1072, 1079, 1088, 1089, 1096, 1097, 1109, 1120, 1126, 1128, 1130, 1131, 1149, 1150, 1251, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1288, 1296, 1330, 1347, 1351, 1353, 1356, 1373, 1378, 1401], "versu": [223, 356, 878, 970], "vertic": [66, 233, 324, 328, 356, 696, 712, 1288, 1304], "vertical_relax": 66, "via": [31, 152, 153, 154, 158, 162, 164, 167, 170, 171, 172, 210, 212, 224, 257, 290, 356, 449, 598, 707, 851, 879, 914, 970, 979, 1299], "view": 204, "virtual": 149, "visibl": [18, 231, 356, 1127, 1373], "visit": [446, 851, 1065, 1373], "visual": [252, 254, 356, 613, 925, 970], "volk": 148, "vote": [705, 707, 1297, 1299], "vowel": [720, 721, 1312, 1313], "vstack": [66, 233, 356], "w": [41, 154, 245, 291, 356, 699, 703, 705, 707, 767, 769, 892, 970, 976, 1291, 1295, 1297, 1299, 1322, 1385, 1386, 1389], "w_i": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "wa": [39, 43, 44, 63, 107, 140, 152, 153, 157, 158, 160, 164, 167, 170, 171, 172, 176, 177, 178, 179, 215, 224, 245, 259, 280, 288, 308, 313, 314, 319, 326, 356, 359, 427, 446, 449, 503, 505, 506, 654, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 722, 757, 795, 827, 828, 851, 868, 879, 892, 896, 918, 932, 970, 976, 1065, 1126, 1128, 1130, 1131, 1252, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1314, 1347, 1353, 1373, 1378, 1396, 1401], "wai": [98, 100, 133, 135, 136, 137, 139, 161, 162, 171, 244, 258, 279, 302, 335, 356, 482, 643, 682, 693, 705, 782, 841, 847, 851, 876, 883, 891, 911, 919, 927, 938, 946, 953, 970, 974, 1104, 1272, 1297, 1373], "wait": [49, 50, 51, 52, 970], "walk": 780, "want": [65, 136, 138, 152, 157, 158, 162, 164, 167, 207, 233, 264, 276, 288, 303, 356, 431, 454, 466, 513, 597, 598, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 686, 698, 715, 720, 721, 722, 776, 785, 790, 793, 799, 823, 826, 842, 851, 874, 928, 945, 970, 976, 1045, 1072, 1084, 1134, 1223, 1290, 1307, 1312, 1313, 1314, 1373, 1388], "warehous": 155, "warn": [102, 103, 106, 107, 110, 117, 119, 120, 130, 169, 639, 809, 810, 851, 1373], "watermark": [47, 356], "wb": [41, 356], "we": [47, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 212, 223, 224, 245, 260, 280, 288, 326, 356, 359, 449, 477, 482, 495, 528, 561, 589, 597, 598, 659, 663, 665, 667, 669, 671, 674, 676, 678, 707, 720, 721, 739, 789, 790, 791, 792, 793, 794, 811, 838, 839, 841, 851, 878, 879, 888, 892, 897, 902, 915, 918, 970, 1099, 1104, 1117, 1152, 1187, 1223, 1299, 1313, 1331, 1373, 1378, 1385], "weather": [720, 721, 1312, 1313], "wed": [356, 359], "wednesdai": [245, 356, 484, 487, 892, 970, 1106, 1109], "week": [245, 260, 288, 326, 356, 454, 466, 477, 482, 495, 497, 504, 659, 663, 665, 667, 669, 671, 674, 676, 678, 776, 790, 791, 793, 794, 795, 838, 839, 851, 892, 897, 918, 970, 976, 1072, 1084, 1099, 1104, 1117, 1119, 1129, 1373, 1397], "week_mask": [454, 466, 776, 1072, 1084], "weekdai": [462, 478], "weekend": [454, 466, 776, 1072, 1084], "weekli": [245, 356, 495, 892, 970, 1117], "weghorst": [707, 1299], "weight": [148, 503, 504, 505, 506, 661, 662, 664, 666, 668, 670, 673, 675, 677, 690, 851, 1128, 1129, 1130, 1131, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1283, 1373], "wei\u00df": 1396, "well": [41, 152, 153, 154, 167, 356, 534, 830, 851, 1157, 1373, 1401], "were": [207, 653, 654, 847, 851, 1251, 1252, 1373], "west": [76, 261, 356, 898, 970], "what": [53, 212, 265, 276, 356, 454, 597, 698, 722, 851, 903, 970, 1072, 1290, 1314], "whatev": 207, "when": [10, 11, 15, 18, 20, 24, 38, 39, 40, 41, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 73, 89, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 147, 148, 152, 153, 154, 155, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 183, 187, 207, 215, 223, 229, 231, 233, 235, 236, 238, 245, 259, 261, 264, 272, 279, 285, 289, 291, 294, 295, 299, 302, 308, 311, 313, 314, 318, 319, 321, 325, 331, 356, 401, 414, 431, 432, 436, 454, 466, 503, 505, 506, 512, 582, 589, 597, 610, 643, 645, 653, 654, 684, 692, 693, 698, 704, 708, 710, 711, 715, 716, 722, 724, 729, 730, 731, 734, 735, 751, 774, 776, 785, 799, 809, 834, 851, 868, 878, 887, 892, 896, 898, 902, 908, 916, 920, 921, 924, 927, 932, 933, 936, 940, 967, 970, 1014, 1027, 1045, 1046, 1054, 1067, 1072, 1084, 1127, 1128, 1130, 1131, 1134, 1137, 1163, 1208, 1251, 1252, 1271, 1273, 1276, 1290, 1296, 1300, 1302, 1303, 1307, 1308, 1314, 1316, 1321, 1322, 1323, 1326, 1327, 1347, 1348, 1353, 1373, 1388, 1401], "when1": 841, "when2": 841, "when_matched_update_al": [40, 356], "when_not_matched_insert_al": [40, 356], "where": [41, 55, 58, 107, 154, 155, 157, 213, 227, 228, 233, 236, 245, 257, 261, 271, 280, 284, 290, 303, 304, 313, 318, 323, 325, 327, 356, 383, 487, 497, 500, 502, 504, 513, 585, 591, 597, 634, 652, 682, 690, 693, 695, 722, 742, 763, 775, 781, 783, 827, 828, 830, 832, 840, 841, 851, 881, 882, 888, 892, 898, 907, 915, 928, 929, 935, 936, 937, 970, 996, 1109, 1119, 1123, 1125, 1129, 1134, 1138, 1235, 1250, 1272, 1283, 1287, 1314, 1334, 1363, 1364, 1373, 1382, 1390, 1400, 1401, 1403], "wherea": [152, 167, 288, 356, 429, 433, 482, 495, 631, 632, 659, 851, 918, 970, 1104, 1117, 1232, 1233, 1373], "wherev": [41, 264, 342, 356, 598, 851, 1223, 1373], "whether": [38, 49, 53, 55, 97, 137, 139, 147, 148, 157, 163, 164, 170, 172, 187, 191, 230, 256, 260, 297, 302, 356, 369, 371, 385, 386, 466, 467, 483, 525, 535, 552, 553, 639, 682, 683, 693, 708, 710, 774, 799, 851, 897, 902, 914, 923, 927, 970, 976, 983, 984, 998, 999, 1044, 1049, 1084, 1085, 1105, 1126, 1148, 1149, 1158, 1178, 1179, 1272, 1300, 1302, 1373, 1385, 1401], "which": [1, 6, 10, 11, 21, 36, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 66, 136, 138, 152, 153, 154, 155, 156, 157, 162, 163, 164, 167, 168, 169, 170, 171, 172, 183, 186, 188, 207, 215, 216, 223, 224, 227, 228, 231, 233, 244, 245, 250, 259, 260, 261, 280, 288, 296, 313, 314, 319, 321, 325, 326, 356, 369, 406, 414, 449, 454, 466, 477, 482, 484, 495, 504, 510, 534, 537, 540, 542, 543, 544, 545, 589, 597, 598, 610, 612, 659, 663, 665, 667, 669, 671, 674, 676, 678, 721, 739, 776, 790, 791, 793, 794, 795, 809, 810, 838, 839, 841, 851, 868, 870, 873, 876, 878, 879, 881, 883, 884, 892, 896, 897, 898, 912, 914, 918, 922, 925, 932, 933, 936, 938, 970, 976, 1019, 1027, 1072, 1084, 1099, 1104, 1106, 1117, 1127, 1129, 1134, 1135, 1157, 1161, 1164, 1166, 1167, 1168, 1169, 1215, 1273, 1331, 1351, 1353, 1373, 1383, 1389, 1401, 1404], "while": [40, 65, 153, 156, 157, 168, 172, 183, 187, 197, 207, 257, 271, 320, 323, 325, 356, 432, 653, 716, 851, 874, 907, 935, 936, 970, 1046, 1251, 1308, 1373], "white": [41, 356], "whitespac": [140, 729, 730, 731, 1321, 1322, 1323, 1396], "whole": [597, 692, 693, 705, 851, 953, 970, 1297], "whose": [58, 101, 260, 280, 356, 507, 797, 851, 897, 970, 976], "why": [873, 884, 912, 925, 970], "wide": [154, 243, 271, 280, 323, 324, 356, 907, 935, 970], "wider": 56, "width": [27, 41, 67, 152, 153, 167, 356, 359, 588, 778, 970, 1214, 1373, 1378], "wiki": 21, "wikipedia": 21, "wildcard": [149, 507, 745, 785, 786, 799, 825, 847, 851], "win_loss": [41, 356], "window": [152, 153, 167, 245, 288, 356, 446, 503, 505, 506, 598, 639, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 779, 827, 828, 851, 892, 918, 970, 1065, 1128, 1130, 1131, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1373], "window_s": [660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 827, 828, 851, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1373], "windowmappingstrategi": [639, 851], "winter": [708, 710, 720, 721, 1300, 1302], "wise": [41, 58, 154, 238, 356, 374, 375, 376, 377, 378, 379, 437, 438, 439, 508, 593, 687, 688, 689, 753, 754, 799, 825, 851, 987, 988, 989, 990, 991, 992, 1056, 1057, 1058, 1132, 1219, 1220, 1280, 1281, 1282, 1345, 1346, 1373], "wish": [215, 319, 356, 426, 427, 756, 757, 851, 868, 932, 970, 1039, 1040, 1357, 1358, 1373], "with_column": [1, 13, 61, 64, 147, 213, 245, 279, 288, 318, 324, 331, 356, 361, 366, 368, 383, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 399, 400, 401, 402, 406, 411, 412, 414, 415, 428, 429, 431, 432, 433, 436, 441, 442, 443, 444, 445, 447, 450, 454, 455, 457, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 496, 497, 499, 501, 502, 504, 511, 512, 517, 522, 524, 526, 532, 533, 534, 535, 538, 539, 541, 542, 543, 544, 545, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 596, 597, 598, 618, 620, 622, 623, 625, 627, 629, 630, 633, 634, 635, 639, 640, 643, 644, 646, 649, 653, 654, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 684, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 738, 739, 740, 742, 743, 744, 746, 749, 750, 755, 758, 765, 767, 769, 772, 776, 777, 778, 779, 780, 784, 785, 786, 788, 789, 791, 792, 796, 806, 809, 810, 812, 815, 817, 820, 831, 835, 837, 839, 841, 847, 851, 873, 884, 892, 894, 911, 912, 918, 925, 940, 970, 976, 1066, 1103, 1244, 1302, 1373, 1401], "with_column_nam": 167, "with_columns_seq": [356, 970], "with_context": 970, "with_field": [598, 851], "with_replac": [292, 356, 577, 681, 851, 1203, 1270, 1373], "with_row_count": [356, 970], "with_row_index": [1, 288, 332, 356, 663, 665, 667, 669, 671, 674, 676, 678, 851, 942, 970, 1271, 1373, 1378], "within": [47, 53, 54, 55, 67, 77, 85, 176, 177, 178, 179, 198, 199, 201, 213, 244, 245, 246, 260, 288, 326, 356, 526, 649, 693, 851, 892, 897, 918, 970, 1150, 1373, 1401], "without": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 74, 80, 99, 107, 110, 132, 140, 143, 144, 145, 146, 147, 148, 156, 159, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 259, 261, 265, 303, 313, 314, 318, 324, 325, 356, 359, 360, 361, 446, 447, 454, 466, 528, 598, 646, 660, 661, 663, 665, 667, 669, 671, 672, 674, 676, 678, 698, 708, 710, 722, 776, 778, 782, 809, 810, 829, 851, 873, 874, 884, 896, 898, 903, 912, 928, 936, 944, 970, 974, 1049, 1065, 1066, 1072, 1084, 1152, 1244, 1257, 1258, 1261, 1263, 1264, 1290, 1300, 1302, 1314, 1351, 1353, 1356, 1373, 1378, 1403], "without_fil": [156, 168, 169], "wod": [731, 1323], "womp": [322, 356, 934, 970], "word": [155, 720, 721, 730, 731, 742, 1334, 1396], "work": [41, 74, 80, 152, 153, 158, 162, 164, 173, 295, 331, 356, 369, 371, 407, 431, 432, 435, 436, 507, 516, 561, 590, 598, 622, 623, 625, 627, 629, 630, 639, 711, 715, 716, 724, 735, 759, 809, 851, 914, 921, 940, 970, 974, 976, 983, 984, 1020, 1045, 1046, 1051, 1054, 1141, 1187, 1216, 1303, 1307, 1308, 1316, 1327, 1359, 1373], "workaround": 356, "workbook": [41, 157, 163, 356], "workday_raas_format": 200, "worker": [914, 970], "working_with_conditional_format": [41, 356], "working_with_sparklin": [41, 356], "worksheet": [41, 157, 163, 356], "workspac": 192, "workspace_url": 192, "world": [1, 21, 698, 722, 729, 730, 731, 976, 1194, 1290, 1314, 1321, 1322, 1323, 1384, 1387, 1396], "wors": [927, 970], "worth": [561, 1187], "worthwhil": [176, 178], "would": [106, 152, 153, 166, 167, 212, 314, 318, 356, 359, 382, 393, 454, 466, 566, 598, 609, 639, 645, 649, 751, 774, 776, 834, 851, 995, 1006, 1072, 1084, 1192, 1243, 1246, 1343, 1353, 1373, 1378, 1399], "wrap": [87, 140, 428, 534, 597, 851, 1041, 1373], "wrap_numer": [428, 851, 1041, 1373], "wrapper": [65, 874, 970], "writabl": [36, 38, 43, 44, 45, 46, 47, 296, 314, 356, 1353, 1373], "write": [36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 143, 151, 153, 158, 207, 219, 356, 436, 613, 616, 851, 900, 925, 970, 976, 1054, 1373], "write_avro": 356, "write_clipboard": [151, 356], "write_csv": [37, 153, 167, 356], "write_databas": 356, "write_delta": 356, "write_excel": 356, "write_iceberg": 356, "write_ipc": [158, 356], "write_ipc_stream": 356, "write_json": 356, "write_markdown_frame_to_stdout": 207, "write_ndjson": [45, 356], "write_parquet": 356, "write_t": [47, 356], "write_to_dataset": [47, 356], "writeabl": [314, 356, 1353, 1373], "writer": [40, 356], "writer_properti": [40, 356], "writerproperti": [40, 356], "written": [6, 36, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 296, 356, 612, 922, 970], "ww": [1396, 1403], "www": [717, 747, 1309], "x": [28, 58, 66, 89, 109, 134, 140, 143, 152, 153, 155, 157, 163, 167, 180, 181, 183, 211, 231, 249, 252, 254, 259, 280, 290, 291, 320, 323, 324, 356, 359, 361, 366, 368, 370, 389, 394, 415, 441, 448, 501, 502, 517, 522, 524, 526, 549, 556, 568, 594, 596, 597, 598, 618, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 638, 644, 652, 653, 654, 658, 687, 690, 726, 749, 750, 755, 758, 765, 767, 769, 772, 773, 779, 783, 785, 786, 788, 799, 811, 812, 815, 817, 820, 825, 830, 835, 841, 851, 896, 902, 926, 928, 935, 970, 975, 976, 1007, 1060, 1137, 1156, 1223, 1251, 1252, 1280, 1283, 1318, 1351, 1355, 1356, 1373, 1378, 1385, 1386, 1389, 1395, 1396, 1401, 1403], "x00": [410, 411, 412, 413, 414, 416, 700, 1023, 1024, 1025, 1026, 1027, 1029, 1292], "x01": [414, 1027], "x05": [414, 1027], "x07": 415, "x1": 415, "x10": [414, 1027], "x80": 415, "x83": 415, "x88": 415, "x8e": 415, "x99": 415, "x_": [504, 851, 1129, 1373], "x_0": [324, 356, 503, 504, 505, 506, 851, 1128, 1129, 1130, 1131, 1373], "x_1": [324, 356, 504, 851, 1129, 1373], "x_2": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "x_i": [504, 851, 1129, 1373], "x_invers": [644, 851], "x_pow_8": 1395, "x_round": 1395, "x_round_1": 1395, "x_squar": [644, 851], "x_t": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "x_uniqu": [621, 851], "x_y": [394, 568], "xb": 415, "xb9neq": 415, "xbd": 415, "xc14": 415, "xd3": 415, "xdist": 1404, "xee": 415, "xf4v": 415, "xf9": 415, "xfb": 415, "xff": [410, 411, 412, 413, 416, 700, 1023, 1024, 1025, 1026, 1029, 1292], "xi": [706, 1298], "xl": 157, "xlog2": [620, 644, 851], "xlsb": 157, "xlsx": [41, 157, 356], "xlsx2csv": [157, 175], "xlsx2csv_option": 157, "xlsxwriter": [41, 175, 356], "xor": [425, 851, 1038, 1373, 1392], "xor_xi": [765, 851], "xx": [11, 59, 61, 187, 223, 250, 303, 356, 878, 970, 976, 1389, 1396, 1403], "xxx": [227, 356, 747, 881, 970], "xy": [59, 61], "xyz": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 366, 699, 706, 851, 1291, 1298, 1349, 1373, 1396], "y": [28, 58, 66, 89, 109, 134, 140, 143, 180, 181, 183, 211, 231, 252, 254, 259, 280, 290, 291, 320, 323, 324, 356, 359, 366, 368, 370, 389, 394, 415, 484, 487, 501, 502, 522, 524, 549, 556, 568, 596, 598, 621, 623, 625, 627, 629, 630, 633, 634, 638, 652, 653, 654, 658, 734, 736, 737, 749, 758, 765, 767, 769, 772, 773, 783, 788, 795, 811, 815, 817, 820, 830, 835, 851, 896, 926, 928, 935, 970, 975, 976, 1007, 1106, 1109, 1251, 1252, 1326, 1328, 1329, 1373, 1378, 1389, 1396, 1397, 1403], "y_": [503, 504, 505, 506, 851, 1128, 1129, 1130, 1131, 1373], "y_0": [324, 356, 503, 504, 505, 506, 851, 1128, 1129, 1130, 1131, 1373], "y_1": [324, 356], "y_i": [504, 851, 1129, 1373], "y_mul": 749, "y_t": [503, 505, 506, 851, 1128, 1130, 1131, 1373], "y_uniqu": [621, 851], "ya": [724, 1316], "ya29": 169, "ye": [143, 841], "year": [53, 55, 245, 260, 288, 303, 326, 356, 454, 466, 467, 468, 477, 478, 480, 482, 495, 496, 659, 663, 665, 667, 669, 671, 674, 676, 678, 776, 789, 790, 791, 792, 793, 794, 838, 839, 851, 892, 897, 918, 970, 976, 1072, 1084, 1085, 1086, 1099, 1100, 1102, 1104, 1117, 1118, 1397], "yellow": [356, 360, 410, 411, 412, 413, 416], "yield": [137, 139, 152, 153, 154, 167, 231, 233, 256, 320, 356, 517, 597, 639, 851, 970, 1127, 1134, 1373], "you": [1, 11, 15, 41, 47, 52, 58, 65, 66, 133, 135, 136, 137, 138, 139, 149, 152, 153, 154, 155, 157, 158, 161, 162, 164, 166, 167, 171, 173, 207, 215, 233, 236, 245, 256, 257, 260, 264, 276, 280, 284, 288, 289, 290, 291, 303, 310, 313, 319, 320, 321, 323, 342, 356, 359, 426, 427, 431, 454, 466, 474, 475, 477, 481, 484, 487, 507, 513, 534, 561, 589, 597, 598, 613, 639, 644, 645, 651, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 686, 698, 715, 720, 721, 722, 742, 745, 751, 756, 757, 776, 785, 790, 793, 795, 799, 809, 813, 823, 826, 830, 834, 842, 851, 868, 874, 888, 892, 897, 914, 915, 918, 925, 928, 932, 933, 935, 945, 953, 970, 974, 976, 1039, 1040, 1045, 1072, 1084, 1096, 1097, 1103, 1106, 1109, 1134, 1157, 1187, 1223, 1242, 1243, 1248, 1290, 1307, 1312, 1313, 1314, 1334, 1343, 1351, 1357, 1358, 1373, 1378, 1383, 1388, 1404], "your": [39, 41, 57, 58, 100, 147, 152, 153, 154, 155, 157, 173, 207, 257, 259, 264, 290, 291, 294, 310, 330, 335, 342, 356, 359, 459, 504, 519, 598, 707, 734, 736, 737, 744, 813, 851, 896, 902, 920, 939, 946, 953, 970, 974, 1077, 1129, 1223, 1299, 1326, 1328, 1329, 1336, 1373, 1378, 1404], "yy": [11, 59, 61, 187, 223, 250, 303, 356, 878, 970, 976, 1389, 1396, 1403], "yyi": [227, 356, 747, 881, 970], "yyyi": [41, 356], "yz": [59, 61], "z": [41, 66, 89, 140, 181, 231, 252, 254, 259, 290, 291, 320, 323, 324, 356, 366, 368, 370, 526, 556, 598, 623, 625, 627, 629, 630, 638, 652, 653, 654, 698, 706, 708, 710, 722, 734, 737, 767, 769, 788, 815, 817, 820, 826, 830, 835, 851, 896, 926, 928, 935, 970, 975, 976, 1137, 1251, 1252, 1290, 1298, 1300, 1302, 1314, 1326, 1329, 1373, 1385, 1389, 1401, 1403], "z_0": [324, 356], "z_1": [324, 356], "zap": 976, "zero": [29, 41, 133, 134, 150, 152, 153, 158, 160, 164, 182, 185, 211, 235, 245, 257, 289, 303, 308, 314, 315, 356, 512, 589, 594, 679, 682, 690, 744, 758, 851, 871, 887, 892, 970, 1053, 1137, 1215, 1283, 1336, 1347, 1353, 1354, 1373, 1395, 1401], "zero_copy_onli": [1353, 1373], "zfill": [719, 765, 851, 1311], "zip": 1404, "zip_with": [238, 356, 1373], "zone": [73, 183, 184, 187, 455, 459, 481, 504, 737, 792, 793, 794, 851, 976, 1073, 1077, 1103, 1129, 1329, 1373], "zoneinfo": [73, 976], "zoom": [41, 356], "zstd": [40, 43, 44, 47, 50, 52, 356, 970], "zz": [187, 223, 250, 303, 356, 878, 970, 1389, 1396, 1403], "zzz": 747, "\u03bc": [140, 216, 245, 257, 288, 290, 291, 310, 326, 356, 455, 456, 458, 459, 460, 461, 463, 465, 469, 471, 472, 474, 475, 476, 477, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 659, 663, 665, 667, 669, 671, 674, 676, 678, 734, 737, 792, 793, 794, 795, 801, 851, 870, 892, 918, 970, 976, 1073, 1074, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1089, 1090, 1094, 1096, 1097, 1098, 1099, 1103, 1104, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1326, 1329, 1396], "\u0441\u0438\u043d\u0438\u0439": 1396, "\u0967\u096f\u096f\u096f": 976, "\u0968\u0966\u096d\u096d": 976, "\u4eac\u90fd": 976, "\u5927\u962a": 976, "\u6771\u4eac": [431, 432, 715, 716, 976, 1045, 1046, 1307, 1308], "\u90fd\u5e02": 976, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [717, 1309], "\uff54\uff45\uff53\uff54": 1396, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1396, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1396, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1396, "\ud835\udf0b": 1395}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType.to_dtype_expr", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.ScanCastOptions", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.dtype_of", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.parquet.ParquetFieldOverwrites", "polars.io.partition.BasePartitionContext", "polars.io.partition.KeyedPartition", "polars.io.partition.KeyedPartitionContext", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_metadata", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.__setitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.match_to_schema", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "DataType expressions", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_business_day", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_close", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_kurtosis", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.__getitem__", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.match_to_schema", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.QueryOptFlags", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.backward_fill", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.bottom_k_by", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_business_day", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.forward_fill", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_close", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.repeat_by", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_kurtosis", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.top_k_by", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1389, 1402], "IF": 1393, "__array__": [209, 978], "__arrow_c_stream__": [210, 979], "__dataframe__": 211, "__getitem__": [212, 866, 980], "__iter__": 334, "__setitem__": 213, "ab": [365, 981, 1395], "aco": 1398, "acosd": 1398, "add": 366, "add_business_dai": [454, 1072], "agg": [335, 946], "agg_group": 367, "aggreg": [208, 364, 865, 977, 1390], "alia": [368, 982], "alias": [1390, 1395, 1396], "align_fram": 58, "all": [336, 369, 385, 552, 766, 947, 983, 998, 1178, 1402], "all_horizont": 767, "and_": 370, "ani": [371, 386, 553, 768, 984, 999, 1179], "any_horizont": 769, "api": [1, 59, 60, 61, 62, 863, 1401], "append": [372, 985], "approx_n_uniqu": [214, 373, 770, 867, 986], "arang": 771, "arcco": [374, 987], "arccosh": [375, 988], "arcsin": [376, 989], "arcsinh": [377, 990], "arctan": [378, 991], "arctan2": 772, "arctan2d": 773, "arctanh": [379, 992], "arg_max": [380, 387, 554, 993, 1000, 1180], "arg_min": [381, 388, 555, 994, 1001, 1181], "arg_sort": [382, 995], "arg_sort_bi": 774, "arg_tru": [383, 996], "arg_uniqu": [384, 997], "arg_wher": 775, "arr": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "arrai": [67, 843, 1365, 1391], "array_agg": 1391, "array_contain": 1391, "array_get": 1391, "array_length": 1391, "array_low": 1391, "array_mean": 1391, "array_revers": 1391, "array_sum": 1391, "array_to_str": 1391, "array_uniqu": 1391, "array_upp": 1391, "asin": 1398, "asind": 1398, "assert": 1404, "assert_frame_equ": 176, "assert_frame_not_equ": 177, "assert_series_equ": 178, "assert_series_not_equ": 179, "atan": 1398, "atan2": 1398, "atan2d": 1398, "atand": 1398, "attribut": [351, 965, 1366], "avail": 1, "avg": 1390, "avro": 864, "backward_fil": [409, 1022], "base_utc_offset": [455, 1073], "basepartitioncontext": 144, "batched_read": 142, "batchedcsvread": 142, "bin": [410, 411, 412, 413, 414, 415, 416, 1023, 1024, 1025, 1026, 1027, 1028, 1029], "binari": [68, 844, 857, 1367], "bit_and": 1392, "bit_count": 1392, "bit_length": 1396, "bit_or": 1392, "bit_xor": 1392, "bitwis": 1392, "bitwise_and": [417, 1030], "bitwise_count_on": [418, 1031], "bitwise_count_zero": [419, 1032], "bitwise_leading_on": [420, 1033], "bitwise_leading_zero": [421, 1034], "bitwise_or": [422, 1035], "bitwise_trailing_on": [423, 1036], "bitwise_trailing_zero": [424, 1037], "bitwise_xor": [425, 1038], "boolean": [69, 845, 1368], "bottom_k": [215, 426, 868, 1039], "bottom_k_bi": [427, 1040], "build_info": 63, "business_day_count": 776, "cach": 869, "cancel": 962, "cast": [216, 428, 864, 870, 1041, 1399], "cast_time_unit": [456, 1074], "cat": [429, 430, 431, 432, 433, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "catalog": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "cataloginfo": 198, "categor": 70, "categori": [846, 1369], "categoricalremappingwarn": 102, "cbrt": [434, 1050, 1395], "ceil": [435, 1051, 1395], "centuri": [457, 1075], "chronoformatwarn": 103, "chunk_length": 1052, "claus": 1389, "clear": [217, 871, 1053], "clip": [436, 1054], "clipboard": 864, "clone": [218, 872, 1055], "cloud": 864, "co": [437, 1056, 1398], "coalesc": [777, 1393], "col": 847, "collect": 873, "collect_al": 64, "collect_all_async": 65, "collect_async": 874, "collect_schema": [219, 875], "column": [180, 181, 220, 848, 876], "columninfo": 199, "columnnotfounderror": 104, "combin": [458, 1076], "comparison": [857, 1377], "comput": [352, 849, 1370], "computeerror": 105, "concat": [66, 556, 696, 1182, 1288, 1396], "concat_arr": 778, "concat_list": 779, "concat_str": 780, "concat_w": 1396, "condit": 1393, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 207], "conjunct": 857, "contain": [389, 410, 557, 697, 1002, 1023, 1183, 1289], "contains_ani": [698, 1290], "context": 207, "convers": 862, "convert_time_zon": [459, 1077], "corr": [221, 781, 1390], "cosd": 1398, "cosh": [438, 1057], "cot": [439, 1058, 1398], "cotd": 1398, "count": [222, 337, 440, 782, 877, 948, 1059, 1390], "count_match": [390, 558, 699, 1003, 1184, 1291], "cov": 783, "creat": 1403, "create_list_strategi": 182, "credenti": 864, "credentialprovid": 32, "credentialprovideraw": 33, "credentialproviderazur": 34, "credentialprovidergcp": 35, "csv": [142, 864], "cum_count": [441, 784, 1060], "cum_fold": 785, "cum_max": [442, 1061], "cum_min": [443, 1062], "cum_prod": [444, 1063], "cum_reduc": 786, "cum_sum": [445, 787, 1064], "cum_sum_horizont": 788, "cumulative_ev": [446, 1065], "customufuncwarn": 106, "cut": [447, 1066], "dai": [462, 1080], "data": 362, "databas": 864, "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 183, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356], "dataorientationwarn": 107, "dataset": 864, "datasourceformat": 200, "datatyp": [48, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 361, 362], "date": [72, 460, 789, 1078, 1396], "date_part": 1397, "date_rang": [790, 791], "datetim": [73, 461, 792, 1079], "datetime_rang": [793, 794], "decim": 74, "decod": [411, 700, 1024, 1292], "decor": 207, "defer": 97, "degre": [448, 1398], "delet": 1403, "delta": 864, "describ": [223, 878, 1067], "descript": [353, 966, 1371], "deseri": [224, 449, 879], "diff": [450, 559, 1068, 1185], "disable_string_cach": 98, "distinct": 1389, "div": 1395, "document": 1401, "dot": [451, 1069], "drop": [225, 880, 1403], "drop_in_plac": 226, "drop_nan": [227, 452, 881, 1070], "drop_nul": [228, 453, 560, 882, 1071, 1186], "dst_offset": [463, 1081], "dt": [454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121], "dtype": [184, 229, 883, 1122], "dtype_of": 99, "duplicateerror": 108, "durat": [75, 795], "element": 796, "enable_string_cach": 100, "encod": [412, 701, 1025, 1293], "ends_with": [413, 429, 702, 1026, 1042, 1294, 1396], "engine_config": 945, "entropi": [500, 1123], "enum": 76, "epoch": [464, 1082], "eq": [501, 602, 1124], "eq_miss": [502, 1125], "equal": [230, 1126], "error": 363, "escape_regex": [101, 703, 1295], "estimated_s": [231, 1127], "eval": [561, 1187], "ewm_mean": [503, 1128], "ewm_mean_bi": [504, 1129], "ewm_std": [505, 1130], "ewm_var": [506, 1131], "exampl": [1, 976, 1404], "excel": 864, "except": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 363, 1402], "exclud": [507, 797], "execut": 1382, "execute_glob": 1383, "exp": [508, 1132, 1395], "explain": [884, 1403], "explain_al": 132, "explod": [232, 391, 509, 562, 704, 885, 1004, 1133, 1188, 1296], "export": [354, 1372], "expr": [365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765], "express": [361, 851, 974, 1401], "extend": [1, 233, 1134], "extend_const": [510, 1135], "extract": [705, 1297, 1397], "extract_al": [706, 1298], "extract_group": [707, 1299], "extract_mani": [708, 1300], "feather": 864, "fetch": 963, "fetch_block": 964, "field": [77, 745, 1337, 1338], "fill_nan": [234, 511, 886, 1136], "fill_nul": [235, 512, 887, 1137], "filter": [236, 513, 888, 1138], "find": [709, 1301], "find_mani": [710, 1302], "first": [338, 392, 514, 563, 798, 889, 949, 1005, 1139, 1189, 1390], "flag": [237, 1140], "flatten": 515, "float32": 78, "float64": 79, "floor": [516, 1141, 1395], "floordiv": 517, "fold": [238, 799], "format": 800, "forward_fil": [518, 1142], "frame": 1401, "from": 1389, "from_arrow": 133, "from_datafram": 134, "from_dict": [135, 136], "from_epoch": 801, "from_json": 519, "from_numpi": 137, "from_panda": 138, "from_record": 139, "from_repr": 140, "function": [1, 361, 850, 862, 976, 1394], "gather": [520, 564, 1143, 1190], "gather_everi": [239, 521, 565, 890, 1144, 1191], "ge": [522, 1145], "get": [393, 523, 566, 1006, 1192], "get_categori": [430, 1043], "get_chunk": 1146, "get_column": [240, 242], "get_column_index": 241, "get_index_typ": 141, "get_polars_schema": 203, "get_table_info": 193, "glimps": 243, "global": 1401, "gpuengin": [945, 967], "greatest": 1393, "group": [802, 1389], "group_bi": [244, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 891, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961], "group_by_dynam": [245, 892], "groupbi": [334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 355, 968], "gt": [524, 1147], "has_multiple_output": 603, "has_nul": [525, 1148], "has_valid": 1149, "hash": [526, 1150], "hash_row": 246, "have": 1389, "head": [247, 339, 527, 567, 711, 803, 893, 950, 1151, 1193, 1303], "height": 248, "helper": 1404, "hist": [528, 1152], "hour": [465, 1083], "hstack": 249, "iceberg": 864, "ifnul": 1393, "implod": [529, 804, 1153], "import": 976, "in_process": [962, 963, 964], "index": 0, "index_of": [530, 1154], "initcap": 1396, "inprocessqueri": [962, 963, 964, 969], "input": 864, "insert_column": 250, "inspect": [531, 894], "instanc": 207, "int128": 80, "int16": 81, "int32": 82, "int64": 83, "int8": 84, "int_rang": [805, 806], "interfac": 1400, "interpol": [251, 532, 895, 1155], "interpolate_bi": [533, 1156], "intersect": 1402, "introduct": 1401, "invalidoperationerror": 109, "io": [142, 143, 144, 145, 146, 147, 974], "ipc": 864, "is_between": [534, 1157], "is_business_dai": [466, 1084], "is_clos": [535, 1158], "is_column": 604, "is_column_select": 605, "is_dupl": [252, 536, 1159], "is_empti": [253, 1160], "is_finit": [537, 1161], "is_first_distinct": [538, 1162], "is_in": [539, 1163], "is_infinit": [540, 1164], "is_last_distinct": [541, 1165], "is_leap_year": [467, 1085], "is_liter": 606, "is_loc": 1044, "is_nan": [542, 1166], "is_not_nan": [543, 1167], "is_not_nul": [544, 1168], "is_nul": [545, 1169], "is_regex_project": 607, "is_sort": 1170, "is_uniqu": [254, 546, 1171], "iso_year": [468, 1086], "item": [255, 1172], "iter_column": 256, "iter_row": 257, "iter_slic": 258, "join": [259, 394, 568, 712, 896, 1007, 1194, 1304, 1389], "join_asof": [260, 897], "join_wher": [261, 898], "json": 864, "json_decod": [713, 1305], "json_encod": [746, 1339], "json_norm": 148, "json_path_match": [714, 1306], "keep": 622, "keyedpartit": 145, "keyedpartitioncontext": 146, "kurtosi": [547, 1173], "lake": 864, "last": [340, 395, 548, 569, 807, 899, 951, 1008, 1174, 1195, 1390], "lazi": [262, 900], "lazyfram": [49, 50, 51, 52, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 970], "lazygroupbi": [946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961], "le": [549, 1175], "least": 1393, "left": 1396, "len": [341, 550, 570, 808, 952, 1176, 1196], "len_byt": [431, 715, 1045, 1307], "len_char": [432, 716, 1046, 1308], "length": 1396, "limit": [263, 551, 901, 1177, 1389], "linear_spac": [809, 810], "list": [85, 185, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 852, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1374], "list_catalog": 194, "list_namespac": 195, "list_tabl": 196, "lit": 811, "ln": 1395, "load": [2, 207], "load_from_fil": 3, "load_profil": 186, "log": [592, 1218, 1395], "log10": [593, 1219, 1395], "log1p": [594, 1220, 1395], "log2": 1395, "lower": 1396, "lower_bound": [595, 1221], "lt": [596, 1222], "ltrim": 1396, "manag": 207, "manipul": [358, 855, 972, 1376], "map": 623, "map_batch": [597, 812, 902], "map_el": [598, 1223], "map_field": 624, "map_group": [342, 813, 953], "map_row": 264, "mapwithoutreturndtypewarn": 110, "match_to_schema": [265, 903], "math": 1395, "max": [266, 343, 396, 571, 599, 814, 904, 954, 1009, 1087, 1197, 1224, 1390], "max_horizont": [267, 815], "mean": [268, 344, 572, 600, 816, 905, 955, 1088, 1198, 1225], "mean_horizont": [269, 817], "median": [270, 345, 397, 573, 601, 818, 906, 956, 1010, 1089, 1199, 1226, 1390], "melt": [271, 907], "merge_sort": [272, 908], "meta": [602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 853], "metadata": 973, "method": 1401, "microsecond": [469, 1090], "millennium": [470, 1091], "millisecond": [471, 1092], "min": [273, 346, 398, 574, 617, 819, 909, 957, 1011, 1093, 1200, 1227, 1390], "min_horizont": [274, 820], "minut": [472, 1094], "miscellan": [357, 854, 862, 971, 1375], "mod": [618, 1395], "mode": [619, 1228], "moduleupgraderequirederror": 111, "month": [473, 1095], "month_end": [474, 1096], "month_start": [475, 1097], "mul": 620, "multipl": [207, 862], "n_chunk": [275, 1229], "n_uniqu": [276, 347, 399, 575, 621, 821, 958, 1012, 1201, 1230], "name": [622, 623, 624, 625, 626, 627, 628, 629, 630, 848, 856, 1231, 1402], "namespaceinfo": 201, "nan_max": [631, 1232], "nan_min": [632, 1233], "nanosecond": [476, 1098], "ne": [608, 633, 1234], "ne_miss": [634, 1235], "neg": 635, "nest": 362, "new": 1, "new_from_index": 1236, "next_batch": 142, "nodataerror": 112, "normal": [717, 1309, 1396], "norowsreturnederror": 113, "not_": [636, 1237], "nth": 822, "null": 86, "null_count": [277, 637, 910, 1238], "nullif": 1393, "numer": [362, 857, 1377], "object": 87, "octet_length": 1396, "od": 864, "offset": 1389, "offset_bi": [477, 1099], "ones": 823, "oper": [857, 976, 1377, 1402, 1403], "option": [207, 864], "or_": 638, "order": 1389, "ordinal_dai": [478, 1100], "other": 362, "outofboundserror": 114, "output": 864, "output_nam": 609, "over": 639, "pad_end": [718, 1310], "pad_start": [719, 1311], "panic": 363, "panicexcept": 115, "parametercollisionerror": 116, "parametr": [180, 181, 182, 183, 184, 185, 186, 187, 188, 1404], "parquet": [143, 864], "parquetfieldoverwrit": 143, "partit": [144, 145, 146, 864], "partition_bi": 278, "partitionbykei": 53, "partitionmaxs": 54, "partitionpart": 55, "pct_chang": [640, 1239], "peak_max": [641, 1240], "peak_min": [642, 1241], "performancewarn": 117, "pi": 1395, "pipe": [279, 643, 911], "pivot": 280, "plot": [359, 1378], "plugin": [147, 149, 974], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 847, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1404], "polarserror": 118, "polarsinefficientmapwarn": 119, "polarswarn": 120, "pop": 610, "pow": [644, 1242, 1395], "prefix": 625, "prefix_field": 626, "product": [281, 645, 1243], "profil": [912, 1404], "provid": 1, "pyarrow": 864, "python": [863, 1401], "qcut": [646, 1244], "quantil": [282, 348, 647, 824, 913, 959, 1245], "quantile_cont": 1390, "quantile_disc": 1390, "quarter": [479, 1101], "queri": [862, 1401], "queryoptflag": 944, "radian": [648, 1398], "random": 862, "rank": [649, 1246], "read_avro": 150, "read_clipboard": 151, "read_csv": 152, "read_csv_batch": 153, "read_databas": 154, "read_database_uri": 155, "read_delta": 156, "read_excel": 157, "read_ipc": 158, "read_ipc_schema": 159, "read_ipc_stream": 160, "read_json": 161, "read_ndjson": 162, "read_od": 163, "read_parquet": 164, "read_parquet_metadata": 165, "read_parquet_schema": 166, "rechunk": [283, 650, 1247], "reduc": 825, "refer": 863, "regexp_lik": 1396, "regist": 1384, "register_dataframe_namespac": 59, "register_expr_namespac": 60, "register_glob": 1385, "register_io_sourc": 147, "register_lazyframe_namespac": 61, "register_mani": 1386, "register_plugin_funct": 149, "register_series_namespac": 62, "registr": 1, "reinterpret": [414, 651, 1027, 1248], "remot": 914, "remov": [284, 915], "renam": [285, 916, 1249], "rename_field": [747, 1340], "repeat": 826, "repeat_bi": [652, 1250], "replac": [480, 653, 720, 1102, 1251, 1312, 1396], "replace_al": [721, 1313], "replace_column": 286, "replace_mani": [722, 1314], "replace_strict": [654, 1252], "replace_time_zon": [481, 1103], "reshap": [655, 1253], "restore_default": 4, "revers": [287, 400, 576, 656, 723, 917, 1013, 1202, 1254, 1315, 1396], "right": 1396, "rle": [657, 1255], "rle_id": [658, 1256], "roll": [288, 659, 918], "rolling_corr": 827, "rolling_cov": 828, "rolling_kurtosi": [660, 1257], "rolling_map": [661, 1258], "rolling_max": [662, 1259], "rolling_max_bi": 663, "rolling_mean": [664, 1260], "rolling_mean_bi": 665, "rolling_median": [666, 1261], "rolling_median_bi": 667, "rolling_min": [668, 1262], "rolling_min_bi": 669, "rolling_quantil": [670, 1263], "rolling_quantile_bi": 671, "rolling_skew": [672, 1264], "rolling_std": [673, 1265], "rolling_std_bi": 674, "rolling_sum": [675, 1266], "rolling_sum_bi": 676, "rolling_var": [677, 1267], "rolling_var_bi": 678, "root_nam": 611, "round": [482, 679, 1104, 1268, 1395], "round_sig_fig": [680, 1269], "row": [289, 290], "rows_by_kei": 291, "rowserror": 121, "rtrim": 1396, "sampl": [292, 577, 681, 1203, 1270], "save": [5, 207], "save_to_fil": 6, "scan": 864, "scan_csv": 167, "scan_delta": 168, "scan_iceberg": 169, "scan_ipc": 170, "scan_ndjson": 171, "scan_parquet": 172, "scan_pyarrow_dataset": 173, "scan_tabl": 197, "scancastopt": 56, "scatter": 1271, "schema": [293, 919, 975, 1341], "schemaerror": 124, "schemafieldnotfounderror": 125, "search_sort": [682, 1272], "second": [483, 1105], "select": [294, 358, 829, 855, 920, 972, 1376, 1389], "select_seq": [295, 921], "selector": 976, "seri": [187, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1373], "serial": [296, 357, 612, 922, 971], "set": [976, 1273, 1402], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [578, 1204], "set_engine_affin": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_intersect": [579, 1205], "set_profil": 188, "set_random_se": 174, "set_sort": [297, 683, 923, 1274], "set_streaming_chunk_s": 15, "set_symmetric_differ": [580, 1206], "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_union": [581, 1207], "set_verbos": 30, "shape": [298, 1275], "shapeerror": 126, "shift": [299, 401, 582, 684, 924, 1014, 1208, 1276], "show": 1403, "show_graph": [613, 925], "show_vers": 175, "shrink_dtyp": [685, 1277], "shrink_to_fit": [300, 1278], "shuffl": [686, 1279], "sign": [687, 1280, 1395], "sin": [688, 1281, 1398], "sind": 1398, "sinh": [689, 1282], "sink_csv": 49, "sink_ipc": 50, "sink_ndjson": 51, "sink_parquet": 52, "size": [415, 1028], "skew": [690, 1283], "slice": [301, 583, 691, 724, 926, 1209, 1284, 1316], "sort": [302, 402, 584, 692, 927, 1015, 1210, 1285], "sort_bi": 693, "split": [725, 1317], "split_exact": [726, 1318], "split_part": 1396, "splitn": [727, 1319], "sql": [303, 830, 928, 1389, 1394, 1400, 1401], "sql_expr": 831, "sqlcontext": [1382, 1383, 1384, 1385, 1386, 1387, 1388, 1401], "sqlinterfaceerror": 122, "sqlsyntaxerror": 123, "sqrt": [694, 1286, 1395], "starts_with": [416, 433, 728, 1029, 1047, 1320, 1396], "state": [31, 207], "std": [304, 403, 585, 695, 832, 929, 1016, 1211, 1287], "stddev": 1390, "str": [696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336], "strategi": 1404, "strftime": [484, 1106, 1397], "string": [88, 362, 858, 1379, 1396], "string_to_arrai": 1396, "stringcach": [57, 862], "stringcachemismatcherror": 127, "strip_char": [729, 1321], "strip_chars_end": [730, 1322], "strip_chars_start": [731, 1323], "strip_prefix": [732, 1324], "strip_suffix": [733, 1325], "strpo": 1396, "strptime": [734, 1326, 1396], "struct": [89, 745, 746, 747, 748, 749, 833, 859, 1337, 1338, 1339, 1340, 1341, 1342, 1380], "structfieldnotfounderror": 128, "style": 360, "sub": 750, "substr": 1396, "suffix": 627, "suffix_field": 628, "sum": [305, 349, 404, 586, 751, 834, 930, 960, 1017, 1212, 1343, 1390], "sum_horizont": [306, 835], "tabl": [1387, 1403], "tableinfo": [202, 203], "tabletyp": 204, "tail": [307, 350, 587, 735, 752, 836, 931, 961, 1213, 1327, 1344], "tan": [753, 1345, 1398], "tand": 1398, "tanh": [754, 1346], "tempor": [362, 860, 1381, 1397], "test": [176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 1404], "thread_pool_s": 189, "threadpool_s": 190, "time": [90, 485, 837, 1107], "time_rang": [838, 839], "timestamp": [486, 1108, 1396], "to_arrai": [588, 1214], "to_arrow": [308, 1347], "to_dat": [736, 1328], "to_datetim": [737, 1329], "to_decim": [738, 1330], "to_dict": [309, 310], "to_dtype_expr": 48, "to_dummi": [311, 1348], "to_fram": 1349, "to_init_repr": [312, 1350], "to_integ": [739, 1331], "to_jax": [313, 1351], "to_list": [405, 1018, 1352], "to_loc": 1048, "to_lowercas": [629, 740, 1332], "to_numpi": [314, 1353], "to_panda": [315, 1354], "to_phys": [755, 1355], "to_seri": 316, "to_str": [487, 1109], "to_struct": [317, 406, 589, 1019, 1215], "to_tim": [741, 1333], "to_titlecas": [742, 1334], "to_torch": [318, 1356], "to_uppercas": [630, 743, 1335], "toomanyrowsreturnederror": 129, "top_k": [319, 756, 932, 1357], "top_k_bi": [757, 1358], "total_dai": [488, 1110], "total_hour": [489, 1111], "total_microsecond": [490, 1112], "total_millisecond": [491, 1113], "total_minut": [492, 1114], "total_nanosecond": [493, 1115], "total_second": [494, 1116], "transpos": 320, "tree_format": 614, "trigonometri": 1398, "truediv": 758, "truncat": [495, 1117, 1403], "try_cast": 1399, "type": [362, 1399], "uint16": 91, "uint32": 92, "uint64": 93, "uint8": 94, "undo_alias": 615, "union": 1402, "uniqu": [321, 407, 590, 759, 933, 1020, 1216, 1359], "unique_count": [760, 1360], "uniti": [198, 199, 200, 201, 202, 203, 204, 206], "unknown": 95, "unnest": [322, 748, 934, 1342, 1391, 1403], "unpivot": [323, 935], "unregist": 1388, "unstablewarn": 130, "unstack": 324, "unsuitablesqlerror": 131, "updat": [325, 936], "upper": 1396, "upper_bound": [761, 1361], "upsampl": 326, "us": 207, "uses_lexical_ord": 1049, "using_string_cach": 191, "utf8": 96, "value_count": [762, 1362], "var": [327, 408, 591, 763, 840, 937, 1021, 1217, 1363], "varianc": 1390, "vstack": 328, "warn": 363, "week": [496, 1118], "weekdai": [497, 1119], "when": 841, "where": [764, 1389], "width": [329, 938], "window": 861, "with_column": [330, 939], "with_columns_seq": [331, 940], "with_context": 941, "with_field": 749, "with_row_count": [332, 942], "with_row_index": [333, 943], "with_time_unit": [498, 1120], "write_avro": 36, "write_clipboard": 37, "write_csv": 38, "write_databas": 39, "write_delta": 40, "write_excel": 41, "write_iceberg": 42, "write_ipc": 43, "write_ipc_stream": 44, "write_json": [45, 616], "write_ndjson": 46, "write_parquet": 47, "xor": 765, "year": [499, 1121], "zero": 842, "zfill": [744, 1336], "zip_with": 1364}})